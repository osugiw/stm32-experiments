
OLED_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039b0  08002c9c  08002c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800664c  0800664c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800664c  0800664c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800664c  0800664c  0001664c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000014  08006668  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08006668  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fc0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c62  00000000  00000000  00028ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b5a  00000000  00000000  0002bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5f9  00000000  00000000  000407f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ed99  00000000  00000000  0004bdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cab84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d34  00000000  00000000  000cabd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002c84 	.word	0x08002c84

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08002c84 	.word	0x08002c84

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 ff51 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f927 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9c7 	bl	80005b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800022a:	f000 f983 	bl	8000534 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();  // initialise
 800022e:	f000 fb95 	bl	800095c <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 8000232:	2100      	movs	r1, #0
 8000234:	2000      	movs	r0, #0
 8000236:	f000 fd11 	bl	8000c5c <SSD1306_GotoXY>
      SSD1306_Puts ("HELLO", &Font_11x18, 1);
 800023a:	4980      	ldr	r1, [pc, #512]	; (800043c <main+0x224>)
 800023c:	4b80      	ldr	r3, [pc, #512]	; (8000440 <main+0x228>)
 800023e:	2201      	movs	r2, #1
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fda5 	bl	8000d90 <SSD1306_Puts>
      SSD1306_GotoXY (10, 30);
 8000246:	211e      	movs	r1, #30
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fd07 	bl	8000c5c <SSD1306_GotoXY>
      SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 800024e:	497b      	ldr	r1, [pc, #492]	; (800043c <main+0x224>)
 8000250:	4b7c      	ldr	r3, [pc, #496]	; (8000444 <main+0x22c>)
 8000252:	2201      	movs	r2, #1
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fd9b 	bl	8000d90 <SSD1306_Puts>
      SSD1306_UpdateScreen(); //display
 800025a:	f000 fc43 	bl	8000ae4 <SSD1306_UpdateScreen>

      HAL_Delay (2000);
 800025e:	23fa      	movs	r3, #250	; 0xfa
 8000260:	00db      	lsls	r3, r3, #3
 8000262:	0018      	movs	r0, r3
 8000264:	f000 ffb4 	bl	80011d0 <HAL_Delay>


      SSD1306_ScrollRight(0,7);  // scroll entire screen
 8000268:	2107      	movs	r1, #7
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f9bf 	bl	80005ee <SSD1306_ScrollRight>
      HAL_Delay(2000);  // 2 sec
 8000270:	23fa      	movs	r3, #250	; 0xfa
 8000272:	00db      	lsls	r3, r3, #3
 8000274:	0018      	movs	r0, r3
 8000276:	f000 ffab 	bl	80011d0 <HAL_Delay>

      SSD1306_ScrollLeft(0,7);  // scroll entire screen
 800027a:	2107      	movs	r1, #7
 800027c:	2000      	movs	r0, #0
 800027e:	f000 f9ef 	bl	8000660 <SSD1306_ScrollLeft>
      HAL_Delay(2000);  // 2 sec
 8000282:	23fa      	movs	r3, #250	; 0xfa
 8000284:	00db      	lsls	r3, r3, #3
 8000286:	0018      	movs	r0, r3
 8000288:	f000 ffa2 	bl	80011d0 <HAL_Delay>

      SSD1306_Stopscroll();
 800028c:	f000 faa7 	bl	80007de <SSD1306_Stopscroll>
      SSD1306_Clear();
 8000290:	f000 fda4 	bl	8000ddc <SSD1306_Clear>

      SSD1306_DrawBitmap(0,0,logo, 128, 64, 1);
 8000294:	4a6c      	ldr	r2, [pc, #432]	; (8000448 <main+0x230>)
 8000296:	2301      	movs	r3, #1
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	2340      	movs	r3, #64	; 0x40
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2380      	movs	r3, #128	; 0x80
 80002a0:	2100      	movs	r1, #0
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 fabb 	bl	800081e <SSD1306_DrawBitmap>
      SSD1306_UpdateScreen();
 80002a8:	f000 fc1c 	bl	8000ae4 <SSD1306_UpdateScreen>

      HAL_Delay(2000);
 80002ac:	23fa      	movs	r3, #250	; 0xfa
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 ff8d 	bl	80011d0 <HAL_Delay>

      SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 80002b6:	210f      	movs	r1, #15
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 f998 	bl	80005ee <SSD1306_ScrollRight>

      HAL_Delay (2000);
 80002be:	23fa      	movs	r3, #250	; 0xfa
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 ff84 	bl	80011d0 <HAL_Delay>

      SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 80002c8:	210f      	movs	r1, #15
 80002ca:	2000      	movs	r0, #0
 80002cc:	f000 f9c8 	bl	8000660 <SSD1306_ScrollLeft>

      HAL_Delay (2000);
 80002d0:	23fa      	movs	r3, #250	; 0xfa
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 ff7b 	bl	80011d0 <HAL_Delay>

      SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 80002da:	210f      	movs	r1, #15
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 f9f8 	bl	80006d2 <SSD1306_Scrolldiagright>

      HAL_Delay (2000);
 80002e2:	23fa      	movs	r3, #250	; 0xfa
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 ff72 	bl	80011d0 <HAL_Delay>

      SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 80002ec:	210f      	movs	r1, #15
 80002ee:	2000      	movs	r0, #0
 80002f0:	f000 fa32 	bl	8000758 <SSD1306_Scrolldiagleft>

      HAL_Delay (2000);
 80002f4:	23fa      	movs	r3, #250	; 0xfa
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 ff69 	bl	80011d0 <HAL_Delay>

      SSD1306_Stopscroll();   // stop scrolling. If not done, screen will keep on scrolling
 80002fe:	f000 fa6e 	bl	80007de <SSD1306_Stopscroll>


      SSD1306_InvertDisplay(1);   // invert the display
 8000302:	2001      	movs	r0, #1
 8000304:	f000 fa75 	bl	80007f2 <SSD1306_InvertDisplay>

      HAL_Delay(2000);
 8000308:	23fa      	movs	r3, #250	; 0xfa
 800030a:	00db      	lsls	r3, r3, #3
 800030c:	0018      	movs	r0, r3
 800030e:	f000 ff5f 	bl	80011d0 <HAL_Delay>

      SSD1306_InvertDisplay(0);  // normalize the display
 8000312:	2000      	movs	r0, #0
 8000314:	f000 fa6d 	bl	80007f2 <SSD1306_InvertDisplay>
  //

      HAL_Delay(2000);
 8000318:	23fa      	movs	r3, #250	; 0xfa
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	0018      	movs	r0, r3
 800031e:	f000 ff57 	bl	80011d0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SSD1306_Clear();
 8000322:	f000 fd5b 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 8000326:	4a49      	ldr	r2, [pc, #292]	; (800044c <main+0x234>)
 8000328:	2301      	movs	r3, #1
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	2340      	movs	r3, #64	; 0x40
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	2100      	movs	r1, #0
 8000334:	2000      	movs	r0, #0
 8000336:	f000 fa72 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800033a:	f000 fbd3 	bl	8000ae4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 800033e:	f000 fd4d 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 8000342:	4a43      	ldr	r2, [pc, #268]	; (8000450 <main+0x238>)
 8000344:	2301      	movs	r3, #1
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	2340      	movs	r3, #64	; 0x40
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	2100      	movs	r1, #0
 8000350:	2000      	movs	r0, #0
 8000352:	f000 fa64 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000356:	f000 fbc5 	bl	8000ae4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 800035a:	f000 fd3f 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 800035e:	4a3d      	ldr	r2, [pc, #244]	; (8000454 <main+0x23c>)
 8000360:	2301      	movs	r3, #1
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	2340      	movs	r3, #64	; 0x40
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	2100      	movs	r1, #0
 800036c:	2000      	movs	r0, #0
 800036e:	f000 fa56 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000372:	f000 fbb7 	bl	8000ae4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000376:	f000 fd31 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 800037a:	4a37      	ldr	r2, [pc, #220]	; (8000458 <main+0x240>)
 800037c:	2301      	movs	r3, #1
 800037e:	9301      	str	r3, [sp, #4]
 8000380:	2340      	movs	r3, #64	; 0x40
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	2100      	movs	r1, #0
 8000388:	2000      	movs	r0, #0
 800038a:	f000 fa48 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800038e:	f000 fba9 	bl	8000ae4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000392:	f000 fd23 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 8000396:	4a31      	ldr	r2, [pc, #196]	; (800045c <main+0x244>)
 8000398:	2301      	movs	r3, #1
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	2340      	movs	r3, #64	; 0x40
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	2100      	movs	r1, #0
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 fa3a 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80003aa:	f000 fb9b 	bl	8000ae4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80003ae:	f000 fd15 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 80003b2:	4a2b      	ldr	r2, [pc, #172]	; (8000460 <main+0x248>)
 80003b4:	2301      	movs	r3, #1
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	2340      	movs	r3, #64	; 0x40
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2380      	movs	r3, #128	; 0x80
 80003be:	2100      	movs	r1, #0
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 fa2c 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80003c6:	f000 fb8d 	bl	8000ae4 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 80003ca:	f000 fd07 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 80003ce:	4a25      	ldr	r2, [pc, #148]	; (8000464 <main+0x24c>)
 80003d0:	2301      	movs	r3, #1
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	2340      	movs	r3, #64	; 0x40
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	2100      	movs	r1, #0
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 fa1e 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80003e2:	f000 fb7f 	bl	8000ae4 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80003e6:	f000 fcf9 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 80003ea:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <main+0x250>)
 80003ec:	2301      	movs	r3, #1
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	2340      	movs	r3, #64	; 0x40
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	2100      	movs	r1, #0
 80003f8:	2000      	movs	r0, #0
 80003fa:	f000 fa10 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80003fe:	f000 fb71 	bl	8000ae4 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 8000402:	f000 fceb 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 8000406:	4a19      	ldr	r2, [pc, #100]	; (800046c <main+0x254>)
 8000408:	2301      	movs	r3, #1
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	2340      	movs	r3, #64	; 0x40
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	2100      	movs	r1, #0
 8000414:	2000      	movs	r0, #0
 8000416:	f000 fa02 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800041a:	f000 fb63 	bl	8000ae4 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 800041e:	f000 fcdd 	bl	8000ddc <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 8000422:	4a13      	ldr	r2, [pc, #76]	; (8000470 <main+0x258>)
 8000424:	2301      	movs	r3, #1
 8000426:	9301      	str	r3, [sp, #4]
 8000428:	2340      	movs	r3, #64	; 0x40
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	2100      	movs	r1, #0
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f9f4 	bl	800081e <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000436:	f000 fb55 	bl	8000ae4 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 800043a:	e772      	b.n	8000322 <main+0x10a>
 800043c:	20000000 	.word	0x20000000
 8000440:	08002c9c 	.word	0x08002c9c
 8000444:	08002ca4 	.word	0x08002ca4
 8000448:	08003a0c 	.word	0x08003a0c
 800044c:	08003e0c 	.word	0x08003e0c
 8000450:	0800420c 	.word	0x0800420c
 8000454:	0800460c 	.word	0x0800460c
 8000458:	08004a0c 	.word	0x08004a0c
 800045c:	08004e0c 	.word	0x08004e0c
 8000460:	0800520c 	.word	0x0800520c
 8000464:	0800560c 	.word	0x0800560c
 8000468:	08005a0c 	.word	0x08005a0c
 800046c:	08005e0c 	.word	0x08005e0c
 8000470:	0800620c 	.word	0x0800620c

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b099      	sub	sp, #100	; 0x64
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	242c      	movs	r4, #44	; 0x2c
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2334      	movs	r3, #52	; 0x34
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f002 fbf5 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048a:	231c      	movs	r3, #28
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	0018      	movs	r0, r3
 8000490:	2310      	movs	r3, #16
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f002 fbed 	bl	8002c74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049a:	003b      	movs	r3, r7
 800049c:	0018      	movs	r0, r3
 800049e:	231c      	movs	r3, #28
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f002 fbe6 	bl	8002c74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 fda9 	bl	8002004 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2202      	movs	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2240      	movs	r2, #64	; 0x40
 80004ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fdd5 	bl	8002084 <HAL_RCC_OscConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004de:	f000 f881 	bl	80005e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	211c      	movs	r1, #28
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2207      	movs	r2, #7
 80004e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2100      	movs	r1, #0
 8000500:	0018      	movs	r0, r3
 8000502:	f002 f8d5 	bl	80026b0 <HAL_RCC_ClockConfig>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800050a:	f000 f86b 	bl	80005e4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800050e:	003b      	movs	r3, r7
 8000510:	2220      	movs	r2, #32
 8000512:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000514:	003b      	movs	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051a:	003b      	movs	r3, r7
 800051c:	0018      	movs	r0, r3
 800051e:	f002 fa51 	bl	80029c4 <HAL_RCCEx_PeriphCLKConfig>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000526:	f000 f85d 	bl	80005e4 <Error_Handler>
  }
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b019      	add	sp, #100	; 0x64
 8000530:	bd90      	pop	{r4, r7, pc}
	...

08000534 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_I2C1_Init+0x78>)
 800053a:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <MX_I2C1_Init+0x7c>)
 800053c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010071B;
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_I2C1_Init+0x78>)
 8000540:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x80>)
 8000542:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_I2C1_Init+0x78>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_I2C1_Init+0x78>)
 800054c:	2201      	movs	r2, #1
 800054e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_I2C1_Init+0x78>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_I2C1_Init+0x78>)
 8000558:	2200      	movs	r2, #0
 800055a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <MX_I2C1_Init+0x78>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_I2C1_Init+0x78>)
 8000564:	2200      	movs	r2, #0
 8000566:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_I2C1_Init+0x78>)
 800056a:	2200      	movs	r2, #0
 800056c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_I2C1_Init+0x78>)
 8000570:	0018      	movs	r0, r3
 8000572:	f001 f87f 	bl	8001674 <HAL_I2C_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800057a:	f000 f833 	bl	80005e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	015a      	lsls	r2, r3, #5
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MX_I2C1_Init+0x78>)
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fca4 	bl	8001ed4 <HAL_I2CEx_ConfigAnalogFilter>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8000590:	f000 f828 	bl	80005e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MX_I2C1_Init+0x78>)
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fce7 	bl	8001f6c <HAL_I2CEx_ConfigDigitalFilter>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80005a2:	f000 f81f 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000030 	.word	0x20000030
 80005b0:	40005400 	.word	0x40005400
 80005b4:	0010071b 	.word	0x0010071b

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_GPIO_Init+0x28>)
 80005c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_GPIO_Init+0x28>)
 80005c4:	2102      	movs	r1, #2
 80005c6:	430a      	orrs	r2, r1
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MX_GPIO_Init+0x28>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ce:	2202      	movs	r2, #2
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>

080005ee <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	0002      	movs	r2, r0
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	1dbb      	adds	r3, r7, #6
 80005fc:	1c0a      	adds	r2, r1, #0
 80005fe:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000600:	2226      	movs	r2, #38	; 0x26
 8000602:	2100      	movs	r1, #0
 8000604:	2078      	movs	r0, #120	; 0x78
 8000606:	f000 fc73 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2078      	movs	r0, #120	; 0x78
 8000610:	f000 fc6e 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	2078      	movs	r0, #120	; 0x78
 800061e:	f000 fc67 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2078      	movs	r0, #120	; 0x78
 8000628:	f000 fc62 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	; 0x78
 8000636:	f000 fc5b 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	; 0x78
 8000640:	f000 fc56 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000644:	22ff      	movs	r2, #255	; 0xff
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	; 0x78
 800064a:	f000 fc51 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800064e:	222f      	movs	r2, #47	; 0x2f
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	; 0x78
 8000654:	f000 fc4c 	bl	8000ef0 <ssd1306_I2C_Write>
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}

08000660 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	1dbb      	adds	r3, r7, #6
 800066e:	1c0a      	adds	r2, r1, #0
 8000670:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000672:	2227      	movs	r2, #39	; 0x27
 8000674:	2100      	movs	r1, #0
 8000676:	2078      	movs	r0, #120	; 0x78
 8000678:	f000 fc3a 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2078      	movs	r0, #120	; 0x78
 8000682:	f000 fc35 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	; 0x78
 8000690:	f000 fc2e 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	; 0x78
 800069a:	f000 fc29 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800069e:	1dbb      	adds	r3, r7, #6
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	2078      	movs	r0, #120	; 0x78
 80006a8:	f000 fc22 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2078      	movs	r0, #120	; 0x78
 80006b2:	f000 fc1d 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	2100      	movs	r1, #0
 80006ba:	2078      	movs	r0, #120	; 0x78
 80006bc:	f000 fc18 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80006c0:	222f      	movs	r2, #47	; 0x2f
 80006c2:	2100      	movs	r1, #0
 80006c4:	2078      	movs	r0, #120	; 0x78
 80006c6:	f000 fc13 	bl	8000ef0 <ssd1306_I2C_Write>
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	0002      	movs	r2, r0
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	1dbb      	adds	r3, r7, #6
 80006e0:	1c0a      	adds	r2, r1, #0
 80006e2:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 80006e4:	22a3      	movs	r2, #163	; 0xa3
 80006e6:	2100      	movs	r1, #0
 80006e8:	2078      	movs	r0, #120	; 0x78
 80006ea:	f000 fc01 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2078      	movs	r0, #120	; 0x78
 80006f4:	f000 fbfc 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 80006f8:	2240      	movs	r2, #64	; 0x40
 80006fa:	2100      	movs	r1, #0
 80006fc:	2078      	movs	r0, #120	; 0x78
 80006fe:	f000 fbf7 	bl	8000ef0 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 8000702:	2229      	movs	r2, #41	; 0x29
 8000704:	2100      	movs	r1, #0
 8000706:	2078      	movs	r0, #120	; 0x78
 8000708:	f000 fbf2 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	2078      	movs	r0, #120	; 0x78
 8000712:	f000 fbed 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	2078      	movs	r0, #120	; 0x78
 8000720:	f000 fbe6 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2078      	movs	r0, #120	; 0x78
 800072a:	f000 fbe1 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 800072e:	1dbb      	adds	r3, r7, #6
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	2078      	movs	r0, #120	; 0x78
 8000738:	f000 fbda 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 800073c:	2201      	movs	r2, #1
 800073e:	2100      	movs	r1, #0
 8000740:	2078      	movs	r0, #120	; 0x78
 8000742:	f000 fbd5 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8000746:	222f      	movs	r2, #47	; 0x2f
 8000748:	2100      	movs	r1, #0
 800074a:	2078      	movs	r0, #120	; 0x78
 800074c:	f000 fbd0 	bl	8000ef0 <ssd1306_I2C_Write>
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}

08000758 <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	1c0a      	adds	r2, r1, #0
 8000768:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 800076a:	22a3      	movs	r2, #163	; 0xa3
 800076c:	2100      	movs	r1, #0
 800076e:	2078      	movs	r0, #120	; 0x78
 8000770:	f000 fbbe 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2078      	movs	r0, #120	; 0x78
 800077a:	f000 fbb9 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	2100      	movs	r1, #0
 8000782:	2078      	movs	r0, #120	; 0x78
 8000784:	f000 fbb4 	bl	8000ef0 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 8000788:	222a      	movs	r2, #42	; 0x2a
 800078a:	2100      	movs	r1, #0
 800078c:	2078      	movs	r0, #120	; 0x78
 800078e:	f000 fbaf 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2078      	movs	r0, #120	; 0x78
 8000798:	f000 fbaa 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	2078      	movs	r0, #120	; 0x78
 80007a6:	f000 fba3 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2078      	movs	r0, #120	; 0x78
 80007b0:	f000 fb9e 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	2078      	movs	r0, #120	; 0x78
 80007be:	f000 fb97 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2100      	movs	r1, #0
 80007c6:	2078      	movs	r0, #120	; 0x78
 80007c8:	f000 fb92 	bl	8000ef0 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 80007cc:	222f      	movs	r2, #47	; 0x2f
 80007ce:	2100      	movs	r1, #0
 80007d0:	2078      	movs	r0, #120	; 0x78
 80007d2:	f000 fb8d 	bl	8000ef0 <ssd1306_I2C_Write>
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}

080007de <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80007e2:	222e      	movs	r2, #46	; 0x2e
 80007e4:	2100      	movs	r1, #0
 80007e6:	2078      	movs	r0, #120	; 0x78
 80007e8:	f000 fb82 	bl	8000ef0 <ssd1306_I2C_Write>
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d005      	beq.n	800080c <SSD1306_InvertDisplay+0x1a>
 8000800:	22a7      	movs	r2, #167	; 0xa7
 8000802:	2100      	movs	r1, #0
 8000804:	2078      	movs	r0, #120	; 0x78
 8000806:	f000 fb73 	bl	8000ef0 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 800080a:	e004      	b.n	8000816 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 800080c:	22a6      	movs	r2, #166	; 0xa6
 800080e:	2100      	movs	r1, #0
 8000810:	2078      	movs	r0, #120	; 0x78
 8000812:	f000 fb6d 	bl	8000ef0 <ssd1306_I2C_Write>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}

0800081e <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800081e:	b590      	push	{r4, r7, lr}
 8000820:	b087      	sub	sp, #28
 8000822:	af00      	add	r7, sp, #0
 8000824:	0004      	movs	r4, r0
 8000826:	0008      	movs	r0, r1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	0019      	movs	r1, r3
 800082c:	230e      	movs	r3, #14
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	1c22      	adds	r2, r4, #0
 8000832:	801a      	strh	r2, [r3, #0]
 8000834:	230c      	movs	r3, #12
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	1c02      	adds	r2, r0, #0
 800083a:	801a      	strh	r2, [r3, #0]
 800083c:	1dbb      	adds	r3, r7, #6
 800083e:	1c0a      	adds	r2, r1, #0
 8000840:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000842:	1dbb      	adds	r3, r7, #6
 8000844:	2200      	movs	r2, #0
 8000846:	5e9b      	ldrsh	r3, [r3, r2]
 8000848:	3307      	adds	r3, #7
 800084a:	2b00      	cmp	r3, #0
 800084c:	da00      	bge.n	8000850 <SSD1306_DrawBitmap+0x32>
 800084e:	3307      	adds	r3, #7
 8000850:	10db      	asrs	r3, r3, #3
 8000852:	001a      	movs	r2, r3
 8000854:	2310      	movs	r3, #16
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 800085a:	2317      	movs	r3, #23
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 8000862:	2314      	movs	r3, #20
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	e068      	b.n	800093e <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 800086c:	2312      	movs	r3, #18
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	2200      	movs	r2, #0
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	e048      	b.n	8000908 <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 8000876:	2312      	movs	r3, #18
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	001a      	movs	r2, r3
 800087e:	2307      	movs	r3, #7
 8000880:	4013      	ands	r3, r2
 8000882:	d006      	beq.n	8000892 <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 8000884:	2317      	movs	r3, #23
 8000886:	18fa      	adds	r2, r7, r3
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	18db      	adds	r3, r3, r3
 800088e:	7013      	strb	r3, [r2, #0]
 8000890:	e019      	b.n	80008c6 <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000892:	2314      	movs	r3, #20
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2200      	movs	r2, #0
 8000898:	5e9b      	ldrsh	r3, [r3, r2]
 800089a:	2210      	movs	r2, #16
 800089c:	18ba      	adds	r2, r7, r2
 800089e:	2100      	movs	r1, #0
 80008a0:	5e52      	ldrsh	r2, [r2, r1]
 80008a2:	435a      	muls	r2, r3
 80008a4:	2312      	movs	r3, #18
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	5e5b      	ldrsh	r3, [r3, r1]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	da00      	bge.n	80008b2 <SSD1306_DrawBitmap+0x94>
 80008b0:	3307      	adds	r3, #7
 80008b2:	10db      	asrs	r3, r3, #3
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	18d3      	adds	r3, r2, r3
 80008b8:	001a      	movs	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	189a      	adds	r2, r3, r2
 80008be:	2317      	movs	r3, #23
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80008c6:	2317      	movs	r3, #23
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da11      	bge.n	80008f6 <SSD1306_DrawBitmap+0xd8>
 80008d2:	230e      	movs	r3, #14
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	2312      	movs	r3, #18
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	18d3      	adds	r3, r2, r3
 80008e0:	b298      	uxth	r0, r3
 80008e2:	230c      	movs	r3, #12
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	8819      	ldrh	r1, [r3, #0]
 80008e8:	232c      	movs	r3, #44	; 0x2c
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	001a      	movs	r2, r3
 80008f2:	f000 f945 	bl	8000b80 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80008f6:	2112      	movs	r1, #18
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	5e9b      	ldrsh	r3, [r3, r2]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	3301      	adds	r3, #1
 8000902:	b29a      	uxth	r2, r3
 8000904:	187b      	adds	r3, r7, r1
 8000906:	801a      	strh	r2, [r3, #0]
 8000908:	2312      	movs	r3, #18
 800090a:	18fa      	adds	r2, r7, r3
 800090c:	1dbb      	adds	r3, r7, #6
 800090e:	2100      	movs	r1, #0
 8000910:	5e52      	ldrsh	r2, [r2, r1]
 8000912:	2100      	movs	r1, #0
 8000914:	5e5b      	ldrsh	r3, [r3, r1]
 8000916:	429a      	cmp	r2, r3
 8000918:	dbad      	blt.n	8000876 <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 800091a:	2114      	movs	r1, #20
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	5e9b      	ldrsh	r3, [r3, r2]
 8000922:	b29b      	uxth	r3, r3
 8000924:	3301      	adds	r3, #1
 8000926:	b29a      	uxth	r2, r3
 8000928:	187b      	adds	r3, r7, r1
 800092a:	801a      	strh	r2, [r3, #0]
 800092c:	210c      	movs	r1, #12
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	5e9b      	ldrsh	r3, [r3, r2]
 8000934:	b29b      	uxth	r3, r3
 8000936:	3301      	adds	r3, #1
 8000938:	b29a      	uxth	r2, r3
 800093a:	187b      	adds	r3, r7, r1
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	2314      	movs	r3, #20
 8000940:	18fa      	adds	r2, r7, r3
 8000942:	2328      	movs	r3, #40	; 0x28
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	2100      	movs	r1, #0
 8000948:	5e52      	ldrsh	r2, [r2, r1]
 800094a:	2100      	movs	r1, #0
 800094c:	5e5b      	ldrsh	r3, [r3, r1]
 800094e:	429a      	cmp	r2, r3
 8000950:	db8c      	blt.n	800086c <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b007      	add	sp, #28
 800095a:	bd90      	pop	{r4, r7, pc}

0800095c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000962:	f000 fa45 	bl	8000df0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000966:	4b5b      	ldr	r3, [pc, #364]	; (8000ad4 <SSD1306_Init+0x178>)
 8000968:	485b      	ldr	r0, [pc, #364]	; (8000ad8 <SSD1306_Init+0x17c>)
 800096a:	2201      	movs	r2, #1
 800096c:	2178      	movs	r1, #120	; 0x78
 800096e:	f001 f81f 	bl	80019b0 <HAL_I2C_IsDeviceReady>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8000976:	2300      	movs	r3, #0
 8000978:	e0a8      	b.n	8000acc <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800097a:	4b58      	ldr	r3, [pc, #352]	; (8000adc <SSD1306_Init+0x180>)
 800097c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800097e:	e002      	b.n	8000986 <SSD1306_Init+0x2a>
		p--;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1f9      	bne.n	8000980 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800098c:	22ae      	movs	r2, #174	; 0xae
 800098e:	2100      	movs	r1, #0
 8000990:	2078      	movs	r0, #120	; 0x78
 8000992:	f000 faad 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000996:	2220      	movs	r2, #32
 8000998:	2100      	movs	r1, #0
 800099a:	2078      	movs	r0, #120	; 0x78
 800099c:	f000 faa8 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009a0:	2210      	movs	r2, #16
 80009a2:	2100      	movs	r1, #0
 80009a4:	2078      	movs	r0, #120	; 0x78
 80009a6:	f000 faa3 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009aa:	22b0      	movs	r2, #176	; 0xb0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	; 0x78
 80009b0:	f000 fa9e 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80009b4:	22c8      	movs	r2, #200	; 0xc8
 80009b6:	2100      	movs	r1, #0
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f000 fa99 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	; 0x78
 80009c4:	f000 fa94 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80009c8:	2210      	movs	r2, #16
 80009ca:	2100      	movs	r1, #0
 80009cc:	2078      	movs	r0, #120	; 0x78
 80009ce:	f000 fa8f 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80009d2:	2240      	movs	r2, #64	; 0x40
 80009d4:	2100      	movs	r1, #0
 80009d6:	2078      	movs	r0, #120	; 0x78
 80009d8:	f000 fa8a 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80009dc:	2281      	movs	r2, #129	; 0x81
 80009de:	2100      	movs	r1, #0
 80009e0:	2078      	movs	r0, #120	; 0x78
 80009e2:	f000 fa85 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80009e6:	22ff      	movs	r2, #255	; 0xff
 80009e8:	2100      	movs	r1, #0
 80009ea:	2078      	movs	r0, #120	; 0x78
 80009ec:	f000 fa80 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80009f0:	22a1      	movs	r2, #161	; 0xa1
 80009f2:	2100      	movs	r1, #0
 80009f4:	2078      	movs	r0, #120	; 0x78
 80009f6:	f000 fa7b 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80009fa:	22a6      	movs	r2, #166	; 0xa6
 80009fc:	2100      	movs	r1, #0
 80009fe:	2078      	movs	r0, #120	; 0x78
 8000a00:	f000 fa76 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a04:	22a8      	movs	r2, #168	; 0xa8
 8000a06:	2100      	movs	r1, #0
 8000a08:	2078      	movs	r0, #120	; 0x78
 8000a0a:	f000 fa71 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a0e:	223f      	movs	r2, #63	; 0x3f
 8000a10:	2100      	movs	r1, #0
 8000a12:	2078      	movs	r0, #120	; 0x78
 8000a14:	f000 fa6c 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a18:	22a4      	movs	r2, #164	; 0xa4
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2078      	movs	r0, #120	; 0x78
 8000a1e:	f000 fa67 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a22:	22d3      	movs	r2, #211	; 0xd3
 8000a24:	2100      	movs	r1, #0
 8000a26:	2078      	movs	r0, #120	; 0x78
 8000a28:	f000 fa62 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2078      	movs	r0, #120	; 0x78
 8000a32:	f000 fa5d 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a36:	22d5      	movs	r2, #213	; 0xd5
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2078      	movs	r0, #120	; 0x78
 8000a3c:	f000 fa58 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a40:	22f0      	movs	r2, #240	; 0xf0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2078      	movs	r0, #120	; 0x78
 8000a46:	f000 fa53 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a4a:	22d9      	movs	r2, #217	; 0xd9
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2078      	movs	r0, #120	; 0x78
 8000a50:	f000 fa4e 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a54:	2222      	movs	r2, #34	; 0x22
 8000a56:	2100      	movs	r1, #0
 8000a58:	2078      	movs	r0, #120	; 0x78
 8000a5a:	f000 fa49 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a5e:	22da      	movs	r2, #218	; 0xda
 8000a60:	2100      	movs	r1, #0
 8000a62:	2078      	movs	r0, #120	; 0x78
 8000a64:	f000 fa44 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a68:	2212      	movs	r2, #18
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2078      	movs	r0, #120	; 0x78
 8000a6e:	f000 fa3f 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a72:	22db      	movs	r2, #219	; 0xdb
 8000a74:	2100      	movs	r1, #0
 8000a76:	2078      	movs	r0, #120	; 0x78
 8000a78:	f000 fa3a 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2078      	movs	r0, #120	; 0x78
 8000a82:	f000 fa35 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a86:	228d      	movs	r2, #141	; 0x8d
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2078      	movs	r0, #120	; 0x78
 8000a8c:	f000 fa30 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a90:	2214      	movs	r2, #20
 8000a92:	2100      	movs	r1, #0
 8000a94:	2078      	movs	r0, #120	; 0x78
 8000a96:	f000 fa2b 	bl	8000ef0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a9a:	22af      	movs	r2, #175	; 0xaf
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2078      	movs	r0, #120	; 0x78
 8000aa0:	f000 fa26 	bl	8000ef0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000aa4:	222e      	movs	r2, #46	; 0x2e
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2078      	movs	r0, #120	; 0x78
 8000aaa:	f000 fa21 	bl	8000ef0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f84c 	bl	8000b4c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000ab4:	f000 f816 	bl	8000ae4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <SSD1306_Init+0x184>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <SSD1306_Init+0x184>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SSD1306_Init+0x184>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	00004e20 	.word	0x00004e20
 8000ad8:	20000030 	.word	0x20000030
 8000adc:	000009c4 	.word	0x000009c4
 8000ae0:	2000047c 	.word	0x2000047c

08000ae4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e021      	b.n	8000b36 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3b50      	subs	r3, #80	; 0x50
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	2078      	movs	r0, #120	; 0x78
 8000b00:	f000 f9f6 	bl	8000ef0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2078      	movs	r0, #120	; 0x78
 8000b0a:	f000 f9f1 	bl	8000ef0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b0e:	2210      	movs	r2, #16
 8000b10:	2100      	movs	r1, #0
 8000b12:	2078      	movs	r0, #120	; 0x78
 8000b14:	f000 f9ec 	bl	8000ef0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	01da      	lsls	r2, r3, #7
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <SSD1306_UpdateScreen+0x64>)
 8000b20:	18d2      	adds	r2, r2, r3
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	2078      	movs	r0, #120	; 0x78
 8000b28:	f000 f976 	bl	8000e18 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	3201      	adds	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b07      	cmp	r3, #7
 8000b3c:	d9d9      	bls.n	8000af2 <SSD1306_UpdateScreen+0xe>
	}
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000007c 	.word	0x2000007c

08000b4c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <SSD1306_Fill+0x18>
 8000b60:	2300      	movs	r3, #0
 8000b62:	e000      	b.n	8000b66 <SSD1306_Fill+0x1a>
 8000b64:	23ff      	movs	r3, #255	; 0xff
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <SSD1306_Fill+0x30>)
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	f002 f881 	bl	8002c74 <memset>
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	2000007c 	.word	0x2000007c

08000b80 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	0004      	movs	r4, r0
 8000b88:	0008      	movs	r0, r1
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	1dbb      	adds	r3, r7, #6
 8000b8e:	1c22      	adds	r2, r4, #0
 8000b90:	801a      	strh	r2, [r3, #0]
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	1c02      	adds	r2, r0, #0
 8000b96:	801a      	strh	r2, [r3, #0]
 8000b98:	1cfb      	adds	r3, r7, #3
 8000b9a:	1c0a      	adds	r2, r1, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
	if (
 8000b9e:	1dbb      	adds	r3, r7, #6
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba4:	d852      	bhi.n	8000c4c <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bac:	d84e      	bhi.n	8000c4c <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <SSD1306_DrawPixel+0xd4>)
 8000bb0:	791b      	ldrb	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d006      	beq.n	8000bc4 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8000bb6:	1cfb      	adds	r3, r7, #3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	425a      	negs	r2, r3
 8000bbc:	4153      	adcs	r3, r2
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	1cfb      	adds	r3, r7, #3
 8000bc2:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000bc4:	1cfb      	adds	r3, r7, #3
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d11e      	bne.n	8000c0a <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bcc:	1dbb      	adds	r3, r7, #6
 8000bce:	881a      	ldrh	r2, [r3, #0]
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	b298      	uxth	r0, r3
 8000bd8:	0003      	movs	r3, r0
 8000bda:	01db      	lsls	r3, r3, #7
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <SSD1306_DrawPixel+0xd8>)
 8000be0:	5cd3      	ldrb	r3, [r2, r3]
 8000be2:	b25a      	sxtb	r2, r3
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	2107      	movs	r1, #7
 8000bea:	400b      	ands	r3, r1
 8000bec:	2101      	movs	r1, #1
 8000bee:	4099      	lsls	r1, r3
 8000bf0:	000b      	movs	r3, r1
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b259      	sxtb	r1, r3
 8000bf8:	1dbb      	adds	r3, r7, #6
 8000bfa:	881a      	ldrh	r2, [r3, #0]
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	01db      	lsls	r3, r3, #7
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	b2c9      	uxtb	r1, r1
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <SSD1306_DrawPixel+0xd8>)
 8000c06:	54d1      	strb	r1, [r2, r3]
 8000c08:	e021      	b.n	8000c4e <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c0a:	1dbb      	adds	r3, r7, #6
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	b298      	uxth	r0, r3
 8000c16:	0003      	movs	r3, r0
 8000c18:	01db      	lsls	r3, r3, #7
 8000c1a:	18d3      	adds	r3, r2, r3
 8000c1c:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <SSD1306_DrawPixel+0xd8>)
 8000c1e:	5cd3      	ldrb	r3, [r2, r3]
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	1d3a      	adds	r2, r7, #4
 8000c24:	8812      	ldrh	r2, [r2, #0]
 8000c26:	2107      	movs	r1, #7
 8000c28:	400a      	ands	r2, r1
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	b252      	sxtb	r2, r2
 8000c32:	43d2      	mvns	r2, r2
 8000c34:	b252      	sxtb	r2, r2
 8000c36:	4013      	ands	r3, r2
 8000c38:	b259      	sxtb	r1, r3
 8000c3a:	1dbb      	adds	r3, r7, #6
 8000c3c:	881a      	ldrh	r2, [r3, #0]
 8000c3e:	0003      	movs	r3, r0
 8000c40:	01db      	lsls	r3, r3, #7
 8000c42:	18d3      	adds	r3, r2, r3
 8000c44:	b2c9      	uxtb	r1, r1
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <SSD1306_DrawPixel+0xd8>)
 8000c48:	54d1      	strb	r1, [r2, r3]
 8000c4a:	e000      	b.n	8000c4e <SSD1306_DrawPixel+0xce>
		return;
 8000c4c:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b003      	add	sp, #12
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	2000047c 	.word	0x2000047c
 8000c58:	2000007c 	.word	0x2000007c

08000c5c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	0002      	movs	r2, r0
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	801a      	strh	r2, [r3, #0]
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	1c0a      	adds	r2, r1, #0
 8000c6c:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SSD1306_GotoXY+0x2c>)
 8000c70:	1dba      	adds	r2, r7, #6
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SSD1306_GotoXY+0x2c>)
 8000c78:	1d3a      	adds	r2, r7, #4
 8000c7a:	8812      	ldrh	r2, [r2, #0]
 8000c7c:	805a      	strh	r2, [r3, #2]
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000047c 	.word	0x2000047c

08000c8c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6039      	str	r1, [r7, #0]
 8000c94:	0011      	movs	r1, r2
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	1c02      	adds	r2, r0, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	1dbb      	adds	r3, r7, #6
 8000c9e:	1c0a      	adds	r2, r1, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ca2:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <SSD1306_Putc+0x100>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	18d3      	adds	r3, r2, r3
	if (
 8000cae:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb0:	dc07      	bgt.n	8000cc2 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000cb2:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <SSD1306_Putc+0x100>)
 8000cb4:	885b      	ldrh	r3, [r3, #2]
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	785b      	ldrb	r3, [r3, #1]
 8000cbc:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000cbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc0:	dd01      	ble.n	8000cc6 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e05e      	b.n	8000d84 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	e04a      	b.n	8000d62 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3b20      	subs	r3, #32
 8000cd6:	6839      	ldr	r1, [r7, #0]
 8000cd8:	7849      	ldrb	r1, [r1, #1]
 8000cda:	434b      	muls	r3, r1
 8000cdc:	0019      	movs	r1, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	18cb      	adds	r3, r1, r3
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e02f      	b.n	8000d50 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d011      	beq.n	8000d22 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000cfe:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <SSD1306_Putc+0x100>)
 8000d00:	881a      	ldrh	r2, [r3, #0]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	18d3      	adds	r3, r2, r3
 8000d08:	b298      	uxth	r0, r3
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <SSD1306_Putc+0x100>)
 8000d0c:	885a      	ldrh	r2, [r3, #2]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	18d3      	adds	r3, r2, r3
 8000d14:	b299      	uxth	r1, r3
 8000d16:	1dbb      	adds	r3, r7, #6
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	f7ff ff30 	bl	8000b80 <SSD1306_DrawPixel>
 8000d20:	e013      	b.n	8000d4a <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <SSD1306_Putc+0x100>)
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	b298      	uxth	r0, r3
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <SSD1306_Putc+0x100>)
 8000d30:	885a      	ldrh	r2, [r3, #2]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	b299      	uxth	r1, r3
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	425a      	negs	r2, r3
 8000d40:	4153      	adcs	r3, r2
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	001a      	movs	r2, r3
 8000d46:	f7ff ff1b 	bl	8000b80 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	001a      	movs	r2, r3
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d3c9      	bcc.n	8000cf0 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	785b      	ldrb	r3, [r3, #1]
 8000d66:	001a      	movs	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d3ae      	bcc.n	8000ccc <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <SSD1306_Putc+0x100>)
 8000d70:	881a      	ldrh	r2, [r3, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <SSD1306_Putc+0x100>)
 8000d7e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b006      	add	sp, #24
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000047c 	.word	0x2000047c

08000d90 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8000d9e:	e013      	b.n	8000dc8 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	7818      	ldrb	r0, [r3, #0]
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	0019      	movs	r1, r3
 8000dac:	f7ff ff6e 	bl	8000c8c <SSD1306_Putc>
 8000db0:	0003      	movs	r3, r0
 8000db2:	001a      	movs	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d002      	beq.n	8000dc2 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	e008      	b.n	8000dd4 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1e7      	bne.n	8000da0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b004      	add	sp, #16
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff feb3 	bl	8000b4c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000de6:	f7ff fe7d 	bl	8000ae4 <SSD1306_UpdateScreen>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <ssd1306_I2C_Init+0x24>)
 8000df8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dfa:	e002      	b.n	8000e02 <ssd1306_I2C_Init+0x12>
		p--;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f9      	bne.n	8000dfc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	0003d090 	.word	0x0003d090

08000e18 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b0c6      	sub	sp, #280	; 0x118
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	0004      	movs	r4, r0
 8000e20:	0008      	movs	r0, r1
 8000e22:	603a      	str	r2, [r7, #0]
 8000e24:	0019      	movs	r1, r3
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <ssd1306_I2C_WriteMulti+0xc4>)
 8000e28:	2588      	movs	r5, #136	; 0x88
 8000e2a:	006d      	lsls	r5, r5, #1
 8000e2c:	195b      	adds	r3, r3, r5
 8000e2e:	19db      	adds	r3, r3, r7
 8000e30:	1c22      	adds	r2, r4, #0
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000e36:	002c      	movs	r4, r5
 8000e38:	191b      	adds	r3, r3, r4
 8000e3a:	19db      	adds	r3, r3, r7
 8000e3c:	1c02      	adds	r2, r0, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <ssd1306_I2C_WriteMulti+0xcc>)
 8000e42:	0020      	movs	r0, r4
 8000e44:	181b      	adds	r3, r3, r0
 8000e46:	19db      	adds	r3, r3, r7
 8000e48:	1c0a      	adds	r2, r1, #0
 8000e4a:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <ssd1306_I2C_WriteMulti+0xd0>)
 8000e4e:	181b      	adds	r3, r3, r0
 8000e50:	19db      	adds	r3, r3, r7
 8000e52:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000e54:	1812      	adds	r2, r2, r0
 8000e56:	19d2      	adds	r2, r2, r7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	33ff      	adds	r3, #255	; 0xff
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e014      	b.n	8000e92 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8000e68:	2010      	movs	r0, #16
 8000e6a:	30ff      	adds	r0, #255	; 0xff
 8000e6c:	183b      	adds	r3, r7, r0
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	18d2      	adds	r2, r2, r3
 8000e74:	183b      	adds	r3, r7, r0
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	7811      	ldrb	r1, [r2, #0]
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <ssd1306_I2C_WriteMulti+0xd0>)
 8000e7e:	2488      	movs	r4, #136	; 0x88
 8000e80:	0064      	lsls	r4, r4, #1
 8000e82:	1912      	adds	r2, r2, r4
 8000e84:	19d2      	adds	r2, r2, r7
 8000e86:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e88:	183b      	adds	r3, r7, r0
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	183b      	adds	r3, r7, r0
 8000e8e:	3201      	adds	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	2310      	movs	r3, #16
 8000e94:	33ff      	adds	r3, #255	; 0xff
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <ssd1306_I2C_WriteMulti+0xcc>)
 8000e9e:	2188      	movs	r1, #136	; 0x88
 8000ea0:	0049      	lsls	r1, r1, #1
 8000ea2:	1852      	adds	r2, r2, r1
 8000ea4:	19d2      	adds	r2, r2, r7
 8000ea6:	8812      	ldrh	r2, [r2, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8dd      	bhi.n	8000e68 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <ssd1306_I2C_WriteMulti+0xc4>)
 8000eae:	000a      	movs	r2, r1
 8000eb0:	189b      	adds	r3, r3, r2
 8000eb2:	19db      	adds	r3, r3, r7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <ssd1306_I2C_WriteMulti+0xcc>)
 8000eba:	189b      	adds	r3, r3, r2
 8000ebc:	19db      	adds	r3, r3, r7
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	18ba      	adds	r2, r7, r2
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <ssd1306_I2C_WriteMulti+0xd4>)
 8000eca:	240a      	movs	r4, #10
 8000ecc:	9400      	str	r4, [sp, #0]
 8000ece:	f000 fc67 	bl	80017a0 <HAL_I2C_Master_Transmit>
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b044      	add	sp, #272	; 0x110
 8000ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	fffffef7 	.word	0xfffffef7
 8000ee0:	fffffef6 	.word	0xfffffef6
 8000ee4:	fffffef4 	.word	0xfffffef4
 8000ee8:	fffffefc 	.word	0xfffffefc
 8000eec:	20000030 	.word	0x20000030

08000ef0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	0004      	movs	r4, r0
 8000ef8:	0008      	movs	r0, r1
 8000efa:	0011      	movs	r1, r2
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	1c22      	adds	r2, r4, #0
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	1c02      	adds	r2, r0, #0
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	1d7b      	adds	r3, r7, #5
 8000f0a:	1c0a      	adds	r2, r1, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8000f0e:	200c      	movs	r0, #12
 8000f10:	183b      	adds	r3, r7, r0
 8000f12:	1dba      	adds	r2, r7, #6
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	1d7a      	adds	r2, r7, #5
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b299      	uxth	r1, r3
 8000f26:	183a      	adds	r2, r7, r0
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ssd1306_I2C_Write+0x4c>)
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f000 fc36 	bl	80017a0 <HAL_I2C_Master_Transmit>
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b005      	add	sp, #20
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	20000030 	.word	0x20000030

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	2201      	movs	r2, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f64:	2180      	movs	r1, #128	; 0x80
 8000f66:	0549      	lsls	r1, r1, #21
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_MspInit+0x4c>)
 8000f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	055b      	lsls	r3, r3, #21
 8000f74:	4013      	ands	r3, r2
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f7a:	23c0      	movs	r3, #192	; 0xc0
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 f94a 	bl	8001218 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	2414      	movs	r4, #20
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	2314      	movs	r3, #20
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	f001 fe66 	bl	8002c74 <memset>
  if(hi2c->Instance==I2C1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <HAL_I2C_MspInit+0x8c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d130      	bne.n	8001014 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_I2C_MspInit+0x90>)
 8000fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_I2C_MspInit+0x90>)
 8000fb8:	2102      	movs	r1, #2
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_I2C_MspInit+0x90>)
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	22c0      	movs	r2, #192	; 0xc0
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	0021      	movs	r1, r4
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2212      	movs	r2, #18
 8000fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2201      	movs	r2, #1
 8000fde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2206      	movs	r2, #6
 8000fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <HAL_I2C_MspInit+0x94>)
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	f000 f9da 	bl	80013ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_I2C_MspInit+0x90>)
 8000ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_I2C_MspInit+0x90>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0389      	lsls	r1, r1, #14
 8001002:	430a      	orrs	r2, r1
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_I2C_MspInit+0x90>)
 8001008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	039b      	lsls	r3, r3, #14
 800100e:	4013      	ands	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b00b      	add	sp, #44	; 0x2c
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	40005400 	.word	0x40005400
 8001020:	40021000 	.word	0x40021000
 8001024:	50000400 	.word	0x50000400

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f8a4 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <SystemInit+0x14>)
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	0512      	lsls	r2, r2, #20
 8001062:	609a      	str	r2, [r3, #8]
#endif
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001072:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001074:	f7ff fff0 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <LoopForever+0x6>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <LoopForever+0xe>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <LoopForever+0x16>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800109e:	f001 fdc5 	bl	8002c2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010a2:	f7ff f8b9 	bl	8000218 <main>

080010a6 <LoopForever>:

LoopForever:
  b LoopForever
 80010a6:	e7fe      	b.n	80010a6 <LoopForever>
  ldr   r0, =_estack
 80010a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010b4:	08006654 	.word	0x08006654
  ldr r2, =_sbss
 80010b8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010bc:	20000488 	.word	0x20000488

080010c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_Init+0x3c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Init+0x3c>)
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	0049      	lsls	r1, r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f810 	bl	8001104 <HAL_InitTick>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e001      	b.n	80010f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff ff26 	bl	8000f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40022000 	.word	0x40022000

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	230f      	movs	r3, #15
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_InitTick+0x88>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d02b      	beq.n	8001174 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_InitTick+0x8c>)
 800111e:	681c      	ldr	r4, [r3, #0]
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_InitTick+0x88>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	0019      	movs	r1, r3
 8001126:	23fa      	movs	r3, #250	; 0xfa
 8001128:	0098      	lsls	r0, r3, #2
 800112a:	f7fe ffe9 	bl	8000100 <__udivsi3>
 800112e:	0003      	movs	r3, r0
 8001130:	0019      	movs	r1, r3
 8001132:	0020      	movs	r0, r4
 8001134:	f7fe ffe4 	bl	8000100 <__udivsi3>
 8001138:	0003      	movs	r3, r0
 800113a:	0018      	movs	r0, r3
 800113c:	f000 f929 	bl	8001392 <HAL_SYSTICK_Config>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d112      	bne.n	800116a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d80a      	bhi.n	8001160 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	2301      	movs	r3, #1
 800114e:	425b      	negs	r3, r3
 8001150:	2200      	movs	r2, #0
 8001152:	0018      	movs	r0, r3
 8001154:	f000 f908 	bl	8001368 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_InitTick+0x90>)
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e00d      	b.n	800117c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001160:	230f      	movs	r3, #15
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e008      	b.n	800117c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116a:	230f      	movs	r3, #15
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e003      	b.n	800117c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001174:	230f      	movs	r3, #15
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	781b      	ldrb	r3, [r3, #0]
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b005      	add	sp, #20
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000010 	.word	0x20000010
 8001190:	20000008 	.word	0x20000008
 8001194:	2000000c 	.word	0x2000000c

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_IncTick+0x1c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	001a      	movs	r2, r3
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x20>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	18d2      	adds	r2, r2, r3
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_IncTick+0x20>)
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000010 	.word	0x20000010
 80011b8:	20000484 	.word	0x20000484

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b02      	ldr	r3, [pc, #8]	; (80011cc <HAL_GetTick+0x10>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	0018      	movs	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	20000484 	.word	0x20000484

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff fff0 	bl	80011bc <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	001a      	movs	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	189b      	adds	r3, r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	f7ff ffe0 	bl	80011bc <HAL_GetTick>
 80011fc:	0002      	movs	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	20000010 	.word	0x20000010

08001218 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001226:	4013      	ands	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40010000 	.word	0x40010000
 8001240:	fffff9ff 	.word	0xfffff9ff

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	0002      	movs	r2, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b7f      	cmp	r3, #127	; 0x7f
 8001258:	d828      	bhi.n	80012ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125a:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <__NVIC_SetPriority+0xd4>)
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	33c0      	adds	r3, #192	; 0xc0
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	589b      	ldr	r3, [r3, r2]
 800126a:	1dfa      	adds	r2, r7, #7
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	0011      	movs	r1, r2
 8001270:	2203      	movs	r2, #3
 8001272:	400a      	ands	r2, r1
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	21ff      	movs	r1, #255	; 0xff
 8001278:	4091      	lsls	r1, r2
 800127a:	000a      	movs	r2, r1
 800127c:	43d2      	mvns	r2, r2
 800127e:	401a      	ands	r2, r3
 8001280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	019b      	lsls	r3, r3, #6
 8001286:	22ff      	movs	r2, #255	; 0xff
 8001288:	401a      	ands	r2, r3
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0018      	movs	r0, r3
 8001290:	2303      	movs	r3, #3
 8001292:	4003      	ands	r3, r0
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <__NVIC_SetPriority+0xd4>)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	430a      	orrs	r2, r1
 80012a4:	33c0      	adds	r3, #192	; 0xc0
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012aa:	e031      	b.n	8001310 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <__NVIC_SetPriority+0xd8>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0019      	movs	r1, r3
 80012b4:	230f      	movs	r3, #15
 80012b6:	400b      	ands	r3, r1
 80012b8:	3b08      	subs	r3, #8
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3306      	adds	r3, #6
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	3304      	adds	r3, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1dfa      	adds	r2, r7, #7
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	0011      	movs	r1, r2
 80012cc:	2203      	movs	r2, #3
 80012ce:	400a      	ands	r2, r1
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	21ff      	movs	r1, #255	; 0xff
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	43d2      	mvns	r2, r2
 80012da:	401a      	ands	r2, r3
 80012dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	22ff      	movs	r2, #255	; 0xff
 80012e4:	401a      	ands	r2, r3
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	2303      	movs	r3, #3
 80012ee:	4003      	ands	r3, r0
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <__NVIC_SetPriority+0xd8>)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	001c      	movs	r4, r3
 80012fc:	230f      	movs	r3, #15
 80012fe:	4023      	ands	r3, r4
 8001300:	3b08      	subs	r3, #8
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	3306      	adds	r3, #6
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	18c3      	adds	r3, r0, r3
 800130c:	3304      	adds	r3, #4
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b003      	add	sp, #12
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	045b      	lsls	r3, r3, #17
 8001330:	429a      	cmp	r2, r3
 8001332:	d301      	bcc.n	8001338 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001334:	2301      	movs	r3, #1
 8001336:	e010      	b.n	800135a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <SysTick_Config+0x44>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	3a01      	subs	r2, #1
 800133e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001340:	2301      	movs	r3, #1
 8001342:	425b      	negs	r3, r3
 8001344:	2103      	movs	r1, #3
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff ff7c 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x44>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x44>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	210f      	movs	r1, #15
 8001374:	187b      	adds	r3, r7, r1
 8001376:	1c02      	adds	r2, r0, #0
 8001378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	187b      	adds	r3, r7, r1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ffbf 	bl	8001320 <SysTick_Config>
 80013a2:	0003      	movs	r3, r0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e147      	b.n	800164c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d100      	bne.n	80013d4 <HAL_GPIO_Init+0x28>
 80013d2:	e138      	b.n	8001646 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d00b      	beq.n	80013f4 <HAL_GPIO_Init+0x48>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	2b11      	cmp	r3, #17
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b12      	cmp	r3, #18
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	409a      	lsls	r2, r3
 8001402:	0013      	movs	r3, r2
 8001404:	43da      	mvns	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	409a      	lsls	r2, r3
 8001416:	0013      	movs	r3, r2
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	2201      	movs	r2, #1
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0xea>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b12      	cmp	r3, #18
 8001494:	d123      	bne.n	80014de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	58d3      	ldr	r3, [r2, r3]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2207      	movs	r2, #7
 80014a8:	4013      	ands	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2107      	movs	r1, #7
 80014c2:	400b      	ands	r3, r1
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	6939      	ldr	r1, [r7, #16]
 80014dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2203      	movs	r2, #3
 80014fc:	401a      	ands	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	055b      	lsls	r3, r3, #21
 800151a:	4013      	ands	r3, r2
 800151c:	d100      	bne.n	8001520 <HAL_GPIO_Init+0x174>
 800151e:	e092      	b.n	8001646 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001520:	4a50      	ldr	r2, [pc, #320]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3318      	adds	r3, #24
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	589b      	ldr	r3, [r3, r2]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2203      	movs	r2, #3
 8001532:	4013      	ands	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	220f      	movs	r2, #15
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	23a0      	movs	r3, #160	; 0xa0
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	429a      	cmp	r2, r3
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x1ca>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_GPIO_Init+0x2bc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x1c6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a44      	ldr	r2, [pc, #272]	; (800166c <HAL_GPIO_Init+0x2c0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x1c2>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a43      	ldr	r2, [pc, #268]	; (8001670 <HAL_GPIO_Init+0x2c4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x1be>
 8001566:	2303      	movs	r3, #3
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x1cc>
 800156a:	2305      	movs	r3, #5
 800156c:	e004      	b.n	8001578 <HAL_GPIO_Init+0x1cc>
 800156e:	2302      	movs	r3, #2
 8001570:	e002      	b.n	8001578 <HAL_GPIO_Init+0x1cc>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_GPIO_Init+0x1cc>
 8001576:	2300      	movs	r3, #0
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	2103      	movs	r1, #3
 800157c:	400a      	ands	r2, r1
 800157e:	00d2      	lsls	r2, r2, #3
 8001580:	4093      	lsls	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001588:	4936      	ldr	r1, [pc, #216]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	3318      	adds	r3, #24
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001596:	4a33      	ldr	r2, [pc, #204]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	58d3      	ldr	r3, [r2, r3]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	4013      	ands	r3, r2
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015bc:	4929      	ldr	r1, [pc, #164]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 80015c6:	2384      	movs	r3, #132	; 0x84
 80015c8:	58d3      	ldr	r3, [r2, r3]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ea:	491e      	ldr	r1, [pc, #120]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 80015ec:	2284      	movs	r2, #132	; 0x84
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	035b      	lsls	r3, r3, #13
 800160a:	4013      	ands	r3, r2
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43da      	mvns	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	039b      	lsls	r3, r3, #14
 8001634:	4013      	ands	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	40da      	lsrs	r2, r3
 8001654:	1e13      	subs	r3, r2, #0
 8001656:	d000      	beq.n	800165a <HAL_GPIO_Init+0x2ae>
 8001658:	e6b0      	b.n	80013bc <HAL_GPIO_Init+0x10>
  }
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b006      	add	sp, #24
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021800 	.word	0x40021800
 8001668:	50000400 	.word	0x50000400
 800166c:	50000800 	.word	0x50000800
 8001670:	50000c00 	.word	0x50000c00

08001674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e082      	b.n	800178c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2241      	movs	r2, #65	; 0x41
 800168a:	5c9b      	ldrb	r3, [r3, r2]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d107      	bne.n	80016a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	2100      	movs	r1, #0
 8001698:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0018      	movs	r0, r3
 800169e:	f7ff fc77 	bl	8000f90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2241      	movs	r2, #65	; 0x41
 80016a6:	2124      	movs	r1, #36	; 0x24
 80016a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	438a      	bics	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4934      	ldr	r1, [pc, #208]	; (8001794 <HAL_I2C_Init+0x120>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4931      	ldr	r1, [pc, #196]	; (8001798 <HAL_I2C_Init+0x124>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	0209      	lsls	r1, r1, #8
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e007      	b.n	8001702 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2184      	movs	r1, #132	; 0x84
 80016fc:	0209      	lsls	r1, r1, #8
 80016fe:	430a      	orrs	r2, r1
 8001700:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d104      	bne.n	8001714 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	491f      	ldr	r1, [pc, #124]	; (800179c <HAL_I2C_Init+0x128>)
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	491a      	ldr	r1, [pc, #104]	; (8001798 <HAL_I2C_Init+0x124>)
 8001730:	400a      	ands	r2, r1
 8001732:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	431a      	orrs	r2, r3
 800173e:	0011      	movs	r1, r2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	021a      	lsls	r2, r3, #8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69d9      	ldr	r1, [r3, #28]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1a      	ldr	r2, [r3, #32]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2241      	movs	r2, #65	; 0x41
 8001778:	2120      	movs	r1, #32
 800177a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2242      	movs	r2, #66	; 0x42
 8001786:	2100      	movs	r1, #0
 8001788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	f0ffffff 	.word	0xf0ffffff
 8001798:	ffff7fff 	.word	0xffff7fff
 800179c:	02008000 	.word	0x02008000

080017a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	0008      	movs	r0, r1
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	0019      	movs	r1, r3
 80017ae:	230a      	movs	r3, #10
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	1c02      	adds	r2, r0, #0
 80017b4:	801a      	strh	r2, [r3, #0]
 80017b6:	2308      	movs	r3, #8
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	1c0a      	adds	r2, r1, #0
 80017bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2241      	movs	r2, #65	; 0x41
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d000      	beq.n	80017cc <HAL_I2C_Master_Transmit+0x2c>
 80017ca:	e0e7      	b.n	800199c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	5c9b      	ldrb	r3, [r3, r2]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Master_Transmit+0x3a>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e0e1      	b.n	800199e <HAL_I2C_Master_Transmit+0x1fe>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	2101      	movs	r1, #1
 80017e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017e2:	f7ff fceb 	bl	80011bc <HAL_GetTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	0219      	lsls	r1, r3, #8
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2319      	movs	r3, #25
 80017f6:	2201      	movs	r2, #1
 80017f8:	f000 fa16 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0cc      	b.n	800199e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2241      	movs	r2, #65	; 0x41
 8001808:	2121      	movs	r1, #33	; 0x21
 800180a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2242      	movs	r2, #66	; 0x42
 8001810:	2110      	movs	r1, #16
 8001812:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2208      	movs	r2, #8
 8001824:	18ba      	adds	r2, r7, r2
 8001826:	8812      	ldrh	r2, [r2, #0]
 8001828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001834:	b29b      	uxth	r3, r3
 8001836:	2bff      	cmp	r3, #255	; 0xff
 8001838:	d911      	bls.n	800185e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	22ff      	movs	r2, #255	; 0xff
 800183e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001844:	b2da      	uxtb	r2, r3
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	045c      	lsls	r4, r3, #17
 800184a:	230a      	movs	r3, #10
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	8819      	ldrh	r1, [r3, #0]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_I2C_Master_Transmit+0x208>)
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	0023      	movs	r3, r4
 8001858:	f000 fb06 	bl	8001e68 <I2C_TransferConfig>
 800185c:	e075      	b.n	800194a <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	b2da      	uxtb	r2, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	049c      	lsls	r4, r3, #18
 8001872:	230a      	movs	r3, #10
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	8819      	ldrh	r1, [r3, #0]
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	4b4b      	ldr	r3, [pc, #300]	; (80019a8 <HAL_I2C_Master_Transmit+0x208>)
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	0023      	movs	r3, r4
 8001880:	f000 faf2 	bl	8001e68 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001884:	e061      	b.n	800194a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	0018      	movs	r0, r3
 800188e:	f000 fa0a 	bl	8001ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e081      	b.n	800199e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d03a      	beq.n	800194a <HAL_I2C_Master_Transmit+0x1aa>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d136      	bne.n	800194a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	0013      	movs	r3, r2
 80018e6:	2200      	movs	r2, #0
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	f000 f99d 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e053      	b.n	800199e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2bff      	cmp	r3, #255	; 0xff
 80018fe:	d911      	bls.n	8001924 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190a:	b2da      	uxtb	r2, r3
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	045c      	lsls	r4, r3, #17
 8001910:	230a      	movs	r3, #10
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	8819      	ldrh	r1, [r3, #0]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	2300      	movs	r3, #0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	0023      	movs	r3, r4
 800191e:	f000 faa3 	bl	8001e68 <I2C_TransferConfig>
 8001922:	e012      	b.n	800194a <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	b2da      	uxtb	r2, r3
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	049c      	lsls	r4, r3, #18
 8001938:	230a      	movs	r3, #10
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	8819      	ldrh	r1, [r3, #0]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	0023      	movs	r3, r4
 8001946:	f000 fa8f 	bl	8001e68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29b      	uxth	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d198      	bne.n	8001886 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0018      	movs	r0, r3
 800195c:	f000 f9e2 	bl	8001d24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001960:	1e03      	subs	r3, r0, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e01a      	b.n	800199e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <HAL_I2C_Master_Transmit+0x20c>)
 800197c:	400a      	ands	r2, r1
 800197e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2241      	movs	r2, #65	; 0x41
 8001984:	2120      	movs	r1, #32
 8001986:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2242      	movs	r2, #66	; 0x42
 800198c:	2100      	movs	r1, #0
 800198e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b007      	add	sp, #28
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	80002000 	.word	0x80002000
 80019ac:	fe00e800 	.word	0xfe00e800

080019b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	230a      	movs	r3, #10
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	1c0a      	adds	r2, r1, #0
 80019c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2241      	movs	r2, #65	; 0x41
 80019cc:	5c9b      	ldrb	r3, [r3, r2]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d000      	beq.n	80019d6 <HAL_I2C_IsDeviceReady+0x26>
 80019d4:	e0fe      	b.n	8001bd4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	401a      	ands	r2, r3
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d101      	bne.n	80019ee <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
 80019ec:	e0f3      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2240      	movs	r2, #64	; 0x40
 80019f2:	5c9b      	ldrb	r3, [r3, r2]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_I2C_IsDeviceReady+0x4c>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e0ec      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0x226>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2240      	movs	r2, #64	; 0x40
 8001a00:	2101      	movs	r1, #1
 8001a02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2241      	movs	r2, #65	; 0x41
 8001a08:	2124      	movs	r1, #36	; 0x24
 8001a0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_I2C_IsDeviceReady+0x7a>
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	059b      	lsls	r3, r3, #22
 8001a22:	0d9b      	lsrs	r3, r3, #22
 8001a24:	4a6e      	ldr	r2, [pc, #440]	; (8001be0 <HAL_I2C_IsDeviceReady+0x230>)
 8001a26:	431a      	orrs	r2, r3
 8001a28:	e007      	b.n	8001a3a <HAL_I2C_IsDeviceReady+0x8a>
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	059b      	lsls	r3, r3, #22
 8001a32:	0d9b      	lsrs	r3, r3, #22
 8001a34:	22a0      	movs	r2, #160	; 0xa0
 8001a36:	0192      	lsls	r2, r2, #6
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff fbbc 	bl	80011bc <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	4013      	ands	r3, r2
 8001a52:	3b20      	subs	r3, #32
 8001a54:	425a      	negs	r2, r3
 8001a56:	4153      	adcs	r3, r2
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	231f      	movs	r3, #31
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2210      	movs	r2, #16
 8001a68:	4013      	ands	r3, r2
 8001a6a:	3b10      	subs	r3, #16
 8001a6c:	425a      	negs	r2, r3
 8001a6e:	4153      	adcs	r3, r2
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	231e      	movs	r3, #30
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a78:	e035      	b.n	8001ae6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	d01a      	beq.n	8001ab6 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a80:	f7ff fb9c 	bl	80011bc <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d302      	bcc.n	8001a96 <HAL_I2C_IsDeviceReady+0xe6>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2241      	movs	r2, #65	; 0x41
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2240      	movs	r2, #64	; 0x40
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e08f      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2220      	movs	r2, #32
 8001abe:	4013      	ands	r3, r2
 8001ac0:	3b20      	subs	r3, #32
 8001ac2:	425a      	negs	r2, r3
 8001ac4:	4153      	adcs	r3, r2
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	231f      	movs	r3, #31
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	3b10      	subs	r3, #16
 8001ada:	425a      	negs	r2, r3
 8001adc:	4153      	adcs	r3, r2
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	231e      	movs	r3, #30
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ae6:	231f      	movs	r3, #31
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <HAL_I2C_IsDeviceReady+0x14a>
 8001af0:	231e      	movs	r3, #30
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0bf      	beq.n	8001a7a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2210      	movs	r2, #16
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d01a      	beq.n	8001b3e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	0013      	movs	r3, r2
 8001b12:	2200      	movs	r2, #0
 8001b14:	2120      	movs	r1, #32
 8001b16:	f000 f887 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e059      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2220      	movs	r2, #32
 8001b28:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2241      	movs	r2, #65	; 0x41
 8001b2e:	2120      	movs	r1, #32
 8001b30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2240      	movs	r2, #64	; 0x40
 8001b36:	2100      	movs	r1, #0
 8001b38:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e04b      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	0013      	movs	r3, r2
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	f000 f86c 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e03e      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2220      	movs	r2, #32
 8001b66:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d119      	bne.n	8001ba4 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	01c9      	lsls	r1, r1, #7
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2120      	movs	r1, #32
 8001b90:	f000 f84a 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e01c      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d900      	bls.n	8001bb4 <HAL_I2C_IsDeviceReady+0x204>
 8001bb2:	e72e      	b.n	8001a12 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2241      	movs	r2, #65	; 0x41
 8001bb8:	2120      	movs	r1, #32
 8001bba:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2240      	movs	r2, #64	; 0x40
 8001bcc:	2100      	movs	r1, #0
 8001bce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b008      	add	sp, #32
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	02002000 	.word	0x02002000

08001be4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d103      	bne.n	8001c02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d007      	beq.n	8001c20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	619a      	str	r2, [r3, #24]
  }
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c38:	e021      	b.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	d01e      	beq.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c40:	f7ff fabc 	bl	80011bc <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d302      	bcc.n	8001c56 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d113      	bne.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2241      	movs	r2, #65	; 0x41
 8001c66:	2120      	movs	r1, #32
 8001c68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2242      	movs	r2, #66	; 0x42
 8001c6e:	2100      	movs	r1, #0
 8001c70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	2100      	movs	r1, #0
 8001c78:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	4013      	ands	r3, r2
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	425a      	negs	r2, r3
 8001c8e:	4153      	adcs	r3, r2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	001a      	movs	r2, r3
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d0ce      	beq.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cb2:	e02b      	b.n	8001d0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 f86e 	bl	8001d9c <I2C_IsAcknowledgeFailed>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e029      	b.n	8001d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	d01e      	beq.n	8001d0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cce:	f7ff fa75 	bl	80011bc <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d302      	bcc.n	8001ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d113      	bne.n	8001d0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	2220      	movs	r2, #32
 8001cea:	431a      	orrs	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2241      	movs	r2, #65	; 0x41
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2242      	movs	r2, #66	; 0x42
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	2100      	movs	r1, #0
 8001d06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e007      	b.n	8001d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2202      	movs	r2, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d1cc      	bne.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b004      	add	sp, #16
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d30:	e028      	b.n	8001d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 f82f 	bl	8001d9c <I2C_IsAcknowledgeFailed>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d001      	beq.n	8001d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e026      	b.n	8001d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d46:	f7ff fa39 	bl	80011bc <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d302      	bcc.n	8001d5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d113      	bne.n	8001d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	2220      	movs	r2, #32
 8001d62:	431a      	orrs	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2241      	movs	r2, #65	; 0x41
 8001d6c:	2120      	movs	r1, #32
 8001d6e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2242      	movs	r2, #66	; 0x42
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e007      	b.n	8001d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d1cf      	bne.n	8001d32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2210      	movs	r2, #16
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d151      	bne.n	8001e5a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db6:	e021      	b.n	8001dfc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	d01e      	beq.n	8001dfc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbe:	f7ff f9fd 	bl	80011bc <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <I2C_IsAcknowledgeFailed+0x38>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d113      	bne.n	8001dfc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	2220      	movs	r2, #32
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2241      	movs	r2, #65	; 0x41
 8001de4:	2120      	movs	r1, #32
 8001de6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2242      	movs	r2, #66	; 0x42
 8001dec:	2100      	movs	r1, #0
 8001dee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	2100      	movs	r1, #0
 8001df6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e02f      	b.n	8001e5c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2220      	movs	r2, #32
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d1d6      	bne.n	8001db8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2220      	movs	r2, #32
 8001e18:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff fee1 	bl	8001be4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	490d      	ldr	r1, [pc, #52]	; (8001e64 <I2C_IsAcknowledgeFailed+0xc8>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	2204      	movs	r2, #4
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2241      	movs	r2, #65	; 0x41
 8001e42:	2120      	movs	r1, #32
 8001e44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2242      	movs	r2, #66	; 0x42
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2240      	movs	r2, #64	; 0x40
 8001e52:	2100      	movs	r1, #0
 8001e54:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b004      	add	sp, #16
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	fe00e800 	.word	0xfe00e800

08001e68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	0008      	movs	r0, r1
 8001e72:	0011      	movs	r1, r2
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	240a      	movs	r4, #10
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	1c02      	adds	r2, r0, #0
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	2009      	movs	r0, #9
 8001e80:	183b      	adds	r3, r7, r0
 8001e82:	1c0a      	adds	r2, r1, #0
 8001e84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	0d51      	lsrs	r1, r2, #21
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	00d2      	lsls	r2, r2, #3
 8001e94:	400a      	ands	r2, r1
 8001e96:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <I2C_TransferConfig+0x68>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	43d2      	mvns	r2, r2
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	193b      	adds	r3, r7, r4
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	059b      	lsls	r3, r3, #22
 8001ea6:	0d9a      	lsrs	r2, r3, #22
 8001ea8:	183b      	adds	r3, r7, r0
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	0418      	lsls	r0, r3, #16
 8001eae:	23ff      	movs	r3, #255	; 0xff
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	4003      	ands	r3, r0
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b005      	add	sp, #20
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	03ff63ff 	.word	0x03ff63ff

08001ed4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2241      	movs	r2, #65	; 0x41
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d138      	bne.n	8001f5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e032      	b.n	8001f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2240      	movs	r2, #64	; 0x40
 8001efc:	2101      	movs	r1, #1
 8001efe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2241      	movs	r2, #65	; 0x41
 8001f04:	2124      	movs	r1, #36	; 0x24
 8001f06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4911      	ldr	r1, [pc, #68]	; (8001f68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2101      	movs	r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2241      	movs	r2, #65	; 0x41
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	2100      	movs	r1, #0
 8001f56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b002      	add	sp, #8
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	ffffefff 	.word	0xffffefff

08001f6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2241      	movs	r2, #65	; 0x41
 8001f7a:	5c9b      	ldrb	r3, [r3, r2]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d139      	bne.n	8001ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2240      	movs	r2, #64	; 0x40
 8001f86:	5c9b      	ldrb	r3, [r3, r2]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e033      	b.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2240      	movs	r2, #64	; 0x40
 8001f94:	2101      	movs	r1, #1
 8001f96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2241      	movs	r2, #65	; 0x41
 8001f9c:	2124      	movs	r1, #36	; 0x24
 8001f9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	438a      	bics	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2241      	movs	r2, #65	; 0x41
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
  }
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	fffff0ff 	.word	0xfffff0ff

08002004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d11f      	bne.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	0013      	movs	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	189b      	adds	r3, r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4912      	ldr	r1, [pc, #72]	; (8002080 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002036:	0018      	movs	r0, r3
 8002038:	f7fe f862 	bl	8000100 <__udivsi3>
 800203c:	0003      	movs	r3, r0
 800203e:	3301      	adds	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002042:	e008      	b.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3b01      	subs	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e001      	b.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e009      	b.n	800206a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	401a      	ands	r2, r3
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	429a      	cmp	r2, r3
 8002066:	d0ed      	beq.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b004      	add	sp, #16
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40007000 	.word	0x40007000
 8002078:	fffff9ff 	.word	0xfffff9ff
 800207c:	20000008 	.word	0x20000008
 8002080:	000f4240 	.word	0x000f4240

08002084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e2f9      	b.n	800268a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d100      	bne.n	80020a2 <HAL_RCC_OscConfig+0x1e>
 80020a0:	e07c      	b.n	800219c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a2:	4bc3      	ldr	r3, [pc, #780]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2238      	movs	r2, #56	; 0x38
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ac:	4bc0      	ldr	r3, [pc, #768]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4013      	ands	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3e>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_OscConfig+0x44>
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	4bb9      	ldr	r3, [pc, #740]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	4013      	ands	r3, r2
 80020d2:	d062      	beq.n	800219a <HAL_RCC_OscConfig+0x116>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d15e      	bne.n	800219a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e2d4      	b.n	800268a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x78>
 80020ec:	4bb0      	ldr	r3, [pc, #704]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4baf      	ldr	r3, [pc, #700]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	0249      	lsls	r1, r1, #9
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e020      	b.n	800213e <HAL_RCC_OscConfig+0xba>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	23a0      	movs	r3, #160	; 0xa0
 8002102:	02db      	lsls	r3, r3, #11
 8002104:	429a      	cmp	r2, r3
 8002106:	d10e      	bne.n	8002126 <HAL_RCC_OscConfig+0xa2>
 8002108:	4ba9      	ldr	r3, [pc, #676]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4ba8      	ldr	r3, [pc, #672]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	02c9      	lsls	r1, r1, #11
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	4ba6      	ldr	r3, [pc, #664]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4ba5      	ldr	r3, [pc, #660]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0249      	lsls	r1, r1, #9
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0xba>
 8002126:	4ba2      	ldr	r3, [pc, #648]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4ba1      	ldr	r3, [pc, #644]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800212c:	49a1      	ldr	r1, [pc, #644]	; (80023b4 <HAL_RCC_OscConfig+0x330>)
 800212e:	400a      	ands	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	4b9f      	ldr	r3, [pc, #636]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b9e      	ldr	r3, [pc, #632]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002138:	499f      	ldr	r1, [pc, #636]	; (80023b8 <HAL_RCC_OscConfig+0x334>)
 800213a:	400a      	ands	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d014      	beq.n	8002170 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff f839 	bl	80011bc <HAL_GetTick>
 800214a:	0003      	movs	r3, r0
 800214c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff f834 	bl	80011bc <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e293      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002162:	4b93      	ldr	r3, [pc, #588]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	029b      	lsls	r3, r3, #10
 800216a:	4013      	ands	r3, r2
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0xcc>
 800216e:	e015      	b.n	800219c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff f824 	bl	80011bc <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217a:	f7ff f81f 	bl	80011bc <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e27e      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218c:	4b88      	ldr	r3, [pc, #544]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	029b      	lsls	r3, r3, #10
 8002194:	4013      	ands	r3, r2
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0xf6>
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2202      	movs	r2, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	d100      	bne.n	80021a8 <HAL_RCC_OscConfig+0x124>
 80021a6:	e099      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a8:	4b81      	ldr	r3, [pc, #516]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2238      	movs	r2, #56	; 0x38
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b2:	4b7f      	ldr	r3, [pc, #508]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2203      	movs	r2, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0x144>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d002      	beq.n	80021ce <HAL_RCC_OscConfig+0x14a>
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d135      	bne.n	800223a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ce:	4b78      	ldr	r3, [pc, #480]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4013      	ands	r3, r2
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x162>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e251      	b.n	800268a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a74      	ldr	r2, [pc, #464]	; (80023bc <HAL_RCC_OscConfig+0x338>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	4b6e      	ldr	r3, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d112      	bne.n	8002228 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002202:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6e      	ldr	r2, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x33c>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	4b67      	ldr	r3, [pc, #412]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002216:	4b66      	ldr	r3, [pc, #408]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0adb      	lsrs	r3, r3, #11
 800221c:	2207      	movs	r2, #7
 800221e:	4013      	ands	r3, r2
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_RCC_OscConfig+0x340>)
 8002222:	40da      	lsrs	r2, r3
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x344>)
 8002226:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x348>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0018      	movs	r0, r3
 800222e:	f7fe ff69 	bl	8001104 <HAL_InitTick>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d051      	beq.n	80022da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e227      	b.n	800268a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d030      	beq.n	80022a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002242:	4b5b      	ldr	r3, [pc, #364]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5e      	ldr	r2, [pc, #376]	; (80023c0 <HAL_RCC_OscConfig+0x33c>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002256:	4b56      	ldr	r3, [pc, #344]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	0049      	lsls	r1, r1, #1
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe ffaa 	bl	80011bc <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7fe ffa5 	bl	80011bc <HAL_GetTick>
 8002272:	0002      	movs	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e204      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	4b4b      	ldr	r3, [pc, #300]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4013      	ands	r3, r2
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a4a      	ldr	r2, [pc, #296]	; (80023bc <HAL_RCC_OscConfig+0x338>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	021a      	lsls	r2, r3, #8
 800229c:	4b44      	ldr	r3, [pc, #272]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e01b      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80022a4:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	4949      	ldr	r1, [pc, #292]	; (80023d0 <HAL_RCC_OscConfig+0x34c>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe ff84 	bl	80011bc <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe ff7f 	bl	80011bc <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1de      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022cc:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4013      	ands	r3, r2
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x236>
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2208      	movs	r2, #8
 80022e2:	4013      	ands	r3, r2
 80022e4:	d047      	beq.n	8002376 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022e6:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2238      	movs	r2, #56	; 0x38
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b18      	cmp	r3, #24
 80022f0:	d10a      	bne.n	8002308 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022f2:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x2f2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d138      	bne.n	8002376 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e1c0      	b.n	800268a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d019      	beq.n	8002344 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002312:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002314:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002316:	2101      	movs	r1, #1
 8002318:	430a      	orrs	r2, r1
 800231a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe ff4e 	bl	80011bc <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002326:	f7fe ff49 	bl	80011bc <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1a8      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233c:	2202      	movs	r2, #2
 800233e:	4013      	ands	r3, r2
 8002340:	d0f1      	beq.n	8002326 <HAL_RCC_OscConfig+0x2a2>
 8002342:	e018      	b.n	8002376 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002346:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800234a:	2101      	movs	r1, #1
 800234c:	438a      	bics	r2, r1
 800234e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe ff34 	bl	80011bc <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235a:	f7fe ff2f 	bl	80011bc <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e18e      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	2202      	movs	r2, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d1f1      	bne.n	800235a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2204      	movs	r2, #4
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_RCC_OscConfig+0x2fe>
 8002380:	e0c6      	b.n	8002510 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2238      	movs	r2, #56	; 0x38
 8002390:	4013      	ands	r3, r2
 8002392:	2b20      	cmp	r3, #32
 8002394:	d11e      	bne.n	80023d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d100      	bne.n	80023a2 <HAL_RCC_OscConfig+0x31e>
 80023a0:	e0b6      	b.n	8002510 <HAL_RCC_OscConfig+0x48c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d000      	beq.n	80023ac <HAL_RCC_OscConfig+0x328>
 80023aa:	e0b1      	b.n	8002510 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e16c      	b.n	800268a <HAL_RCC_OscConfig+0x606>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	fffeffff 	.word	0xfffeffff
 80023b8:	fffbffff 	.word	0xfffbffff
 80023bc:	ffff80ff 	.word	0xffff80ff
 80023c0:	ffffc7ff 	.word	0xffffc7ff
 80023c4:	00f42400 	.word	0x00f42400
 80023c8:	20000008 	.word	0x20000008
 80023cc:	2000000c 	.word	0x2000000c
 80023d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d4:	4baf      	ldr	r3, [pc, #700]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80023d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	4013      	ands	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_OscConfig+0x360>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x362>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d011      	beq.n	800240e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4baa      	ldr	r3, [pc, #680]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80023ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ee:	4ba9      	ldr	r3, [pc, #676]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	0549      	lsls	r1, r1, #21
 80023f4:	430a      	orrs	r2, r1
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023f8:	4ba6      	ldr	r3, [pc, #664]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80023fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002406:	231f      	movs	r3, #31
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240e:	4ba2      	ldr	r3, [pc, #648]	; (8002698 <HAL_RCC_OscConfig+0x614>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4013      	ands	r3, r2
 8002418:	d11a      	bne.n	8002450 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241a:	4b9f      	ldr	r3, [pc, #636]	; (8002698 <HAL_RCC_OscConfig+0x614>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b9e      	ldr	r3, [pc, #632]	; (8002698 <HAL_RCC_OscConfig+0x614>)
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	0049      	lsls	r1, r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002428:	f7fe fec8 	bl	80011bc <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe fec3 	bl	80011bc <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e122      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002444:	4b94      	ldr	r3, [pc, #592]	; (8002698 <HAL_RCC_OscConfig+0x614>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4013      	ands	r3, r2
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x3e2>
 8002458:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800245a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800245c:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800245e:	2101      	movs	r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x41c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x404>
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002470:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002472:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002474:	2104      	movs	r1, #4
 8002476:	430a      	orrs	r2, r1
 8002478:	65da      	str	r2, [r3, #92]	; 0x5c
 800247a:	4b86      	ldr	r3, [pc, #536]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800247c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800247e:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002480:	2101      	movs	r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	65da      	str	r2, [r3, #92]	; 0x5c
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x41c>
 8002488:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800248a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800248c:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	65da      	str	r2, [r3, #92]	; 0x5c
 8002494:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800249a:	2104      	movs	r1, #4
 800249c:	438a      	bics	r2, r1
 800249e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d014      	beq.n	80024d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fe88 	bl	80011bc <HAL_GetTick>
 80024ac:	0003      	movs	r3, r0
 80024ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b0:	e009      	b.n	80024c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fe83 	bl	80011bc <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	4a77      	ldr	r2, [pc, #476]	; (800269c <HAL_RCC_OscConfig+0x618>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0e1      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	4b73      	ldr	r3, [pc, #460]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x42e>
 80024d0:	e013      	b.n	80024fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe fe73 	bl	80011bc <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024da:	e009      	b.n	80024f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fe6e 	bl	80011bc <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	4a6d      	ldr	r2, [pc, #436]	; (800269c <HAL_RCC_OscConfig+0x618>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0cc      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2202      	movs	r2, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024fa:	231f      	movs	r3, #31
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002508:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800250a:	4965      	ldr	r1, [pc, #404]	; (80026a0 <HAL_RCC_OscConfig+0x61c>)
 800250c:	400a      	ands	r2, r1
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <HAL_RCC_OscConfig+0x496>
 8002518:	e0b6      	b.n	8002688 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251a:	4b5e      	ldr	r3, [pc, #376]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2238      	movs	r2, #56	; 0x38
 8002520:	4013      	ands	r3, r2
 8002522:	2b10      	cmp	r3, #16
 8002524:	d100      	bne.n	8002528 <HAL_RCC_OscConfig+0x4a4>
 8002526:	e07e      	b.n	8002626 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d153      	bne.n	80025d8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b57      	ldr	r3, [pc, #348]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002536:	495b      	ldr	r1, [pc, #364]	; (80026a4 <HAL_RCC_OscConfig+0x620>)
 8002538:	400a      	ands	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fe3e 	bl	80011bc <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe fe39 	bl	80011bc <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e098      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	4b4e      	ldr	r3, [pc, #312]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	049b      	lsls	r3, r3, #18
 8002560:	4013      	ands	r3, r2
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_RCC_OscConfig+0x624>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	431a      	orrs	r2, r3
 800258c:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002592:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	0449      	lsls	r1, r1, #17
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80025a0:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025a6:	2180      	movs	r1, #128	; 0x80
 80025a8:	0549      	lsls	r1, r1, #21
 80025aa:	430a      	orrs	r2, r1
 80025ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fe05 	bl	80011bc <HAL_GetTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fe00 	bl	80011bc <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e05f      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	049b      	lsls	r3, r3, #18
 80025d2:	4013      	ands	r3, r2
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x534>
 80025d6:	e057      	b.n	8002688 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d8:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025de:	4931      	ldr	r1, [pc, #196]	; (80026a4 <HAL_RCC_OscConfig+0x620>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025ea:	2103      	movs	r1, #3
 80025ec:	438a      	bics	r2, r1
 80025ee:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 80025f6:	492d      	ldr	r1, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x628>)
 80025f8:	400a      	ands	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fdde 	bl	80011bc <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fdd9 	bl	80011bc <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e038      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	049b      	lsls	r3, r3, #18
 8002620:	4013      	ands	r3, r2
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x582>
 8002624:	e030      	b.n	8002688 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e02b      	b.n	800268a <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCC_OscConfig+0x610>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2203      	movs	r2, #3
 800263c:	401a      	ands	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	429a      	cmp	r2, r3
 8002644:	d11e      	bne.n	8002684 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2270      	movs	r2, #112	; 0x70
 800264a:	401a      	ands	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d117      	bne.n	8002684 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	23fe      	movs	r3, #254	; 0xfe
 8002658:	01db      	lsls	r3, r3, #7
 800265a:	401a      	ands	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d10e      	bne.n	8002684 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	23f8      	movs	r3, #248	; 0xf8
 800266a:	039b      	lsls	r3, r3, #14
 800266c:	401a      	ands	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	0f5b      	lsrs	r3, r3, #29
 800267a:	075a      	lsls	r2, r3, #29
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b008      	add	sp, #32
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	40007000 	.word	0x40007000
 800269c:	00001388 	.word	0x00001388
 80026a0:	efffffff 	.word	0xefffffff
 80026a4:	feffffff 	.word	0xfeffffff
 80026a8:	1fc1808c 	.word	0x1fc1808c
 80026ac:	effeffff 	.word	0xeffeffff

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0e9      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2207      	movs	r2, #7
 80026ca:	4013      	ands	r3, r2
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d91e      	bls.n	8002710 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2207      	movs	r2, #7
 80026d8:	4393      	bics	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026e4:	f7fe fd6a 	bl	80011bc <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ec:	e009      	b.n	8002702 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ee:	f7fe fd65 	bl	80011bc <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	4a6a      	ldr	r2, [pc, #424]	; (80028a4 <HAL_RCC_ClockConfig+0x1f4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0ca      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2207      	movs	r2, #7
 8002708:	4013      	ands	r3, r2
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d1ee      	bne.n	80026ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	d015      	beq.n	8002746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2204      	movs	r2, #4
 8002720:	4013      	ands	r3, r2
 8002722:	d006      	beq.n	8002732 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002724:	4b60      	ldr	r3, [pc, #384]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 800272a:	21e0      	movs	r1, #224	; 0xe0
 800272c:	01c9      	lsls	r1, r1, #7
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002732:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4a5d      	ldr	r2, [pc, #372]	; (80028ac <HAL_RCC_ClockConfig+0x1fc>)
 8002738:	4013      	ands	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d057      	beq.n	8002800 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	029b      	lsls	r3, r3, #10
 8002760:	4013      	ands	r3, r2
 8002762:	d12b      	bne.n	80027bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e097      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d107      	bne.n	8002780 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002770:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	049b      	lsls	r3, r3, #18
 8002778:	4013      	ands	r3, r2
 800277a:	d11f      	bne.n	80027bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e08b      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002788:	4b47      	ldr	r3, [pc, #284]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4013      	ands	r3, r2
 8002792:	d113      	bne.n	80027bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e07f      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d106      	bne.n	80027ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 80027a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a4:	2202      	movs	r2, #2
 80027a6:	4013      	ands	r3, r2
 80027a8:	d108      	bne.n	80027bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e074      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ae:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e06d      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2207      	movs	r2, #7
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d0:	f7fe fcf4 	bl	80011bc <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d8:	e009      	b.n	80027ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027da:	f7fe fcef 	bl	80011bc <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	4a2f      	ldr	r2, [pc, #188]	; (80028a4 <HAL_RCC_ClockConfig+0x1f4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e054      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2238      	movs	r2, #56	; 0x38
 80027f4:	401a      	ands	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1ec      	bne.n	80027da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2207      	movs	r2, #7
 8002806:	4013      	ands	r3, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d21e      	bcs.n	800284c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2207      	movs	r2, #7
 8002814:	4393      	bics	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002820:	f7fe fccc 	bl	80011bc <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002828:	e009      	b.n	800283e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282a:	f7fe fcc7 	bl	80011bc <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e02c      	b.n	8002898 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2207      	movs	r2, #7
 8002844:	4013      	ands	r3, r2
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d1ee      	bne.n	800282a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2204      	movs	r2, #4
 8002852:	4013      	ands	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_RCC_ClockConfig+0x200>)
 800285c:	4013      	ands	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002866:	430a      	orrs	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800286a:	f000 f829 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 800286e:	0001      	movs	r1, r0
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	220f      	movs	r2, #15
 8002878:	401a      	ands	r2, r3
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_RCC_ClockConfig+0x204>)
 800287c:	0092      	lsls	r2, r2, #2
 800287e:	58d3      	ldr	r3, [r2, r3]
 8002880:	221f      	movs	r2, #31
 8002882:	4013      	ands	r3, r2
 8002884:	000a      	movs	r2, r1
 8002886:	40da      	lsrs	r2, r3
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_ClockConfig+0x208>)
 800288a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_ClockConfig+0x20c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0018      	movs	r0, r3
 8002892:	f7fe fc37 	bl	8001104 <HAL_InitTick>
 8002896:	0003      	movs	r3, r0
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b004      	add	sp, #16
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40022000 	.word	0x40022000
 80028a4:	00001388 	.word	0x00001388
 80028a8:	40021000 	.word	0x40021000
 80028ac:	fffff0ff 	.word	0xfffff0ff
 80028b0:	ffff8fff 	.word	0xffff8fff
 80028b4:	0800660c 	.word	0x0800660c
 80028b8:	20000008 	.word	0x20000008
 80028bc:	2000000c 	.word	0x2000000c

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c6:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2238      	movs	r2, #56	; 0x38
 80028cc:	4013      	ands	r3, r2
 80028ce:	d10f      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80028d0:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0adb      	lsrs	r3, r3, #11
 80028d6:	2207      	movs	r2, #7
 80028d8:	4013      	ands	r3, r2
 80028da:	2201      	movs	r2, #1
 80028dc:	409a      	lsls	r2, r3
 80028de:	0013      	movs	r3, r2
 80028e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	4835      	ldr	r0, [pc, #212]	; (80029bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80028e6:	f7fd fc0b 	bl	8000100 <__udivsi3>
 80028ea:	0003      	movs	r3, r0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e05d      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f0:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2238      	movs	r2, #56	; 0x38
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d102      	bne.n	8002902 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028fc:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	e054      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002902:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2238      	movs	r2, #56	; 0x38
 8002908:	4013      	ands	r3, r2
 800290a:	2b10      	cmp	r3, #16
 800290c:	d138      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2203      	movs	r2, #3
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	2207      	movs	r2, #7
 8002920:	4013      	ands	r3, r2
 8002922:	3301      	adds	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d10d      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	4824      	ldr	r0, [pc, #144]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002930:	f7fd fbe6 	bl	8000100 <__udivsi3>
 8002934:	0003      	movs	r3, r0
 8002936:	0019      	movs	r1, r3
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	227f      	movs	r2, #127	; 0x7f
 8002940:	4013      	ands	r3, r2
 8002942:	434b      	muls	r3, r1
 8002944:	617b      	str	r3, [r7, #20]
        break;
 8002946:	e00d      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	481c      	ldr	r0, [pc, #112]	; (80029bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800294c:	f7fd fbd8 	bl	8000100 <__udivsi3>
 8002950:	0003      	movs	r3, r0
 8002952:	0019      	movs	r1, r3
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	227f      	movs	r2, #127	; 0x7f
 800295c:	4013      	ands	r3, r2
 800295e:	434b      	muls	r3, r1
 8002960:	617b      	str	r3, [r7, #20]
        break;
 8002962:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0f5b      	lsrs	r3, r3, #29
 800296a:	2207      	movs	r2, #7
 800296c:	4013      	ands	r3, r2
 800296e:	3301      	adds	r3, #1
 8002970:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	6978      	ldr	r0, [r7, #20]
 8002976:	f7fd fbc3 	bl	8000100 <__udivsi3>
 800297a:	0003      	movs	r3, r0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	e015      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2238      	movs	r2, #56	; 0x38
 8002986:	4013      	ands	r3, r2
 8002988:	2b20      	cmp	r3, #32
 800298a:	d103      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2238      	movs	r2, #56	; 0x38
 800299a:	4013      	ands	r3, r2
 800299c:	2b18      	cmp	r3, #24
 800299e:	d103      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029a0:	23fa      	movs	r3, #250	; 0xfa
 80029a2:	01db      	lsls	r3, r3, #7
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	e001      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029ac:	693b      	ldr	r3, [r7, #16]
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b006      	add	sp, #24
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	007a1200 	.word	0x007a1200

080029c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029cc:	2313      	movs	r3, #19
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d4:	2312      	movs	r3, #18
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	029b      	lsls	r3, r3, #10
 80029e4:	4013      	ands	r3, r2
 80029e6:	d100      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80029e8:	e0a3      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2011      	movs	r0, #17
 80029ec:	183b      	adds	r3, r7, r0
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f2:	4b86      	ldr	r3, [pc, #536]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	055b      	lsls	r3, r3, #21
 80029fa:	4013      	ands	r3, r2
 80029fc:	d110      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a02:	4b82      	ldr	r3, [pc, #520]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0549      	lsls	r1, r1, #21
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a0c:	4b7f      	ldr	r3, [pc, #508]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	055b      	lsls	r3, r3, #21
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1a:	183b      	adds	r3, r7, r0
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a26:	2180      	movs	r1, #128	; 0x80
 8002a28:	0049      	lsls	r1, r1, #1
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a2e:	f7fe fbc5 	bl	80011bc <HAL_GetTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a36:	e00b      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fe fbc0 	bl	80011bc <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d904      	bls.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a46:	2313      	movs	r3, #19
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	701a      	strb	r2, [r3, #0]
        break;
 8002a4e:	e005      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a50:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d0ed      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a5c:	2313      	movs	r3, #19
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d154      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a66:	4b69      	ldr	r3, [pc, #420]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a6a:	23c0      	movs	r3, #192	; 0xc0
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d019      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d014      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a82:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a8c:	4b5f      	ldr	r3, [pc, #380]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a90:	4b5e      	ldr	r3, [pc, #376]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a92:	2180      	movs	r1, #128	; 0x80
 8002a94:	0249      	lsls	r1, r1, #9
 8002a96:	430a      	orrs	r2, r1
 8002a98:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a9e:	4b5b      	ldr	r3, [pc, #364]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aa0:	495d      	ldr	r1, [pc, #372]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aa6:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d016      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fb82 	bl	80011bc <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abc:	e00c      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe fb7d 	bl	80011bc <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	4a54      	ldr	r2, [pc, #336]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d904      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ace:	2313      	movs	r3, #19
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	701a      	strb	r2, [r3, #0]
            break;
 8002ad6:	e004      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad8:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d0ed      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ae2:	2313      	movs	r3, #19
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	4b44      	ldr	r3, [pc, #272]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b00:	e00c      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b02:	2312      	movs	r3, #18
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	2213      	movs	r2, #19
 8002b08:	18ba      	adds	r2, r7, r2
 8002b0a:	7812      	ldrb	r2, [r2, #0]
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e005      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	2312      	movs	r3, #18
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2213      	movs	r2, #19
 8002b16:	18ba      	adds	r2, r7, r2
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b1c:	2311      	movs	r3, #17
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d105      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b2c:	493c      	ldr	r1, [pc, #240]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b3c:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	2203      	movs	r2, #3
 8002b42:	4393      	bics	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2202      	movs	r2, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	220c      	movs	r2, #12
 8002b60:	4393      	bics	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	4013      	ands	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	01db      	lsls	r3, r3, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	d015      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	0899      	lsrs	r1, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	05db      	lsls	r3, r3, #23
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	0249      	lsls	r1, r1, #9
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d016      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	01db      	lsls	r3, r3, #7
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d106      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	0249      	lsls	r1, r1, #9
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002bfe:	2312      	movs	r3, #18
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40007000 	.word	0x40007000
 8002c14:	fffffcff 	.word	0xfffffcff
 8002c18:	fffeffff 	.word	0xfffeffff
 8002c1c:	00001388 	.word	0x00001388
 8002c20:	efffffff 	.word	0xefffffff
 8002c24:	ffffcfff 	.word	0xffffcfff
 8002c28:	ffff3fff 	.word	0xffff3fff

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	2600      	movs	r6, #0
 8002c30:	4d0c      	ldr	r5, [pc, #48]	; (8002c64 <__libc_init_array+0x38>)
 8002c32:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c34:	1b64      	subs	r4, r4, r5
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	42a6      	cmp	r6, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	2600      	movs	r6, #0
 8002c3e:	f000 f821 	bl	8002c84 <_init>
 8002c42:	4d0a      	ldr	r5, [pc, #40]	; (8002c6c <__libc_init_array+0x40>)
 8002c44:	4c0a      	ldr	r4, [pc, #40]	; (8002c70 <__libc_init_array+0x44>)
 8002c46:	1b64      	subs	r4, r4, r5
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	42a6      	cmp	r6, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	00b3      	lsls	r3, r6, #2
 8002c52:	58eb      	ldr	r3, [r5, r3]
 8002c54:	4798      	blx	r3
 8002c56:	3601      	adds	r6, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	00b3      	lsls	r3, r6, #2
 8002c5c:	58eb      	ldr	r3, [r5, r3]
 8002c5e:	4798      	blx	r3
 8002c60:	3601      	adds	r6, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	0800664c 	.word	0x0800664c
 8002c68:	0800664c 	.word	0x0800664c
 8002c6c:	0800664c 	.word	0x0800664c
 8002c70:	08006650 	.word	0x08006650

08002c74 <memset>:
 8002c74:	0003      	movs	r3, r0
 8002c76:	1882      	adds	r2, r0, r2
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	7019      	strb	r1, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <_init>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr

08002c90 <_fini>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr
