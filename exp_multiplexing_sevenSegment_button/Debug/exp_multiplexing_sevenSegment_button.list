
exp_multiplexing_sevenSegment_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e44  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004140  08004140  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004140  08004140  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004140  08004140  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000001c  08004164  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004164  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111e3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002231  00000000  00000000  00031227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  000342f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ec8  00000000  00000000  000350c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bc9  00000000  00000000  00049f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c69  00000000  00000000  0005ab51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e17ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034fc  00000000  00000000  000e180c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000001c 	.word	0x2000001c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003ee4 	.word	0x08003ee4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000020 	.word	0x20000020
 80000fc:	08003ee4 	.word	0x08003ee4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <intervalSwitching>:
 *		switchDelay		a struct that holds switching variables
 *		debounceDelay	time to delay
 *	@retval None
***/
void intervalSwitching(switching_delay_t *switchDelay, uint32_t debounceDelay)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if(HAL_GetTick() - switchDelay->lastTime > debounceDelay){
 8000222:	f001 f9ad 	bl	8001580 <HAL_GetTick>
 8000226:	0002      	movs	r2, r0
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	1ad3      	subs	r3, r2, r3
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	429a      	cmp	r2, r3
 8000232:	d212      	bcs.n	800025a <intervalSwitching+0x42>
		switchDelay->lastTime = HAL_GetTick();
 8000234:	f001 f9a4 	bl	8001580 <HAL_GetTick>
 8000238:	0002      	movs	r2, r0
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	601a      	str	r2, [r3, #0]
		switchDelay->_state = !switchDelay->_state;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	1e5a      	subs	r2, r3, #1
 8000244:	4193      	sbcs	r3, r2
 8000246:	b2db      	uxtb	r3, r3
 8000248:	2201      	movs	r2, #1
 800024a:	4053      	eors	r3, r2
 800024c:	b2db      	uxtb	r3, r3
 800024e:	1c1a      	adds	r2, r3, #0
 8000250:	2301      	movs	r3, #1
 8000252:	4013      	ands	r3, r2
 8000254:	b2da      	uxtb	r2, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	711a      	strb	r2, [r3, #4]
	}
}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	46bd      	mov	sp, r7
 800025e:	b002      	add	sp, #8
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <enableDisplay>:

void enableDisplay(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
	// Turn off switch selector
	COM_SW_OFF;
 800026a:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <enableDisplay+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	2102      	movs	r1, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f001 fcba 	bl	8001bea <HAL_GPIO_WritePin>

	// Initialize the Seven Segment pins as the Output Pin
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f003 fe27 	bl	8003ed2 <memset>
	/*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_DOT_Pin */
	GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DOT_Pin;
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0112      	lsls	r2, r2, #4
 800028a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2201      	movs	r2, #1
 8000290:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029e:	1d3a      	adds	r2, r7, #4
 80002a0:	23a0      	movs	r3, #160	; 0xa0
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	0011      	movs	r1, r2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 fb1e 	bl	80018e8 <HAL_GPIO_Init>
}
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b006      	add	sp, #24
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	50000400 	.word	0x50000400

080002b8 <enableButton>:

void enableButton(button_t *inputBT)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b089      	sub	sp, #36	; 0x24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	// Turn off Display COMs
	blankDisplay();
 80002c0:	f000 fd8e 	bl	8000de0 <blankDisplay>

	// Initialize the Seven Segment pins as the Input Pin
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c4:	2408      	movs	r4, #8
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	0018      	movs	r0, r3
 80002ca:	2314      	movs	r3, #20
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f003 fdff 	bl	8003ed2 <memset>
	/*Configure GPIO pins : SW_COM_Pin sw_schedule_cook_Pin sw_white_rice_Pin sw_red_rice_Pin */
	GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DOT_Pin;
 80002d4:	0021      	movs	r1, r4
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	22ff      	movs	r2, #255	; 0xff
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ea:	187a      	adds	r2, r7, r1
 80002ec:	23a0      	movs	r3, #160	; 0xa0
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	0011      	movs	r1, r2
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 faf8 	bl	80018e8 <HAL_GPIO_Init>
	COM_SW_ON;
 80002f8:	4b87      	ldr	r3, [pc, #540]	; (8000518 <enableButton+0x260>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	2102      	movs	r1, #2
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 fc73 	bl	8001bea <HAL_GPIO_WritePin>

	// Read Button State
	inputBT[0].readState	= HAL_GPIO_ReadPin(SEG_A_GPIO_Port, SEG_A_Pin);
 8000304:	23a0      	movs	r3, #160	; 0xa0
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	2110      	movs	r1, #16
 800030a:	0018      	movs	r0, r3
 800030c:	f001 fc50 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000310:	0003      	movs	r3, r0
 8000312:	001a      	movs	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	701a      	strb	r2, [r3, #0]
	inputBT[1].readState	= HAL_GPIO_ReadPin(SEG_B_GPIO_Port, SEG_B_Pin);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3308      	adds	r3, #8
 800031c:	001c      	movs	r4, r3
 800031e:	23a0      	movs	r3, #160	; 0xa0
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	2120      	movs	r1, #32
 8000324:	0018      	movs	r0, r3
 8000326:	f001 fc43 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800032a:	0003      	movs	r3, r0
 800032c:	7023      	strb	r3, [r4, #0]
	inputBT[2].readState 	= HAL_GPIO_ReadPin(SEG_C_GPIO_Port, SEG_C_Pin);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3310      	adds	r3, #16
 8000332:	001c      	movs	r4, r3
 8000334:	23a0      	movs	r3, #160	; 0xa0
 8000336:	05db      	lsls	r3, r3, #23
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	0018      	movs	r0, r3
 800033c:	f001 fc38 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000340:	0003      	movs	r3, r0
 8000342:	7023      	strb	r3, [r4, #0]
	inputBT[3].readState	= HAL_GPIO_ReadPin(SEG_D_GPIO_Port, SEG_D_Pin);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3318      	adds	r3, #24
 8000348:	001c      	movs	r4, r3
 800034a:	23a0      	movs	r3, #160	; 0xa0
 800034c:	05db      	lsls	r3, r3, #23
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fc2d 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000356:	0003      	movs	r3, r0
 8000358:	7023      	strb	r3, [r4, #0]
	inputBT[4].readState 	= HAL_GPIO_ReadPin(SEG_E_GPIO_Port, SEG_E_Pin);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3320      	adds	r3, #32
 800035e:	001c      	movs	r4, r3
 8000360:	2380      	movs	r3, #128	; 0x80
 8000362:	005a      	lsls	r2, r3, #1
 8000364:	23a0      	movs	r3, #160	; 0xa0
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	0011      	movs	r1, r2
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fc20 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000370:	0003      	movs	r3, r0
 8000372:	7023      	strb	r3, [r4, #0]
	inputBT[5].readState 	= HAL_GPIO_ReadPin(SEG_F_GPIO_Port, SEG_F_Pin);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3328      	adds	r3, #40	; 0x28
 8000378:	001c      	movs	r4, r3
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	009a      	lsls	r2, r3, #2
 800037e:	23a0      	movs	r3, #160	; 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	0011      	movs	r1, r2
 8000384:	0018      	movs	r0, r3
 8000386:	f001 fc13 	bl	8001bb0 <HAL_GPIO_ReadPin>
 800038a:	0003      	movs	r3, r0
 800038c:	7023      	strb	r3, [r4, #0]

	// Read button state
	controlButtonState(&inputBT[0], BUTTON_DEBOUNCE_DELAY, &buttonState.startWarming);
 800038e:	4a63      	ldr	r2, [pc, #396]	; (800051c <enableButton+0x264>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2114      	movs	r1, #20
 8000394:	0018      	movs	r0, r3
 8000396:	f000 f8d1 	bl	800053c <controlButtonState>
	controlButtonState(&inputBT[1], BUTTON_DEBOUNCE_DELAY, &buttonState.startCooking);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3308      	adds	r3, #8
 800039e:	4a60      	ldr	r2, [pc, #384]	; (8000520 <enableButton+0x268>)
 80003a0:	2114      	movs	r1, #20
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 f8ca 	bl	800053c <controlButtonState>
	controlButtonState(&inputBT[2], BUTTON_DEBOUNCE_DELAY, &buttonState.enableChangeTime);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3310      	adds	r3, #16
 80003ac:	4a5d      	ldr	r2, [pc, #372]	; (8000524 <enableButton+0x26c>)
 80003ae:	2114      	movs	r1, #20
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 f8c3 	bl	800053c <controlButtonState>
	controlButtonState(&inputBT[3], BUTTON_DEBOUNCE_DELAY, &buttonState.selectMenu);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	3318      	adds	r3, #24
 80003ba:	4a5b      	ldr	r2, [pc, #364]	; (8000528 <enableButton+0x270>)
 80003bc:	2114      	movs	r1, #20
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 f8bc 	bl	800053c <controlButtonState>
	controlButtonState(&inputBT[4], BUTTON_DEBOUNCE_DELAY, &buttonState.incrementHour);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3320      	adds	r3, #32
 80003c8:	4a58      	ldr	r2, [pc, #352]	; (800052c <enableButton+0x274>)
 80003ca:	2114      	movs	r1, #20
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 f8b5 	bl	800053c <controlButtonState>
	controlButtonState(&inputBT[5], BUTTON_DEBOUNCE_DELAY, &buttonState.incrementMinute);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3328      	adds	r3, #40	; 0x28
 80003d6:	4a56      	ldr	r2, [pc, #344]	; (8000530 <enableButton+0x278>)
 80003d8:	2114      	movs	r1, #20
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 f8ae 	bl	800053c <controlButtonState>

	// Control System State
	if(buttonState.enableChangeTime){
 80003e0:	4b4f      	ldr	r3, [pc, #316]	; (8000520 <enableButton+0x268>)
 80003e2:	78db      	ldrb	r3, [r3, #3]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d011      	beq.n	800040c <enableButton+0x154>
		systemState.isChangeTime = !systemState.isChangeTime;
 80003e8:	4b52      	ldr	r3, [pc, #328]	; (8000534 <enableButton+0x27c>)
 80003ea:	789b      	ldrb	r3, [r3, #2]
 80003ec:	1e5a      	subs	r2, r3, #1
 80003ee:	4193      	sbcs	r3, r2
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2201      	movs	r2, #1
 80003f4:	4053      	eors	r3, r2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	1c1a      	adds	r2, r3, #0
 80003fa:	2301      	movs	r3, #1
 80003fc:	4013      	ands	r3, r2
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b4c      	ldr	r3, [pc, #304]	; (8000534 <enableButton+0x27c>)
 8000402:	709a      	strb	r2, [r3, #2]
		buttonState.enableChangeTime = false;
 8000404:	4b46      	ldr	r3, [pc, #280]	; (8000520 <enableButton+0x268>)
 8000406:	2200      	movs	r2, #0
 8000408:	70da      	strb	r2, [r3, #3]
 800040a:	e03d      	b.n	8000488 <enableButton+0x1d0>
	}
	// Start Cooking mode State
	else if(buttonState.startCooking){
 800040c:	4b44      	ldr	r3, [pc, #272]	; (8000520 <enableButton+0x268>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d009      	beq.n	8000428 <enableButton+0x170>
		systemState.isCooking			= true;
 8000414:	4b47      	ldr	r3, [pc, #284]	; (8000534 <enableButton+0x27c>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
		systemState.isWarming			= false;
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <enableButton+0x27c>)
 800041c:	2200      	movs	r2, #0
 800041e:	705a      	strb	r2, [r3, #1]
		buttonState.startCooking		= false;
 8000420:	4b3f      	ldr	r3, [pc, #252]	; (8000520 <enableButton+0x268>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
 8000426:	e02f      	b.n	8000488 <enableButton+0x1d0>
	}
	// Start Cooking mode State
	else if(buttonState.startWarming){
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <enableButton+0x268>)
 800042a:	785b      	ldrb	r3, [r3, #1]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d016      	beq.n	800045e <enableButton+0x1a6>
		if(systemState.isCooking){
 8000430:	4b40      	ldr	r3, [pc, #256]	; (8000534 <enableButton+0x27c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d003      	beq.n	8000440 <enableButton+0x188>
			systemState.isCooking = false;
 8000438:	4b3e      	ldr	r3, [pc, #248]	; (8000534 <enableButton+0x27c>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
 800043e:	e00a      	b.n	8000456 <enableButton+0x19e>
		}
		else if(systemState.isWarming){
 8000440:	4b3c      	ldr	r3, [pc, #240]	; (8000534 <enableButton+0x27c>)
 8000442:	785b      	ldrb	r3, [r3, #1]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d003      	beq.n	8000450 <enableButton+0x198>
			systemState.isWarming = false;
 8000448:	4b3a      	ldr	r3, [pc, #232]	; (8000534 <enableButton+0x27c>)
 800044a:	2200      	movs	r2, #0
 800044c:	705a      	strb	r2, [r3, #1]
 800044e:	e002      	b.n	8000456 <enableButton+0x19e>
		}
		else{
			systemState.isWarming = true;
 8000450:	4b38      	ldr	r3, [pc, #224]	; (8000534 <enableButton+0x27c>)
 8000452:	2201      	movs	r2, #1
 8000454:	705a      	strb	r2, [r3, #1]
		}
		buttonState.startWarming		= false;
 8000456:	4b32      	ldr	r3, [pc, #200]	; (8000520 <enableButton+0x268>)
 8000458:	2200      	movs	r2, #0
 800045a:	705a      	strb	r2, [r3, #1]
 800045c:	e014      	b.n	8000488 <enableButton+0x1d0>
	}
	// Change menus
	else if(buttonState.selectMenu){
 800045e:	4b30      	ldr	r3, [pc, #192]	; (8000520 <enableButton+0x268>)
 8000460:	789b      	ldrb	r3, [r3, #2]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d010      	beq.n	8000488 <enableButton+0x1d0>
		if(systemState.currentMenu < 9){
 8000466:	4b33      	ldr	r3, [pc, #204]	; (8000534 <enableButton+0x27c>)
 8000468:	78db      	ldrb	r3, [r3, #3]
 800046a:	2b08      	cmp	r3, #8
 800046c:	d806      	bhi.n	800047c <enableButton+0x1c4>
			systemState.currentMenu += 1;
 800046e:	4b31      	ldr	r3, [pc, #196]	; (8000534 <enableButton+0x27c>)
 8000470:	78db      	ldrb	r3, [r3, #3]
 8000472:	3301      	adds	r3, #1
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4b2f      	ldr	r3, [pc, #188]	; (8000534 <enableButton+0x27c>)
 8000478:	70da      	strb	r2, [r3, #3]
 800047a:	e002      	b.n	8000482 <enableButton+0x1ca>
		}
		else{
			systemState.currentMenu = 0;
 800047c:	4b2d      	ldr	r3, [pc, #180]	; (8000534 <enableButton+0x27c>)
 800047e:	2200      	movs	r2, #0
 8000480:	70da      	strb	r2, [r3, #3]
		}
		buttonState.selectMenu = false;
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <enableButton+0x268>)
 8000484:	2200      	movs	r2, #0
 8000486:	709a      	strb	r2, [r3, #2]
	}

	// Adjust Preset Timer for Adjustable Mode Only
	if(systemState.isChangeTime){
 8000488:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <enableButton+0x27c>)
 800048a:	789b      	ldrb	r3, [r3, #2]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d021      	beq.n	80004d4 <enableButton+0x21c>
		systemState.isCooking 	= false;
 8000490:	4b28      	ldr	r3, [pc, #160]	; (8000534 <enableButton+0x27c>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
		systemState.isWarming 	= false;
 8000496:	4b27      	ldr	r3, [pc, #156]	; (8000534 <enableButton+0x27c>)
 8000498:	2200      	movs	r2, #0
 800049a:	705a      	strb	r2, [r3, #1]

		if(buttonState.incrementHour){
 800049c:	4b20      	ldr	r3, [pc, #128]	; (8000520 <enableButton+0x268>)
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d009      	beq.n	80004b8 <enableButton+0x200>
			systemTimer.newCookingTimer		+= 3600;
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <enableButton+0x280>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	22e1      	movs	r2, #225	; 0xe1
 80004aa:	0112      	lsls	r2, r2, #4
 80004ac:	189a      	adds	r2, r3, r2
 80004ae:	4b22      	ldr	r3, [pc, #136]	; (8000538 <enableButton+0x280>)
 80004b0:	605a      	str	r2, [r3, #4]
			buttonState.incrementHour 		= false;
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <enableButton+0x268>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	711a      	strb	r2, [r3, #4]
		}

		if(buttonState.incrementMinute){
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <enableButton+0x268>)
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d009      	beq.n	80004d4 <enableButton+0x21c>
			systemTimer.newCookingTimer		+= 300;
 80004c0:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <enableButton+0x280>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	332d      	adds	r3, #45	; 0x2d
 80004c6:	33ff      	adds	r3, #255	; 0xff
 80004c8:	001a      	movs	r2, r3
 80004ca:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <enableButton+0x280>)
 80004cc:	605a      	str	r2, [r3, #4]
			buttonState.incrementMinute 	= false;
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <enableButton+0x268>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	715a      	strb	r2, [r3, #5]
		}
	}

	for(uint8_t i=0; i<6; i++){
 80004d4:	231f      	movs	r3, #31
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e011      	b.n	8000502 <enableButton+0x24a>
		inputBT[i].lastState = inputBT[i].readState;
 80004de:	201f      	movs	r0, #31
 80004e0:	183b      	adds	r3, r7, r0
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	18d2      	adds	r2, r2, r3
 80004ea:	183b      	adds	r3, r7, r0
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	18cb      	adds	r3, r1, r3
 80004f4:	7812      	ldrb	r2, [r2, #0]
 80004f6:	709a      	strb	r2, [r3, #2]
	for(uint8_t i=0; i<6; i++){
 80004f8:	183b      	adds	r3, r7, r0
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	183b      	adds	r3, r7, r0
 80004fe:	3201      	adds	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	231f      	movs	r3, #31
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b05      	cmp	r3, #5
 800050a:	d9e8      	bls.n	80004de <enableButton+0x226>
	}
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b009      	add	sp, #36	; 0x24
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	50000400 	.word	0x50000400
 800051c:	200001fd 	.word	0x200001fd
 8000520:	200001fc 	.word	0x200001fc
 8000524:	200001ff 	.word	0x200001ff
 8000528:	200001fe 	.word	0x200001fe
 800052c:	20000200 	.word	0x20000200
 8000530:	20000201 	.word	0x20000201
 8000534:	20000204 	.word	0x20000204
 8000538:	20000208 	.word	0x20000208

0800053c <controlButtonState>:
 * 		debounceDelay		button delay read
 * 		returnState			State to change when the button is pressed
 * @retval None
**/
void controlButtonState(button_t *inputBT, uint32_t debounceDelay, bool *returnState)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
	// Ignoring noise or accidentally pressed
	if(inputBT->currentState != inputBT->lastState)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	785a      	ldrb	r2, [r3, #1]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	789b      	ldrb	r3, [r3, #2]
 8000550:	429a      	cmp	r2, r3
 8000552:	d004      	beq.n	800055e <controlButtonState+0x22>
		inputBT->lastDebounceTime = HAL_GetTick();
 8000554:	f001 f814 	bl	8001580 <HAL_GetTick>
 8000558:	0002      	movs	r2, r0
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	605a      	str	r2, [r3, #4]

	// Read the actual state from the button
	if((HAL_GetTick() - inputBT->lastDebounceTime) > debounceDelay){
 800055e:	f001 f80f 	bl	8001580 <HAL_GetTick>
 8000562:	0002      	movs	r2, r0
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	429a      	cmp	r2, r3
 800056e:	d210      	bcs.n	8000592 <controlButtonState+0x56>
		if(inputBT->readState != inputBT->currentState){
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	785b      	ldrb	r3, [r3, #1]
 8000578:	429a      	cmp	r2, r3
 800057a:	d00a      	beq.n	8000592 <controlButtonState+0x56>
			inputBT->currentState = inputBT->readState;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	705a      	strb	r2, [r3, #1]
			if(inputBT->currentState == GPIO_PIN_RESET){
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	785b      	ldrb	r3, [r3, #1]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <controlButtonState+0x56>
				*returnState = true;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <HAL_TIM_PeriodElapsedCallback>:
 * @param:
 * 		htim	Timer peripheral
 * @retval None
**/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim14.Instance)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d104      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		systemTimer.testCounter += 1;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005b8:	601a      	str	r2, [r3, #0]
	}
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	200000d0 	.word	0x200000d0
 80005c8:	20000208 	.word	0x20000208

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	b099      	sub	sp, #100	; 0x64
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Button variables
	button_t bt_startWarming	= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80005d2:	2158      	movs	r1, #88	; 0x58
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	4a3d      	ldr	r2, [pc, #244]	; (80006cc <main+0x100>)
 80005d8:	ca11      	ldmia	r2!, {r0, r4}
 80005da:	c311      	stmia	r3!, {r0, r4}
	button_t bt_startCooking	= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80005dc:	2450      	movs	r4, #80	; 0x50
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	4a3a      	ldr	r2, [pc, #232]	; (80006cc <main+0x100>)
 80005e2:	ca21      	ldmia	r2!, {r0, r5}
 80005e4:	c321      	stmia	r3!, {r0, r5}
	button_t bt_selectMenu		= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80005e6:	2548      	movs	r5, #72	; 0x48
 80005e8:	197b      	adds	r3, r7, r5
 80005ea:	4a38      	ldr	r2, [pc, #224]	; (80006cc <main+0x100>)
 80005ec:	ca41      	ldmia	r2!, {r0, r6}
 80005ee:	c341      	stmia	r3!, {r0, r6}
	button_t bt_enChangeTime 	= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80005f0:	2640      	movs	r6, #64	; 0x40
 80005f2:	19bb      	adds	r3, r7, r6
 80005f4:	4a35      	ldr	r2, [pc, #212]	; (80006cc <main+0x100>)
 80005f6:	ca03      	ldmia	r2!, {r0, r1}
 80005f8:	c303      	stmia	r3!, {r0, r1}
	button_t bt_changeHour		= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80005fa:	2338      	movs	r3, #56	; 0x38
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	4a33      	ldr	r2, [pc, #204]	; (80006cc <main+0x100>)
 8000600:	ca03      	ldmia	r2!, {r0, r1}
 8000602:	c303      	stmia	r3!, {r0, r1}
	button_t bt_changeMinute	= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 8000604:	2030      	movs	r0, #48	; 0x30
 8000606:	183b      	adds	r3, r7, r0
 8000608:	4a30      	ldr	r2, [pc, #192]	; (80006cc <main+0x100>)
 800060a:	ca03      	ldmia	r2!, {r0, r1}
 800060c:	c303      	stmia	r3!, {r0, r1}
	button_t arrButtons[6] = {bt_startWarming, bt_startCooking, bt_enChangeTime, bt_selectMenu, bt_changeHour, bt_changeMinute};
 800060e:	003a      	movs	r2, r7
 8000610:	2158      	movs	r1, #88	; 0x58
 8000612:	187b      	adds	r3, r7, r1
 8000614:	0010      	movs	r0, r2
 8000616:	0019      	movs	r1, r3
 8000618:	2308      	movs	r3, #8
 800061a:	001a      	movs	r2, r3
 800061c:	f003 fc50 	bl	8003ec0 <memcpy>
 8000620:	003b      	movs	r3, r7
 8000622:	193a      	adds	r2, r7, r4
 8000624:	3308      	adds	r3, #8
 8000626:	0011      	movs	r1, r2
 8000628:	2208      	movs	r2, #8
 800062a:	0018      	movs	r0, r3
 800062c:	f003 fc48 	bl	8003ec0 <memcpy>
 8000630:	003b      	movs	r3, r7
 8000632:	19ba      	adds	r2, r7, r6
 8000634:	3310      	adds	r3, #16
 8000636:	0011      	movs	r1, r2
 8000638:	2208      	movs	r2, #8
 800063a:	0018      	movs	r0, r3
 800063c:	f003 fc40 	bl	8003ec0 <memcpy>
 8000640:	003b      	movs	r3, r7
 8000642:	197a      	adds	r2, r7, r5
 8000644:	3318      	adds	r3, #24
 8000646:	0011      	movs	r1, r2
 8000648:	2208      	movs	r2, #8
 800064a:	0018      	movs	r0, r3
 800064c:	f003 fc38 	bl	8003ec0 <memcpy>
 8000650:	003b      	movs	r3, r7
 8000652:	2238      	movs	r2, #56	; 0x38
 8000654:	18ba      	adds	r2, r7, r2
 8000656:	3320      	adds	r3, #32
 8000658:	0011      	movs	r1, r2
 800065a:	2208      	movs	r2, #8
 800065c:	0018      	movs	r0, r3
 800065e:	f003 fc2f 	bl	8003ec0 <memcpy>
 8000662:	003b      	movs	r3, r7
 8000664:	2030      	movs	r0, #48	; 0x30
 8000666:	183a      	adds	r2, r7, r0
 8000668:	3328      	adds	r3, #40	; 0x28
 800066a:	0011      	movs	r1, r2
 800066c:	2208      	movs	r2, #8
 800066e:	0018      	movs	r0, r3
 8000670:	f003 fc26 	bl	8003ec0 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 ff08 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f832 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f9c0 	bl	8000a00 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000680:	f000 f888 	bl	8000794 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000684:	f000 f988 	bl	8000998 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000688:	f000 f938 	bl	80008fc <MX_TIM14_Init>
  MX_TIM16_Init();
 800068c:	f000 f95c 	bl	8000948 <MX_TIM16_Init>
  MX_TIM3_Init();
 8000690:	f000 f8dc 	bl	800084c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer
  HAL_TIM_Base_Start(&htim1);						// Start timer 1 for delay_Us function
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <main+0x104>)
 8000696:	0018      	movs	r0, r3
 8000698:	f002 f822 	bl	80026e0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim14);					// Timer counter
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <main+0x108>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 f864 	bl	800276c <HAL_TIM_Base_Start_IT>
  displayText(_msgHalo, 200);
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <main+0x10c>)
 80006a6:	21c8      	movs	r1, #200	; 0xc8
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fd47 	bl	800113c <displayText>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  enableDisplay();
 80006ae:	f7ff fdd9 	bl	8000264 <enableDisplay>
	  displayTimer(systemTimer.testCounter, true, true);
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <main+0x110>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2201      	movs	r2, #1
 80006b8:	2101      	movs	r1, #1
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fbbc 	bl	8000e38 <displayTimer>
	  enableButton(arrButtons);
 80006c0:	003b      	movs	r3, r7
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fdf8 	bl	80002b8 <enableButton>
	  enableDisplay();
 80006c8:	e7f1      	b.n	80006ae <main+0xe2>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	08003efc 	.word	0x08003efc
 80006d0:	20000038 	.word	0x20000038
 80006d4:	200000d0 	.word	0x200000d0
 80006d8:	08003f04 	.word	0x08003f04
 80006dc:	20000208 	.word	0x20000208

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b093      	sub	sp, #76	; 0x4c
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	2414      	movs	r4, #20
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2334      	movs	r3, #52	; 0x34
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f003 fbee 	bl	8003ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	0018      	movs	r0, r3
 80006fa:	2310      	movs	r3, #16
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f003 fbe7 	bl	8003ed2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fa8b 	bl	8001c24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2202      	movs	r2, #2
 8000712:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	0052      	lsls	r2, r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800071c:	0021      	movs	r1, r4
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2240      	movs	r2, #64	; 0x40
 8000728:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2202      	movs	r2, #2
 8000734:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2208      	movs	r2, #8
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0292      	lsls	r2, r2, #10
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0592      	lsls	r2, r2, #22
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	187b      	adds	r3, r7, r1
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fab1 	bl	8001cbc <HAL_RCC_OscConfig>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800075e:	f000 f9f3 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2207      	movs	r2, #7
 8000766:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2202      	movs	r2, #2
 800076c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2102      	movs	r1, #2
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fdac 	bl	80022dc <HAL_RCC_ClockConfig>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000788:	f000 f9de 	bl	8000b48 <Error_Handler>
  }
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b013      	add	sp, #76	; 0x4c
 8000792:	bd90      	pop	{r4, r7, pc}

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	2310      	movs	r3, #16
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	0018      	movs	r0, r3
 80007a0:	2310      	movs	r3, #16
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f003 fb94 	bl	8003ed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	230c      	movs	r3, #12
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f003 fb8d 	bl	8003ed2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_TIM1_Init+0xac>)
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MX_TIM1_Init+0xb0>)
 80007bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_TIM1_Init+0xac>)
 80007c0:	223f      	movs	r2, #63	; 0x3f
 80007c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_TIM1_Init+0xac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_TIM1_Init+0xac>)
 80007cc:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MX_TIM1_Init+0xb4>)
 80007ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_TIM1_Init+0xac>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_TIM1_Init+0xac>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_TIM1_Init+0xac>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_TIM1_Init+0xac>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 ff23 	bl	8002630 <HAL_TIM_Base_Init>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80007ee:	f000 f9ab 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f2:	2110      	movs	r1, #16
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	0152      	lsls	r2, r2, #5
 80007fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fc:	187a      	adds	r2, r7, r1
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_TIM1_Init+0xac>)
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f002 f932 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800080c:	f000 f99c 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000822:	1d3a      	adds	r2, r7, #4
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_TIM1_Init+0xac>)
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f002 fb1d 	bl	8002e68 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000832:	f000 f989 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b008      	add	sp, #32
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000038 	.word	0x20000038
 8000844:	40012c00 	.word	0x40012c00
 8000848:	0000ffff 	.word	0x0000ffff

0800084c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	2310      	movs	r3, #16
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	2310      	movs	r3, #16
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f003 fb38 	bl	8003ed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	0018      	movs	r0, r3
 8000866:	230c      	movs	r3, #12
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f003 fb31 	bl	8003ed2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000872:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <MX_TIM3_Init+0xa4>)
 8000874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <MX_TIM3_Init+0xa8>)
 800087a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_TIM3_Init+0xa0>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15000;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_TIM3_Init+0xac>)
 8000886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_TIM3_Init+0xa0>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_TIM3_Init+0xa0>)
 8000896:	0018      	movs	r0, r3
 8000898:	f001 feca 	bl	8002630 <HAL_TIM_Base_Init>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f952 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	2110      	movs	r1, #16
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0152      	lsls	r2, r2, #5
 80008ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ae:	187a      	adds	r2, r7, r1
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_TIM3_Init+0xa0>)
 80008b2:	0011      	movs	r1, r2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 f8d9 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80008be:	f000 f943 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ce:	1d3a      	adds	r2, r7, #4
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_TIM3_Init+0xa0>)
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 fac7 	bl	8002e68 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 f933 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b008      	add	sp, #32
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	20000084 	.word	0x20000084
 80008f0:	40000400 	.word	0x40000400
 80008f4:	0000f9ff 	.word	0x0000f9ff
 80008f8:	00003a98 	.word	0x00003a98

080008fc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_TIM14_Init+0x40>)
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <MX_TIM14_Init+0x44>)
 8000904:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64000-1;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_TIM14_Init+0x40>)
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <MX_TIM14_Init+0x48>)
 800090a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_TIM14_Init+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_TIM14_Init+0x40>)
 8000914:	22fa      	movs	r2, #250	; 0xfa
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_TIM14_Init+0x40>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_TIM14_Init+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <MX_TIM14_Init+0x40>)
 8000928:	0018      	movs	r0, r3
 800092a:	f001 fe81 	bl	8002630 <HAL_TIM_Base_Init>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000932:	f000 f909 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000d0 	.word	0x200000d0
 8000940:	40002000 	.word	0x40002000
 8000944:	0000f9ff 	.word	0x0000f9ff

08000948 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_TIM16_Init+0x44>)
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <MX_TIM16_Init+0x48>)
 8000950:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_TIM16_Init+0x44>)
 8000954:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <MX_TIM16_Init+0x4c>)
 8000956:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_TIM16_Init+0x44>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_TIM16_Init+0x44>)
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_TIM16_Init+0x44>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_TIM16_Init+0x44>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_TIM16_Init+0x44>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <MX_TIM16_Init+0x44>)
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fe59 	bl	8002630 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000982:	f000 f8e1 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000011c 	.word	0x2000011c
 8000990:	40014400 	.word	0x40014400
 8000994:	0000f9ff 	.word	0x0000f9ff

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_USART2_UART_Init+0x64>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009a4:	2296      	movs	r2, #150	; 0x96
 80009a6:	0192      	lsls	r2, r2, #6
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 faba 	bl	8002f5c <HAL_UART_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f8ac 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000168 	.word	0x20000168
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	240c      	movs	r4, #12
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f003 fa5e 	bl	8003ed2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1a:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
 8000a22:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b36      	ldr	r3, [pc, #216]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a32:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a34:	2102      	movs	r1, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4013      	ands	r3, r2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <MX_GPIO_Init+0x108>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	2204      	movs	r2, #4
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 8000a5e:	23ff      	movs	r3, #255	; 0xff
 8000a60:	0119      	lsls	r1, r3, #4
 8000a62:	23a0      	movs	r3, #160	; 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	2200      	movs	r2, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 f8be 	bl	8001bea <HAL_GPIO_WritePin>
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DOT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_COM_Pin|SEG_COM1_Pin|SEG_COM2_Pin|SEG_COM3_Pin
 8000a6e:	23fd      	movs	r3, #253	; 0xfd
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4826      	ldr	r0, [pc, #152]	; (8000b0c <MX_GPIO_Init+0x10c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	0019      	movs	r1, r3
 8000a78:	f001 f8b7 	bl	8001bea <HAL_GPIO_WritePin>
                          |SEG_COM4_Pin|SEG_COM5_Pin|SEG_COM6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 f8b1 	bl	8001bea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin SEG_DOT_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	22ff      	movs	r2, #255	; 0xff
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	601a      	str	r2, [r3, #0]
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|SEG_DOT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2201      	movs	r2, #1
 8000a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	193a      	adds	r2, r7, r4
 8000aa4:	23a0      	movs	r3, #160	; 0xa0
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 ff1c 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_COM_Pin SEG_COM1_Pin SEG_COM2_Pin SEG_COM3_Pin
                           SEG_COM4_Pin SEG_COM5_Pin SEG_COM6_Pin */
  GPIO_InitStruct.Pin = SW_COM_Pin|SEG_COM1_Pin|SEG_COM2_Pin|SEG_COM3_Pin
 8000ab0:	0021      	movs	r1, r4
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	22fd      	movs	r2, #253	; 0xfd
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
                          |SEG_COM4_Pin|SEG_COM5_Pin|SEG_COM6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	000c      	movs	r4, r1
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2201      	movs	r2, #1
 8000ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <MX_GPIO_Init+0x10c>)
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	0010      	movs	r0, r2
 8000ad6:	f000 ff07 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000ada:	0021      	movs	r1, r4
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000af8:	0019      	movs	r1, r3
 8000afa:	0010      	movs	r0, r2
 8000afc:	f000 fef4 	bl	80018e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b009      	add	sp, #36	; 0x24
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	50000400 	.word	0x50000400
 8000b10:	50000800 	.word	0x50000800

08000b14 <delay_us>:
/**
 *	@brief	Non-blocking Delay in Microseconds
 *	@retval None
***/
void delay_us (uint16_t us)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1,0);  					// set the counter value a 0
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <delay_us+0x30>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <delay_us+0x30>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b30:	1dbb      	adds	r3, r7, #6
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d3f8      	bcc.n	8000b2a <delay_us+0x16>
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000038 	.word	0x20000038

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <convertValue>:
/**
	*	Convert decimal number to seven segments display
	* @parameter num:	decimal number (uint8_t)
**/
uint8_t convertValue(uint8_t num)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	701a      	strb	r2, [r3, #0]
	uint8_t converted = 0x00;
 8000b60:	230f      	movs	r3, #15
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
	switch (num)
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b6f      	cmp	r3, #111	; 0x6f
 8000b6e:	d863      	bhi.n	8000c38 <convertValue+0xe4>
 8000b70:	009a      	lsls	r2, r3, #2
 8000b72:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <convertValue+0xf4>)
 8000b74:	18d3      	adds	r3, r2, r3
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	469f      	mov	pc, r3
	{
		case (0x00):
		case (0x6F):
			converted = NOL;
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	223f      	movs	r2, #63	; 0x3f
 8000b80:	701a      	strb	r2, [r3, #0]
			break;
 8000b82:	e059      	b.n	8000c38 <convertValue+0xe4>
		case (0x01):
		case (0x6C):
			converted = SATU;
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2206      	movs	r2, #6
 8000b8a:	701a      	strb	r2, [r3, #0]
			break;
 8000b8c:	e054      	b.n	8000c38 <convertValue+0xe4>
		case (0x02):
			converted = DUA;
 8000b8e:	230f      	movs	r3, #15
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	225b      	movs	r2, #91	; 0x5b
 8000b94:	701a      	strb	r2, [r3, #0]
			break;
 8000b96:	e04f      	b.n	8000c38 <convertValue+0xe4>
		case (0x03):
			converted = TIGA;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	224f      	movs	r2, #79	; 0x4f
 8000b9e:	701a      	strb	r2, [r3, #0]
			break;
 8000ba0:	e04a      	b.n	8000c38 <convertValue+0xe4>
		case (0x04):
			converted = EMPAT;
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	2266      	movs	r2, #102	; 0x66
 8000ba8:	701a      	strb	r2, [r3, #0]
			break;
 8000baa:	e045      	b.n	8000c38 <convertValue+0xe4>
		case (0x05):
			converted = LIMA;
 8000bac:	230f      	movs	r3, #15
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	226d      	movs	r2, #109	; 0x6d
 8000bb2:	701a      	strb	r2, [r3, #0]
			break;
 8000bb4:	e040      	b.n	8000c38 <convertValue+0xe4>
		case (0x06):
			converted = ENAM;
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	227d      	movs	r2, #125	; 0x7d
 8000bbc:	701a      	strb	r2, [r3, #0]
			break;
 8000bbe:	e03b      	b.n	8000c38 <convertValue+0xe4>
		case (0x07):
			converted = TUJUH;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	701a      	strb	r2, [r3, #0]
			break;
 8000bc8:	e036      	b.n	8000c38 <convertValue+0xe4>
		case (0x08):
			converted = DELAPAN;
 8000bca:	230f      	movs	r3, #15
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	227f      	movs	r2, #127	; 0x7f
 8000bd0:	701a      	strb	r2, [r3, #0]
			break;
 8000bd2:	e031      	b.n	8000c38 <convertValue+0xe4>
		case (0x09):
			converted = SEMBILAN;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	226f      	movs	r2, #111	; 0x6f
 8000bda:	701a      	strb	r2, [r3, #0]
			break;
 8000bdc:	e02c      	b.n	8000c38 <convertValue+0xe4>
		case (0x61):
			converted = CHAR_a;
 8000bde:	230f      	movs	r3, #15
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	225f      	movs	r2, #95	; 0x5f
 8000be4:	701a      	strb	r2, [r3, #0]
			break;
 8000be6:	e027      	b.n	8000c38 <convertValue+0xe4>
		case (0x43):
			converted = CHAR_C;
 8000be8:	230f      	movs	r3, #15
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	2239      	movs	r2, #57	; 0x39
 8000bee:	701a      	strb	r2, [r3, #0]
			break;
 8000bf0:	e022      	b.n	8000c38 <convertValue+0xe4>
		case (0x64):
			converted = CHAR_d;
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	225e      	movs	r2, #94	; 0x5e
 8000bf8:	701a      	strb	r2, [r3, #0]
			break;
 8000bfa:	e01d      	b.n	8000c38 <convertValue+0xe4>
		case (0x45):
			converted = CHAR_E;
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2279      	movs	r2, #121	; 0x79
 8000c02:	701a      	strb	r2, [r3, #0]
			break;
 8000c04:	e018      	b.n	8000c38 <convertValue+0xe4>
		case (0x65):
			converted = CHAR_e;
 8000c06:	230f      	movs	r3, #15
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	227b      	movs	r2, #123	; 0x7b
 8000c0c:	701a      	strb	r2, [r3, #0]
			break;
 8000c0e:	e013      	b.n	8000c38 <convertValue+0xe4>
		case (0x68):
			converted = CHAR_h;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2276      	movs	r2, #118	; 0x76
 8000c16:	701a      	strb	r2, [r3, #0]
			break;
 8000c18:	e00e      	b.n	8000c38 <convertValue+0xe4>
		case (0x6E):
			converted = CHAR_n;
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	2254      	movs	r2, #84	; 0x54
 8000c20:	701a      	strb	r2, [r3, #0]
			break;
 8000c22:	e009      	b.n	8000c38 <convertValue+0xe4>
		case (0x50):
			converted = CHAR_P;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2273      	movs	r2, #115	; 0x73
 8000c2a:	701a      	strb	r2, [r3, #0]
			break;
 8000c2c:	e004      	b.n	8000c38 <convertValue+0xe4>
		case (0x52):
			converted = CHAR_R;
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	2250      	movs	r2, #80	; 0x50
 8000c34:	701a      	strb	r2, [r3, #0]
			break;
 8000c36:	46c0      	nop			; (mov r8, r8)
	}
	return converted;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	08003f08 	.word	0x08003f08

08000c4c <writeSegment>:
	* Write data to segments
	* @parameter	value:	converted number from convertValue function
* @parameter	_useDot:	Dot value
**/
void writeSegment(uint8_t value, _Bool _useDot)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	0002      	movs	r2, r0
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	1dbb      	adds	r3, r7, #6
 8000c5a:	1c0a      	adds	r2, r1, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
	if(_useDot == true)
 8000c5e:	1dbb      	adds	r3, r7, #6
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <writeSegment+0x24>
		value = value + 0x80;			// Double dot
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	1dfa      	adds	r2, r7, #7
 8000c6a:	7812      	ldrb	r2, [r2, #0]
 8000c6c:	3a80      	subs	r2, #128	; 0x80
 8000c6e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<8; i++){
 8000c70:	230f      	movs	r3, #15
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e019      	b.n	8000cae <writeSegment+0x62>
		HAL_GPIO_WritePin(GPIOA, allSegments[i], (value&0x01));
 8000c7a:	240f      	movs	r4, #15
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <writeSegment+0x78>)
 8000c82:	0052      	lsls	r2, r2, #1
 8000c84:	5ad1      	ldrh	r1, [r2, r3]
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	23a0      	movs	r3, #160	; 0xa0
 8000c92:	05db      	lsls	r3, r3, #23
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 ffa8 	bl	8001bea <HAL_GPIO_WritePin>
		value = value >> 1;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	1dfa      	adds	r2, r7, #7
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	0852      	lsrs	r2, r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<8; i++){
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	3201      	adds	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	230f      	movs	r3, #15
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b07      	cmp	r3, #7
 8000cb6:	d9e0      	bls.n	8000c7a <writeSegment+0x2e>
	}
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b005      	add	sp, #20
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <digitCOM1>:
/**
	*	Display desired value on COM1
	*	@parameter _value:	Value to display
**/
void digitCOM1(uint8_t _value)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
	blankDisplay();
 8000cd4:	f000 f884 	bl	8000de0 <blankDisplay>
	writeSegment(_value, false);
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff ffb4 	bl	8000c4c <writeSegment>
	COM1_ON;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <digitCOM1+0x38>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2108      	movs	r1, #8
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 ff7d 	bl	8001bea <HAL_GPIO_WritePin>
	delay_us(COM_SWITCH_DELAY);
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <digitCOM1+0x3c>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff ff0e 	bl	8000b14 <delay_us>
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	50000400 	.word	0x50000400
 8000d04:	00000bb8 	.word	0x00000bb8

08000d08 <digitCOM2>:
/**
	*	Display desired value on COM2
	*	@parameter _value:	Value to display
**/
void digitCOM2(uint8_t _value, _Bool _useDot)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	1dbb      	adds	r3, r7, #6
 8000d16:	1c0a      	adds	r2, r1, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	blankDisplay();
 8000d1a:	f000 f861 	bl	8000de0 <blankDisplay>
	writeSegment(_value, _useDot);
 8000d1e:	1dbb      	adds	r3, r7, #6
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	0011      	movs	r1, r2
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ff8f 	bl	8000c4c <writeSegment>
	COM2_ON;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <digitCOM2+0x44>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	2110      	movs	r1, #16
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 ff58 	bl	8001bea <HAL_GPIO_WritePin>
	delay_us(COM_SWITCH_DELAY);
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <digitCOM2+0x48>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fee9 	bl	8000b14 <delay_us>
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	50000400 	.word	0x50000400
 8000d50:	00000bb8 	.word	0x00000bb8

08000d54 <digitCOM3>:
/**
	*	Display desired value on COM3
	*	@parameter _value:	Value to display
**/
void digitCOM3(uint8_t _value, _Bool _useDot)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	1dbb      	adds	r3, r7, #6
 8000d62:	1c0a      	adds	r2, r1, #0
 8000d64:	701a      	strb	r2, [r3, #0]
	blankDisplay();
 8000d66:	f000 f83b 	bl	8000de0 <blankDisplay>
	writeSegment(_value, _useDot);
 8000d6a:	1dbb      	adds	r3, r7, #6
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	0011      	movs	r1, r2
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff ff69 	bl	8000c4c <writeSegment>
	COM3_ON;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <digitCOM3+0x44>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2120      	movs	r1, #32
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 ff32 	bl	8001bea <HAL_GPIO_WritePin>
	delay_us(COM_SWITCH_DELAY);
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <digitCOM3+0x48>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff fec3 	bl	8000b14 <delay_us>
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	50000400 	.word	0x50000400
 8000d9c:	00000bb8 	.word	0x00000bb8

08000da0 <digitCOM4>:
/**
	*	Display desired value on COM4
	*	@parameter _value:	Value to display
**/
void digitCOM4(uint8_t _value)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	701a      	strb	r2, [r3, #0]
	blankDisplay();
 8000dac:	f000 f818 	bl	8000de0 <blankDisplay>
	writeSegment(_value, false);
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2100      	movs	r1, #0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff ff48 	bl	8000c4c <writeSegment>
	COM4_ON;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <digitCOM4+0x38>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2140      	movs	r1, #64	; 0x40
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 ff11 	bl	8001bea <HAL_GPIO_WritePin>
	delay_us(COM_SWITCH_DELAY);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <digitCOM4+0x3c>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff fea2 	bl	8000b14 <delay_us>
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	50000400 	.word	0x50000400
 8000ddc:	00000bb8 	.word	0x00000bb8

08000de0 <blankDisplay>:

/**
	*	Blank display by turning off the all COM
**/
void blankDisplay(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	COM1_OFF;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <blankDisplay+0x54>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	2108      	movs	r1, #8
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 fefd 	bl	8001bea <HAL_GPIO_WritePin>
	COM2_OFF;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <blankDisplay+0x54>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fef7 	bl	8001bea <HAL_GPIO_WritePin>
	COM3_OFF;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <blankDisplay+0x54>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2120      	movs	r1, #32
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fef1 	bl	8001bea <HAL_GPIO_WritePin>
	COM4_OFF;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <blankDisplay+0x54>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 feeb 	bl	8001bea <HAL_GPIO_WritePin>
	COM5_OFF;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <blankDisplay+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 fee5 	bl	8001bea <HAL_GPIO_WritePin>
	COM6_OFF;
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <blankDisplay+0x54>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	0019      	movs	r1, r3
 8000e2a:	f000 fede 	bl	8001bea <HAL_GPIO_WritePin>
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	50000400 	.word	0x50000400

08000e38 <displayTimer>:
/**
	*	Display desired value to segment
	*	@parameter value:	Desired decimal value
**/
void displayTimer(uint32_t inputSecond, _Bool blinkAll, _Bool hoursMinutesOnly)
{
 8000e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	0008      	movs	r0, r1
 8000e42:	0011      	movs	r1, r2
 8000e44:	1cfb      	adds	r3, r7, #3
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	1cbb      	adds	r3, r7, #2
 8000e4c:	1c0a      	adds	r2, r1, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
	// Reset the animation counter if rice or red rice mode selected
	loadingAnim.count = 0;
 8000e50:	4bb8      	ldr	r3, [pc, #736]	; (8001134 <displayTimer+0x2fc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	705a      	strb	r2, [r3, #1]

	// Digit Value
	uint8_t tensOfHourDigit, hourDigit, tensOfMinuteDigit, minuteDigit, tensOfSecondDigit, secondDigit;

	// Time Values
	uint16_t _hours	 = (inputSecond / 3600);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	22e1      	movs	r2, #225	; 0xe1
 8000e5a:	0111      	lsls	r1, r2, #4
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff f94f 	bl	8000100 <__udivsi3>
 8000e62:	0003      	movs	r3, r0
 8000e64:	001a      	movs	r2, r3
 8000e66:	2518      	movs	r5, #24
 8000e68:	197b      	adds	r3, r7, r5
 8000e6a:	801a      	strh	r2, [r3, #0]
	uint16_t _minutes = (inputSecond - (3600 * _hours))/60;
 8000e6c:	197b      	adds	r3, r7, r5
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	0013      	movs	r3, r2
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	1a9b      	subs	r3, r3, r2
 8000e76:	011a      	lsls	r2, r3, #4
 8000e78:	1ad2      	subs	r2, r2, r3
 8000e7a:	0113      	lsls	r3, r2, #4
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	0013      	movs	r3, r2
 8000e80:	001a      	movs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1a9b      	subs	r3, r3, r2
 8000e86:	213c      	movs	r1, #60	; 0x3c
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff f939 	bl	8000100 <__udivsi3>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	001a      	movs	r2, r3
 8000e92:	2616      	movs	r6, #22
 8000e94:	19bb      	adds	r3, r7, r6
 8000e96:	801a      	strh	r2, [r3, #0]
	uint16_t _seconds = (inputSecond - (3600 * _hours) - (_minutes * 60));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	197b      	adds	r3, r7, r5
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	21e1      	movs	r1, #225	; 0xe1
 8000ea2:	0109      	lsls	r1, r1, #4
 8000ea4:	434b      	muls	r3, r1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	b299      	uxth	r1, r3
 8000eac:	19bb      	adds	r3, r7, r6
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	223c      	movs	r2, #60	; 0x3c
 8000eb2:	4353      	muls	r3, r2
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	2314      	movs	r3, #20
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	1a8a      	subs	r2, r1, r2
 8000ebc:	801a      	strh	r2, [r3, #0]

	// Calculate values
	uint16_t tensOfHourValue	= (_hours / 10) % 10;
 8000ebe:	197b      	adds	r3, r7, r5
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	210a      	movs	r1, #10
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff f91b 	bl	8000100 <__udivsi3>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	2212      	movs	r2, #18
 8000ed0:	18bc      	adds	r4, r7, r2
 8000ed2:	210a      	movs	r1, #10
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff f999 	bl	800020c <__aeabi_uidivmod>
 8000eda:	000b      	movs	r3, r1
 8000edc:	8023      	strh	r3, [r4, #0]
	uint16_t hourValue			= _hours % 10;
 8000ede:	2110      	movs	r1, #16
 8000ee0:	187c      	adds	r4, r7, r1
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	210a      	movs	r1, #10
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff f98f 	bl	800020c <__aeabi_uidivmod>
 8000eee:	000b      	movs	r3, r1
 8000ef0:	8023      	strh	r3, [r4, #0]
	uint16_t tensOfMinuteValue 	= (_minutes / 10) % 10;
 8000ef2:	19bb      	adds	r3, r7, r6
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	210a      	movs	r1, #10
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff f901 	bl	8000100 <__udivsi3>
 8000efe:	0003      	movs	r3, r0
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	200e      	movs	r0, #14
 8000f04:	183c      	adds	r4, r7, r0
 8000f06:	210a      	movs	r1, #10
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff f97f 	bl	800020c <__aeabi_uidivmod>
 8000f0e:	000b      	movs	r3, r1
 8000f10:	8023      	strh	r3, [r4, #0]
	uint16_t minuteValue 		= _minutes % 10;
 8000f12:	200c      	movs	r0, #12
 8000f14:	183c      	adds	r4, r7, r0
 8000f16:	19bb      	adds	r3, r7, r6
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	210a      	movs	r1, #10
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff f975 	bl	800020c <__aeabi_uidivmod>
 8000f22:	000b      	movs	r3, r1
 8000f24:	8023      	strh	r3, [r4, #0]
	uint16_t tensOfSecondValue	= (_seconds / 10) %10;
 8000f26:	2614      	movs	r6, #20
 8000f28:	19bb      	adds	r3, r7, r6
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	210a      	movs	r1, #10
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff f8e6 	bl	8000100 <__udivsi3>
 8000f34:	0003      	movs	r3, r0
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	200a      	movs	r0, #10
 8000f3a:	183c      	adds	r4, r7, r0
 8000f3c:	210a      	movs	r1, #10
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff f964 	bl	800020c <__aeabi_uidivmod>
 8000f44:	000b      	movs	r3, r1
 8000f46:	8023      	strh	r3, [r4, #0]
	uint16_t secondValue		= _seconds % 10;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	18fc      	adds	r4, r7, r3
 8000f4c:	19bb      	adds	r3, r7, r6
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	210a      	movs	r1, #10
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff f95a 	bl	800020c <__aeabi_uidivmod>
 8000f58:	000b      	movs	r3, r1
 8000f5a:	8023      	strh	r3, [r4, #0]

	// Hours Value
	if (_hours > 0 && _hours < MAX_HOURS)
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d01a      	beq.n	8000f9a <displayTimer+0x162>
 8000f64:	197b      	adds	r3, r7, r5
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b3f      	cmp	r3, #63	; 0x3f
 8000f6a:	d816      	bhi.n	8000f9a <displayTimer+0x162>
	{
		tensOfHourDigit = convertValue(tensOfHourValue);
 8000f6c:	2212      	movs	r2, #18
 8000f6e:	18bb      	adds	r3, r7, r2
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	221f      	movs	r2, #31
 8000f76:	18bc      	adds	r4, r7, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff fdeb 	bl	8000b54 <convertValue>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	7023      	strb	r3, [r4, #0]
		hourDigit = convertValue(hourValue);
 8000f82:	2110      	movs	r1, #16
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	221e      	movs	r2, #30
 8000f8c:	18bc      	adds	r4, r7, r2
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff fde0 	bl	8000b54 <convertValue>
 8000f94:	0003      	movs	r3, r0
 8000f96:	7023      	strb	r3, [r4, #0]
 8000f98:	e00d      	b.n	8000fb6 <displayTimer+0x17e>
	}
	else
	{
		tensOfHourDigit = convertValue(0x00);
 8000f9a:	231f      	movs	r3, #31
 8000f9c:	18fc      	adds	r4, r7, r3
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fdd8 	bl	8000b54 <convertValue>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	7023      	strb	r3, [r4, #0]
		hourDigit = convertValue(0x00);
 8000fa8:	231e      	movs	r3, #30
 8000faa:	18fc      	adds	r4, r7, r3
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fdd1 	bl	8000b54 <convertValue>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	7023      	strb	r3, [r4, #0]
	}

	// Minutes Value
	if (_minutes >= 0 && _minutes < 60)
 8000fb6:	2316      	movs	r3, #22
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	2b3b      	cmp	r3, #59	; 0x3b
 8000fbe:	d816      	bhi.n	8000fee <displayTimer+0x1b6>
	{
		tensOfMinuteDigit = convertValue(tensOfMinuteValue);
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	221d      	movs	r2, #29
 8000fca:	18bc      	adds	r4, r7, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fdc1 	bl	8000b54 <convertValue>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	7023      	strb	r3, [r4, #0]
		minuteDigit = convertValue(minuteValue);
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	221c      	movs	r2, #28
 8000fe0:	18bc      	adds	r4, r7, r2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff fdb6 	bl	8000b54 <convertValue>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	7023      	strb	r3, [r4, #0]
 8000fec:	e00d      	b.n	800100a <displayTimer+0x1d2>
	}
	else
	{
		tensOfMinuteDigit = convertValue(0x00);
 8000fee:	231d      	movs	r3, #29
 8000ff0:	18fc      	adds	r4, r7, r3
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fdae 	bl	8000b54 <convertValue>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	7023      	strb	r3, [r4, #0]
		minuteDigit = convertValue(0x00);
 8000ffc:	231c      	movs	r3, #28
 8000ffe:	18fc      	adds	r4, r7, r3
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff fda7 	bl	8000b54 <convertValue>
 8001006:	0003      	movs	r3, r0
 8001008:	7023      	strb	r3, [r4, #0]
	}

	// Seconds Value
	if (_seconds >= 0 && _seconds < 60)
 800100a:	2314      	movs	r3, #20
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	2b3b      	cmp	r3, #59	; 0x3b
 8001012:	d816      	bhi.n	8001042 <displayTimer+0x20a>
	{
		tensOfSecondDigit = convertValue(tensOfSecondValue);
 8001014:	230a      	movs	r3, #10
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	221b      	movs	r2, #27
 800101e:	18bc      	adds	r4, r7, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fd97 	bl	8000b54 <convertValue>
 8001026:	0003      	movs	r3, r0
 8001028:	7023      	strb	r3, [r4, #0]
		secondDigit = convertValue(secondValue);
 800102a:	2308      	movs	r3, #8
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	221a      	movs	r2, #26
 8001034:	18bc      	adds	r4, r7, r2
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fd8c 	bl	8000b54 <convertValue>
 800103c:	0003      	movs	r3, r0
 800103e:	7023      	strb	r3, [r4, #0]
 8001040:	e00d      	b.n	800105e <displayTimer+0x226>
	}
	else
	{
		tensOfSecondDigit = convertValue(0x00);
 8001042:	231b      	movs	r3, #27
 8001044:	18fc      	adds	r4, r7, r3
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fd84 	bl	8000b54 <convertValue>
 800104c:	0003      	movs	r3, r0
 800104e:	7023      	strb	r3, [r4, #0]
		secondDigit = convertValue(0x00);
 8001050:	231a      	movs	r3, #26
 8001052:	18fc      	adds	r4, r7, r3
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fd7d 	bl	8000b54 <convertValue>
 800105a:	0003      	movs	r3, r0
 800105c:	7023      	strb	r3, [r4, #0]
	}

	// Control Dot
	intervalSwitching(&blinkDot, BLINK_DELAY);
 800105e:	23fa      	movs	r3, #250	; 0xfa
 8001060:	005a      	lsls	r2, r3, #1
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <displayTimer+0x300>)
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff f8d6 	bl	8000218 <intervalSwitching>

	// Display conditional
	if(_hours == 0 && _minutes == 0 && _seconds >= 0 && !hoursMinutesOnly)
 800106c:	2318      	movs	r3, #24
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11e      	bne.n	80010b4 <displayTimer+0x27c>
 8001076:	2316      	movs	r3, #22
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d119      	bne.n	80010b4 <displayTimer+0x27c>
 8001080:	1cbb      	adds	r3, r7, #2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	4053      	eors	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d012      	beq.n	80010b4 <displayTimer+0x27c>
	{
		digitCOM4(secondDigit);										// Seconds
 800108e:	231a      	movs	r3, #26
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff fe83 	bl	8000da0 <digitCOM4>
		if(_seconds >= 10)
 800109a:	2314      	movs	r3, #20
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	d943      	bls.n	800112c <displayTimer+0x2f4>
			digitCOM3(tensOfSecondDigit, false);		// Tens of Second
 80010a4:	231b      	movs	r3, #27
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2100      	movs	r1, #0
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff fe51 	bl	8000d54 <digitCOM3>
		if(_seconds >= 10)
 80010b2:	e03b      	b.n	800112c <displayTimer+0x2f4>
	}
	else
	{
		if (tensOfHourValue != 0)
 80010b4:	2312      	movs	r3, #18
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <displayTimer+0x292>
			digitCOM1(tensOfHourDigit);						// Tens of Hour
 80010be:	231f      	movs	r3, #31
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fdff 	bl	8000cc8 <digitCOM1>

		// Blinking the dot
		blankDisplay();
 80010ca:	f7ff fe89 	bl	8000de0 <blankDisplay>
		if(blinkDot._state == true || blinkAll == false)
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <displayTimer+0x300>)
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <displayTimer+0x2ac>
 80010d6:	1cfb      	adds	r3, r7, #3
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2201      	movs	r2, #1
 80010dc:	4053      	eors	r3, r2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00e      	beq.n	8001102 <displayTimer+0x2ca>
		{
			digitCOM2(hourDigit, true);						// Hours
 80010e4:	231e      	movs	r3, #30
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2101      	movs	r1, #1
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff fe0b 	bl	8000d08 <digitCOM2>
			digitCOM3(tensOfMinuteDigit, true);				// Tens of Minute
 80010f2:	231d      	movs	r3, #29
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff fe2a 	bl	8000d54 <digitCOM3>
 8001100:	e00d      	b.n	800111e <displayTimer+0x2e6>
		}
		else
		{
			digitCOM2(hourDigit, false);					// Hours
 8001102:	231e      	movs	r3, #30
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2100      	movs	r1, #0
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff fdfc 	bl	8000d08 <digitCOM2>
			digitCOM3(tensOfMinuteDigit, false);			// Tens of Minute
 8001110:	231d      	movs	r3, #29
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2100      	movs	r1, #0
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff fe1b 	bl	8000d54 <digitCOM3>
		}
		digitCOM4(minuteDigit);								// Minutes
 800111e:	231c      	movs	r3, #28
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff fe3b 	bl	8000da0 <digitCOM4>
	}
}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b009      	add	sp, #36	; 0x24
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001134:	20000218 	.word	0x20000218
 8001138:	20000210 	.word	0x20000210

0800113c <displayText>:
/**
	*	Display desired text to display
	*	@parameter _text:	Pointer to ASCII character
**/
void displayText(const uint8_t* _text, uint32_t _delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	blankDisplay();
 8001146:	f7ff fe4b 	bl	8000de0 <blankDisplay>
	for(uint32_t i=0; i<_delay; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e02b      	b.n	80011a8 <displayText+0x6c>
	{
		digitCOM1(convertValue(_text[0]));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff fcfd 	bl	8000b54 <convertValue>
 800115a:	0003      	movs	r3, r0
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fdb3 	bl	8000cc8 <digitCOM1>
		digitCOM2(convertValue(_text[1]), false);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff fcf3 	bl	8000b54 <convertValue>
 800116e:	0003      	movs	r3, r0
 8001170:	2100      	movs	r1, #0
 8001172:	0018      	movs	r0, r3
 8001174:	f7ff fdc8 	bl	8000d08 <digitCOM2>
		digitCOM3(convertValue(_text[2]), false);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3302      	adds	r3, #2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff fce8 	bl	8000b54 <convertValue>
 8001184:	0003      	movs	r3, r0
 8001186:	2100      	movs	r1, #0
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff fde3 	bl	8000d54 <digitCOM3>
		digitCOM4(convertValue(_text[3]));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3303      	adds	r3, #3
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff fcdd 	bl	8000b54 <convertValue>
 800119a:	0003      	movs	r3, r0
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff fdff 	bl	8000da0 <digitCOM4>
	for(uint32_t i=0; i<_delay; i++)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3cf      	bcc.n	8001150 <displayText+0x14>
	}
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b004      	add	sp, #16
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_MspInit+0x44>)
 80011c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_MspInit+0x44>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2201      	movs	r2, #1
 80011d4:	4013      	ands	r3, r2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_MspInit+0x44>)
 80011dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_MspInit+0x44>)
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0549      	lsls	r1, r1, #21
 80011e4:	430a      	orrs	r2, r1
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_MspInit+0x44>)
 80011ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	055b      	lsls	r3, r3, #21
 80011f0:	4013      	ands	r3, r2
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a33      	ldr	r2, [pc, #204]	; (80012e0 <HAL_TIM_Base_MspInit+0xdc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10e      	bne.n	8001234 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001216:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0109      	lsls	r1, r1, #4
 8001220:	430a      	orrs	r2, r1
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4013      	ands	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001232:	e050      	b.n	80012d6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a2b      	ldr	r2, [pc, #172]	; (80012e8 <HAL_TIM_Base_MspInit+0xe4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d114      	bne.n	8001268 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001244:	2102      	movs	r1, #2
 8001246:	430a      	orrs	r2, r1
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 800124c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2010      	movs	r0, #16
 800125c:	f000 fa46 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001260:	2010      	movs	r0, #16
 8001262:	f000 fa58 	bl	8001716 <HAL_NVIC_EnableIRQ>
}
 8001266:	e036      	b.n	80012d6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM14)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1f      	ldr	r2, [pc, #124]	; (80012ec <HAL_TIM_Base_MspInit+0xe8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d116      	bne.n	80012a0 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	0209      	lsls	r1, r1, #8
 800127c:	430a      	orrs	r2, r1
 800127e:	641a      	str	r2, [r3, #64]	; 0x40
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2013      	movs	r0, #19
 8001294:	f000 fa2a 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001298:	2013      	movs	r0, #19
 800129a:	f000 fa3c 	bl	8001716 <HAL_NVIC_EnableIRQ>
}
 800129e:	e01a      	b.n	80012d6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM16)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_TIM_Base_MspInit+0xec>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d115      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 80012ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	0289      	lsls	r1, r1, #10
 80012b4:	430a      	orrs	r2, r1
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_TIM_Base_MspInit+0xe0>)
 80012ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2015      	movs	r0, #21
 80012cc:	f000 fa0e 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80012d0:	2015      	movs	r0, #21
 80012d2:	f000 fa20 	bl	8001716 <HAL_NVIC_EnableIRQ>
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b006      	add	sp, #24
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	40012c00 	.word	0x40012c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40000400 	.word	0x40000400
 80012ec:	40002000 	.word	0x40002000
 80012f0:	40014400 	.word	0x40014400

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b08b      	sub	sp, #44	; 0x2c
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	2414      	movs	r4, #20
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	0018      	movs	r0, r3
 8001302:	2314      	movs	r3, #20
 8001304:	001a      	movs	r2, r3
 8001306:	2100      	movs	r1, #0
 8001308:	f002 fde3 	bl	8003ed2 <memset>
  if(huart->Instance==USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_UART_MspInit+0x9c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d138      	bne.n	8001388 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_UART_MspInit+0xa0>)
 8001318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_UART_MspInit+0xa0>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	0289      	lsls	r1, r1, #10
 8001320:	430a      	orrs	r2, r1
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_UART_MspInit+0xa0>)
 8001326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_UART_MspInit+0xa0>)
 8001334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_UART_MspInit+0xa0>)
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_UART_MspInit+0xa0>)
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	2201      	movs	r2, #1
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800134a:	0021      	movs	r1, r4
 800134c:	187b      	adds	r3, r7, r1
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2202      	movs	r2, #2
 8001356:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2201      	movs	r2, #1
 800135c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2201      	movs	r2, #1
 8001368:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	187a      	adds	r2, r7, r1
 800136c:	23a0      	movs	r3, #160	; 0xa0
 800136e:	05db      	lsls	r3, r3, #23
 8001370:	0011      	movs	r1, r2
 8001372:	0018      	movs	r0, r3
 8001374:	f000 fab8 	bl	80018e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	201c      	movs	r0, #28
 800137e:	f000 f9b5 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001382:	201c      	movs	r0, #28
 8001384:	f000 f9c7 	bl	8001716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b00b      	add	sp, #44	; 0x2c
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f8ce 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <TIM3_IRQHandler+0x14>)
 80013ce:	0018      	movs	r0, r3
 80013d0:	f001 fa1a 	bl	8002808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	20000084 	.word	0x20000084

080013e0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <TIM14_IRQHandler+0x14>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f001 fa0e 	bl	8002808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	200000d0 	.word	0x200000d0

080013f8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <TIM16_IRQHandler+0x14>)
 80013fe:	0018      	movs	r0, r3
 8001400:	f001 fa02 	bl	8002808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	2000011c 	.word	0x2000011c

08001410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <USART2_IRQHandler+0x14>)
 8001416:	0018      	movs	r0, r3
 8001418:	f001 fdf6 	bl	8003008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	20000168 	.word	0x20000168

08001428 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001436:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001438:	f7ff fff6 	bl	8001428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <LoopForever+0x6>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	; (8001474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <LoopForever+0xe>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	; (8001480 <LoopForever+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001462:	f002 fd09 	bl	8003e78 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001466:	f7ff f8b1 	bl	80005cc <main>

0800146a <LoopForever>:

LoopForever:
  b LoopForever
 800146a:	e7fe      	b.n	800146a <LoopForever>
  ldr   r0, =_estack
 800146c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001478:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 800147c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001480:	20000224 	.word	0x20000224

08001484 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_IRQHandler>
	...

08001488 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_Init+0x3c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Init+0x3c>)
 800149a:	2180      	movs	r1, #128	; 0x80
 800149c:	0049      	lsls	r1, r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f810 	bl	80014c8 <HAL_InitTick>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e001      	b.n	80014b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fe82 	bl	80011bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	781b      	ldrb	r3, [r3, #0]
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40022000 	.word	0x40022000

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d0:	230f      	movs	r3, #15
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_InitTick+0x88>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d02b      	beq.n	8001538 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_InitTick+0x8c>)
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_InitTick+0x88>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	0019      	movs	r1, r3
 80014ea:	23fa      	movs	r3, #250	; 0xfa
 80014ec:	0098      	lsls	r0, r3, #2
 80014ee:	f7fe fe07 	bl	8000100 <__udivsi3>
 80014f2:	0003      	movs	r3, r0
 80014f4:	0019      	movs	r1, r3
 80014f6:	0020      	movs	r0, r4
 80014f8:	f7fe fe02 	bl	8000100 <__udivsi3>
 80014fc:	0003      	movs	r3, r0
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 f919 	bl	8001736 <HAL_SYSTICK_Config>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d112      	bne.n	800152e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d80a      	bhi.n	8001524 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	2301      	movs	r3, #1
 8001512:	425b      	negs	r3, r3
 8001514:	2200      	movs	r2, #0
 8001516:	0018      	movs	r0, r3
 8001518:	f000 f8e8 	bl	80016ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_InitTick+0x90>)
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e00d      	b.n	8001540 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	e008      	b.n	8001540 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800152e:	230f      	movs	r3, #15
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e003      	b.n	8001540 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001538:	230f      	movs	r3, #15
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001540:	230f      	movs	r3, #15
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	781b      	ldrb	r3, [r3, #0]
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b005      	add	sp, #20
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	20000018 	.word	0x20000018
 8001554:	20000010 	.word	0x20000010
 8001558:	20000014 	.word	0x20000014

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x1c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	001a      	movs	r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x20>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	18d2      	adds	r2, r2, r3
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_IncTick+0x20>)
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	20000018 	.word	0x20000018
 800157c:	20000220 	.word	0x20000220

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <HAL_GetTick+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	20000220 	.word	0x20000220

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	0002      	movs	r2, r0
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b7f      	cmp	r3, #127	; 0x7f
 80015a6:	d809      	bhi.n	80015bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a8:	1dfb      	adds	r3, r7, #7
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	001a      	movs	r2, r3
 80015ae:	231f      	movs	r3, #31
 80015b0:	401a      	ands	r2, r3
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_EnableIRQ+0x30>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	4091      	lsls	r1, r2
 80015b8:	000a      	movs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	0002      	movs	r2, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b7f      	cmp	r3, #127	; 0x7f
 80015dc:	d828      	bhi.n	8001630 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015de:	4a2f      	ldr	r2, [pc, #188]	; (800169c <__NVIC_SetPriority+0xd4>)
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	33c0      	adds	r3, #192	; 0xc0
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	589b      	ldr	r3, [r3, r2]
 80015ee:	1dfa      	adds	r2, r7, #7
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	0011      	movs	r1, r2
 80015f4:	2203      	movs	r2, #3
 80015f6:	400a      	ands	r2, r1
 80015f8:	00d2      	lsls	r2, r2, #3
 80015fa:	21ff      	movs	r1, #255	; 0xff
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	43d2      	mvns	r2, r2
 8001602:	401a      	ands	r2, r3
 8001604:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	22ff      	movs	r2, #255	; 0xff
 800160c:	401a      	ands	r2, r3
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	0018      	movs	r0, r3
 8001614:	2303      	movs	r3, #3
 8001616:	4003      	ands	r3, r0
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161c:	481f      	ldr	r0, [pc, #124]	; (800169c <__NVIC_SetPriority+0xd4>)
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b25b      	sxtb	r3, r3
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	430a      	orrs	r2, r1
 8001628:	33c0      	adds	r3, #192	; 0xc0
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800162e:	e031      	b.n	8001694 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001630:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <__NVIC_SetPriority+0xd8>)
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	0019      	movs	r1, r3
 8001638:	230f      	movs	r3, #15
 800163a:	400b      	ands	r3, r1
 800163c:	3b08      	subs	r3, #8
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3306      	adds	r3, #6
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	18d3      	adds	r3, r2, r3
 8001646:	3304      	adds	r3, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	1dfa      	adds	r2, r7, #7
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	0011      	movs	r1, r2
 8001650:	2203      	movs	r2, #3
 8001652:	400a      	ands	r2, r1
 8001654:	00d2      	lsls	r2, r2, #3
 8001656:	21ff      	movs	r1, #255	; 0xff
 8001658:	4091      	lsls	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	43d2      	mvns	r2, r2
 800165e:	401a      	ands	r2, r3
 8001660:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	019b      	lsls	r3, r3, #6
 8001666:	22ff      	movs	r2, #255	; 0xff
 8001668:	401a      	ands	r2, r3
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	0018      	movs	r0, r3
 8001670:	2303      	movs	r3, #3
 8001672:	4003      	ands	r3, r0
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <__NVIC_SetPriority+0xd8>)
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	001c      	movs	r4, r3
 8001680:	230f      	movs	r3, #15
 8001682:	4023      	ands	r3, r4
 8001684:	3b08      	subs	r3, #8
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	430a      	orrs	r2, r1
 800168a:	3306      	adds	r3, #6
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	18c3      	adds	r3, r0, r3
 8001690:	3304      	adds	r3, #4
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b003      	add	sp, #12
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	045b      	lsls	r3, r3, #17
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d301      	bcc.n	80016bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b8:	2301      	movs	r3, #1
 80016ba:	e010      	b.n	80016de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <SysTick_Config+0x44>)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	3a01      	subs	r2, #1
 80016c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c4:	2301      	movs	r3, #1
 80016c6:	425b      	negs	r3, r3
 80016c8:	2103      	movs	r1, #3
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff ff7c 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x44>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x44>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	210f      	movs	r1, #15
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	1c02      	adds	r2, r0, #0
 80016fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	187b      	adds	r3, r7, r1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b25b      	sxtb	r3, r3
 8001706:	0011      	movs	r1, r2
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	0002      	movs	r2, r0
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b25b      	sxtb	r3, r3
 8001728:	0018      	movs	r0, r3
 800172a:	f7ff ff33 	bl	8001594 <__NVIC_EnableIRQ>
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff ffaf 	bl	80016a4 <SysTick_Config>
 8001746:	0003      	movs	r3, r0
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e050      	b.n	8001804 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2225      	movs	r2, #37	; 0x25
 8001766:	5c9b      	ldrb	r3, [r3, r2]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d008      	beq.n	8001780 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e041      	b.n	8001804 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	210e      	movs	r1, #14
 800178c:	438a      	bics	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	491c      	ldr	r1, [pc, #112]	; (800180c <HAL_DMA_Abort+0xbc>)
 800179c:	400a      	ands	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	438a      	bics	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_DMA_Abort+0xc0>)
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	221c      	movs	r2, #28
 80017ba:	4013      	ands	r3, r2
 80017bc:	2201      	movs	r2, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_DMA_Abort+0xc0>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	490a      	ldr	r1, [pc, #40]	; (800180c <HAL_DMA_Abort+0xbc>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2225      	movs	r2, #37	; 0x25
 80017f6:	2101      	movs	r1, #1
 80017f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2224      	movs	r2, #36	; 0x24
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}
 800180c:	fffffeff 	.word	0xfffffeff
 8001810:	40020000 	.word	0x40020000

08001814 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181c:	210f      	movs	r1, #15
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2225      	movs	r2, #37	; 0x25
 8001828:	5c9b      	ldrb	r3, [r3, r2]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d006      	beq.n	800183e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2204      	movs	r2, #4
 8001834:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001836:	187b      	adds	r3, r7, r1
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e049      	b.n	80018d2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	210e      	movs	r1, #14
 800184a:	438a      	bics	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	438a      	bics	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	491d      	ldr	r1, [pc, #116]	; (80018e0 <HAL_DMA_Abort_IT+0xcc>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_DMA_Abort_IT+0xd0>)
 8001870:	6859      	ldr	r1, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	221c      	movs	r2, #28
 8001878:	4013      	ands	r3, r2
 800187a:	2201      	movs	r2, #1
 800187c:	409a      	lsls	r2, r3
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_DMA_Abort_IT+0xd0>)
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800188c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00c      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a0:	490f      	ldr	r1, [pc, #60]	; (80018e0 <HAL_DMA_Abort_IT+0xcc>)
 80018a2:	400a      	ands	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80018ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2225      	movs	r2, #37	; 0x25
 80018b4:	2101      	movs	r1, #1
 80018b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2224      	movs	r2, #36	; 0x24
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	0010      	movs	r0, r2
 80018d0:	4798      	blx	r3
    }
  }
  return status;
 80018d2:	230f      	movs	r3, #15
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	fffffeff 	.word	0xfffffeff
 80018e4:	40020000 	.word	0x40020000

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e147      	b.n	8001b88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4091      	lsls	r1, r2
 8001902:	000a      	movs	r2, r1
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d100      	bne.n	8001910 <HAL_GPIO_Init+0x28>
 800190e:	e138      	b.n	8001b82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	4013      	ands	r3, r2
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_Init+0x40>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2203      	movs	r2, #3
 8001922:	4013      	ands	r3, r2
 8001924:	2b02      	cmp	r3, #2
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	409a      	lsls	r2, r3
 8001936:	0013      	movs	r3, r2
 8001938:	43da      	mvns	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	409a      	lsls	r2, r3
 800194a:	0013      	movs	r3, r2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	43da      	mvns	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	2201      	movs	r2, #1
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2203      	movs	r2, #3
 8001990:	4013      	ands	r3, r2
 8001992:	2b03      	cmp	r3, #3
 8001994:	d017      	beq.n	80019c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	43da      	mvns	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2203      	movs	r2, #3
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d123      	bne.n	8001a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	58d3      	ldr	r3, [r2, r3]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2207      	movs	r2, #7
 80019e4:	4013      	ands	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2107      	movs	r1, #7
 80019fe:	400b      	ands	r3, r1
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	6939      	ldr	r1, [r7, #16]
 8001a18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2203      	movs	r2, #3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	23c0      	movs	r3, #192	; 0xc0
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	4013      	ands	r3, r2
 8001a58:	d100      	bne.n	8001a5c <HAL_GPIO_Init+0x174>
 8001a5a:	e092      	b.n	8001b82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a5c:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3318      	adds	r3, #24
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	589b      	ldr	r3, [r3, r2]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	4013      	ands	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	220f      	movs	r2, #15
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	23a0      	movs	r3, #160	; 0xa0
 8001a84:	05db      	lsls	r3, r3, #23
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x1ca>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a45      	ldr	r2, [pc, #276]	; (8001ba4 <HAL_GPIO_Init+0x2bc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x1c6>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a44      	ldr	r2, [pc, #272]	; (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x1c2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a43      	ldr	r2, [pc, #268]	; (8001bac <HAL_GPIO_Init+0x2c4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x1be>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x1cc>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x1cc>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x1cc>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x1cc>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	400a      	ands	r2, r1
 8001aba:	00d2      	lsls	r2, r2, #3
 8001abc:	4093      	lsls	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ac4:	4936      	ldr	r1, [pc, #216]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3318      	adds	r3, #24
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43da      	mvns	r2, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	035b      	lsls	r3, r3, #13
 8001aea:	4013      	ands	r3, r2
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43da      	mvns	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	4013      	ands	r3, r2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001b28:	2384      	movs	r3, #132	; 0x84
 8001b2a:	58d3      	ldr	r3, [r2, r3]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43da      	mvns	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b4c:	4914      	ldr	r1, [pc, #80]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	2284      	movs	r2, #132	; 0x84
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	58d3      	ldr	r3, [r2, r3]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b7a:	4909      	ldr	r1, [pc, #36]	; (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	40da      	lsrs	r2, r3
 8001b90:	1e13      	subs	r3, r2, #0
 8001b92:	d000      	beq.n	8001b96 <HAL_GPIO_Init+0x2ae>
 8001b94:	e6b0      	b.n	80018f8 <HAL_GPIO_Init+0x10>
  }
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b006      	add	sp, #24
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	50000400 	.word	0x50000400
 8001ba8:	50000800 	.word	0x50000800
 8001bac:	50000c00 	.word	0x50000c00

08001bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	000a      	movs	r2, r1
 8001bba:	1cbb      	adds	r3, r7, #2
 8001bbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	1cba      	adds	r2, r7, #2
 8001bc4:	8812      	ldrh	r2, [r2, #0]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001bca:	230f      	movs	r3, #15
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e003      	b.n	8001bdc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001bdc:	230f      	movs	r3, #15
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	781b      	ldrb	r3, [r3, #0]
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b004      	add	sp, #16
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	0008      	movs	r0, r1
 8001bf4:	0011      	movs	r1, r2
 8001bf6:	1cbb      	adds	r3, r7, #2
 8001bf8:	1c02      	adds	r2, r0, #0
 8001bfa:	801a      	strh	r2, [r3, #0]
 8001bfc:	1c7b      	adds	r3, r7, #1
 8001bfe:	1c0a      	adds	r2, r1, #0
 8001c00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c02:	1c7b      	adds	r3, r7, #1
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0a:	1cbb      	adds	r3, r7, #2
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c14:	1cbb      	adds	r3, r7, #2
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d11f      	bne.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	189b      	adds	r3, r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4912      	ldr	r1, [pc, #72]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7fe fa52 	bl	8000100 <__udivsi3>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c62:	e008      	b.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e001      	b.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e009      	b.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d0ed      	beq.n	8001c64 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	40007000 	.word	0x40007000
 8001c98:	fffff9ff 	.word	0xfffff9ff
 8001c9c:	20000010 	.word	0x20000010
 8001ca0:	000f4240 	.word	0x000f4240

08001ca4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	23e0      	movs	r3, #224	; 0xe0
 8001cae:	01db      	lsls	r3, r3, #7
 8001cb0:	4013      	ands	r3, r2
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000

08001cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e2f3      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d100      	bne.n	8001cda <HAL_RCC_OscConfig+0x1e>
 8001cd8:	e07c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cda:	4bc3      	ldr	r3, [pc, #780]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2238      	movs	r2, #56	; 0x38
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce4:	4bc0      	ldr	r3, [pc, #768]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	4013      	ands	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3e>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d002      	beq.n	8001d00 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d10b      	bne.n	8001d18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	4bb9      	ldr	r3, [pc, #740]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d062      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x116>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d15e      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e2ce      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	025b      	lsls	r3, r3, #9
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x78>
 8001d24:	4bb0      	ldr	r3, [pc, #704]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4baf      	ldr	r3, [pc, #700]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0249      	lsls	r1, r1, #9
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e020      	b.n	8001d76 <HAL_RCC_OscConfig+0xba>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	23a0      	movs	r3, #160	; 0xa0
 8001d3a:	02db      	lsls	r3, r3, #11
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d10e      	bne.n	8001d5e <HAL_RCC_OscConfig+0xa2>
 8001d40:	4ba9      	ldr	r3, [pc, #676]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4ba8      	ldr	r3, [pc, #672]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	02c9      	lsls	r1, r1, #11
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	4ba6      	ldr	r3, [pc, #664]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4ba5      	ldr	r3, [pc, #660]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	0249      	lsls	r1, r1, #9
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e00b      	b.n	8001d76 <HAL_RCC_OscConfig+0xba>
 8001d5e:	4ba2      	ldr	r3, [pc, #648]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4ba1      	ldr	r3, [pc, #644]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	49a1      	ldr	r1, [pc, #644]	; (8001fec <HAL_RCC_OscConfig+0x330>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	4b9f      	ldr	r3, [pc, #636]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b9e      	ldr	r3, [pc, #632]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d70:	499f      	ldr	r1, [pc, #636]	; (8001ff0 <HAL_RCC_OscConfig+0x334>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d014      	beq.n	8001da8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fbff 	bl	8001580 <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fbfa 	bl	8001580 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e28d      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9a:	4b93      	ldr	r3, [pc, #588]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	029b      	lsls	r3, r3, #10
 8001da2:	4013      	ands	r3, r2
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0xcc>
 8001da6:	e015      	b.n	8001dd4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fbea 	bl	8001580 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db2:	f7ff fbe5 	bl	8001580 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b64      	cmp	r3, #100	; 0x64
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e278      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc4:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0xf6>
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d100      	bne.n	8001de0 <HAL_RCC_OscConfig+0x124>
 8001dde:	e099      	b.n	8001f14 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de0:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2238      	movs	r2, #56	; 0x38
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dea:	4b7f      	ldr	r3, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2203      	movs	r2, #3
 8001df0:	4013      	ands	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x144>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d002      	beq.n	8001e06 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d135      	bne.n	8001e72 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e06:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x162>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e24b      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b72      	ldr	r3, [pc, #456]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a74      	ldr	r2, [pc, #464]	; (8001ff4 <HAL_RCC_OscConfig+0x338>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d112      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e3a:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x33c>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e4e:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0adb      	lsrs	r3, r3, #11
 8001e54:	2207      	movs	r2, #7
 8001e56:	4013      	ands	r3, r2
 8001e58:	4a68      	ldr	r2, [pc, #416]	; (8001ffc <HAL_RCC_OscConfig+0x340>)
 8001e5a:	40da      	lsrs	r2, r3
 8001e5c:	4b68      	ldr	r3, [pc, #416]	; (8002000 <HAL_RCC_OscConfig+0x344>)
 8001e5e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCC_OscConfig+0x348>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7ff fb2f 	bl	80014c8 <HAL_InitTick>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d051      	beq.n	8001f12 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e221      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d030      	beq.n	8001edc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a5e      	ldr	r2, [pc, #376]	; (8001ff8 <HAL_RCC_OscConfig+0x33c>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e8e:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0049      	lsls	r1, r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fb70 	bl	8001580 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fb6b 	bl	8001580 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1fe      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb8:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b48      	ldr	r3, [pc, #288]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a4a      	ldr	r2, [pc, #296]	; (8001ff4 <HAL_RCC_OscConfig+0x338>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	021a      	lsls	r2, r3, #8
 8001ed4:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	e01b      	b.n	8001f14 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	4949      	ldr	r1, [pc, #292]	; (8002008 <HAL_RCC_OscConfig+0x34c>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fb4a 	bl	8001580 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fb45 	bl	8001580 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1d8      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f04:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x236>
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d047      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f1e:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2238      	movs	r2, #56	; 0x38
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b18      	cmp	r3, #24
 8001f28:	d10a      	bne.n	8001f40 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2e:	2202      	movs	r2, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	d03c      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d138      	bne.n	8001fae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e1ba      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d019      	beq.n	8001f7c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001f4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff fb14 	bl	8001580 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7ff fb0f 	bl	8001580 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1a2      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f74:	2202      	movs	r2, #2
 8001f76:	4013      	ands	r3, r2
 8001f78:	d0f1      	beq.n	8001f5e <HAL_RCC_OscConfig+0x2a2>
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001f82:	2101      	movs	r1, #1
 8001f84:	438a      	bics	r2, r1
 8001f86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff fafa 	bl	8001580 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f92:	f7ff faf5 	bl	8001580 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e188      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	d1f1      	bne.n	8001f92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_RCC_OscConfig+0x2fe>
 8001fb8:	e0c6      	b.n	8002148 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	231f      	movs	r3, #31
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2238      	movs	r2, #56	; 0x38
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d11e      	bne.n	800200c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d100      	bne.n	8001fda <HAL_RCC_OscConfig+0x31e>
 8001fd8:	e0b6      	b.n	8002148 <HAL_RCC_OscConfig+0x48c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d000      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x328>
 8001fe2:	e0b1      	b.n	8002148 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e166      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	fffeffff 	.word	0xfffeffff
 8001ff0:	fffbffff 	.word	0xfffbffff
 8001ff4:	ffff80ff 	.word	0xffff80ff
 8001ff8:	ffffc7ff 	.word	0xffffc7ff
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	20000010 	.word	0x20000010
 8002004:	20000014 	.word	0x20000014
 8002008:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800200c:	4bac      	ldr	r3, [pc, #688]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 800200e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	055b      	lsls	r3, r3, #21
 8002014:	4013      	ands	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x360>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x362>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d011      	beq.n	8002046 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4ba7      	ldr	r3, [pc, #668]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002026:	4ba6      	ldr	r3, [pc, #664]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0549      	lsls	r1, r1, #21
 800202c:	430a      	orrs	r2, r1
 800202e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002030:	4ba3      	ldr	r3, [pc, #652]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	055b      	lsls	r3, r3, #21
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800203e:	231f      	movs	r3, #31
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002046:	4b9f      	ldr	r3, [pc, #636]	; (80022c4 <HAL_RCC_OscConfig+0x608>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d11a      	bne.n	8002088 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002052:	4b9c      	ldr	r3, [pc, #624]	; (80022c4 <HAL_RCC_OscConfig+0x608>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b9b      	ldr	r3, [pc, #620]	; (80022c4 <HAL_RCC_OscConfig+0x608>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0049      	lsls	r1, r1, #1
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002060:	f7ff fa8e 	bl	8001580 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7ff fa89 	bl	8001580 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e11c      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207c:	4b91      	ldr	r3, [pc, #580]	; (80022c4 <HAL_RCC_OscConfig+0x608>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4013      	ands	r3, r2
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x3e2>
 8002090:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002092:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002094:	4b8a      	ldr	r3, [pc, #552]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002096:	2101      	movs	r1, #1
 8002098:	430a      	orrs	r2, r1
 800209a:	65da      	str	r2, [r3, #92]	; 0x5c
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0x41c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x404>
 80020a6:	4b86      	ldr	r3, [pc, #536]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80020a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020aa:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80020ac:	2104      	movs	r1, #4
 80020ae:	430a      	orrs	r2, r1
 80020b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80020b2:	4b83      	ldr	r3, [pc, #524]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80020b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	430a      	orrs	r2, r1
 80020bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0x41c>
 80020c0:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80020c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020c4:	4b7e      	ldr	r3, [pc, #504]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	438a      	bics	r2, r1
 80020ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80020cc:	4b7c      	ldr	r3, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80020ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d0:	4b7b      	ldr	r3, [pc, #492]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80020d2:	2104      	movs	r1, #4
 80020d4:	438a      	bics	r2, r1
 80020d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d014      	beq.n	800210a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff fa4e 	bl	8001580 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e8:	e009      	b.n	80020fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7ff fa49 	bl	8001580 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	4a74      	ldr	r2, [pc, #464]	; (80022c8 <HAL_RCC_OscConfig+0x60c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0db      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	2202      	movs	r2, #2
 8002104:	4013      	ands	r3, r2
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x42e>
 8002108:	e013      	b.n	8002132 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7ff fa39 	bl	8001580 <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002112:	e009      	b.n	8002128 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7ff fa34 	bl	8001580 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	4a6a      	ldr	r2, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x60c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0c6      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002128:	4b65      	ldr	r3, [pc, #404]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	2202      	movs	r2, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002132:	231f      	movs	r3, #31
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800213c:	4b60      	ldr	r3, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 800213e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002140:	4b5f      	ldr	r3, [pc, #380]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002142:	4962      	ldr	r1, [pc, #392]	; (80022cc <HAL_RCC_OscConfig+0x610>)
 8002144:	400a      	ands	r2, r1
 8002146:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d100      	bne.n	8002152 <HAL_RCC_OscConfig+0x496>
 8002150:	e0b0      	b.n	80022b4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2238      	movs	r2, #56	; 0x38
 8002158:	4013      	ands	r3, r2
 800215a:	2b10      	cmp	r3, #16
 800215c:	d100      	bne.n	8002160 <HAL_RCC_OscConfig+0x4a4>
 800215e:	e078      	b.n	8002252 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d153      	bne.n	8002210 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002168:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b54      	ldr	r3, [pc, #336]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 800216e:	4958      	ldr	r1, [pc, #352]	; (80022d0 <HAL_RCC_OscConfig+0x614>)
 8002170:	400a      	ands	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff fa04 	bl	8001580 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217e:	f7ff f9ff 	bl	8001580 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e092      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	049b      	lsls	r3, r3, #18
 8002198:	4013      	ands	r3, r2
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_RCC_OscConfig+0x618>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	431a      	orrs	r2, r3
 80021c4:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	0449      	lsls	r1, r1, #17
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80021d8:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0549      	lsls	r1, r1, #21
 80021e2:	430a      	orrs	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff f9cb 	bl	8001580 <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff f9c6 	bl	8001580 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e059      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	049b      	lsls	r3, r3, #18
 800220a:	4013      	ands	r3, r2
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x534>
 800220e:	e051      	b.n	80022b4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002216:	492e      	ldr	r1, [pc, #184]	; (80022d0 <HAL_RCC_OscConfig+0x614>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff f9b0 	bl	8001580 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7ff f9ab 	bl	8001580 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e03e      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	049b      	lsls	r3, r3, #18
 8002240:	4013      	ands	r3, r2
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 800224a:	4923      	ldr	r1, [pc, #140]	; (80022d8 <HAL_RCC_OscConfig+0x61c>)
 800224c:	400a      	ands	r2, r1
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	e030      	b.n	80022b4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e02b      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_RCC_OscConfig+0x604>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2203      	movs	r2, #3
 8002268:	401a      	ands	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	429a      	cmp	r2, r3
 8002270:	d11e      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2270      	movs	r2, #112	; 0x70
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d117      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	23fe      	movs	r3, #254	; 0xfe
 8002284:	01db      	lsls	r3, r3, #7
 8002286:	401a      	ands	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d10e      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	23f8      	movs	r3, #248	; 0xf8
 8002296:	039b      	lsls	r3, r3, #14
 8002298:	401a      	ands	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d106      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	0f5b      	lsrs	r3, r3, #29
 80022a6:	075a      	lsls	r2, r3, #29
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b008      	add	sp, #32
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
 80022c8:	00001388 	.word	0x00001388
 80022cc:	efffffff 	.word	0xefffffff
 80022d0:	feffffff 	.word	0xfeffffff
 80022d4:	1fc1808c 	.word	0x1fc1808c
 80022d8:	effefffc 	.word	0xeffefffc

080022dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0e9      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2207      	movs	r2, #7
 80022f6:	4013      	ands	r3, r2
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d91e      	bls.n	800233c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2207      	movs	r2, #7
 8002304:	4393      	bics	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	4b70      	ldr	r3, [pc, #448]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002310:	f7ff f936 	bl	8001580 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002318:	e009      	b.n	800232e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231a:	f7ff f931 	bl	8001580 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0ca      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2207      	movs	r2, #7
 8002334:	4013      	ands	r3, r2
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d1ee      	bne.n	800231a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d015      	beq.n	8002372 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	d006      	beq.n	800235e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002350:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002356:	21e0      	movs	r1, #224	; 0xe0
 8002358:	01c9      	lsls	r1, r1, #7
 800235a:	430a      	orrs	r2, r1
 800235c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235e:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4a5d      	ldr	r2, [pc, #372]	; (80024d8 <HAL_RCC_ClockConfig+0x1fc>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d057      	beq.n	800242c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d107      	bne.n	8002394 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	029b      	lsls	r3, r3, #10
 800238c:	4013      	ands	r3, r2
 800238e:	d12b      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e097      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d107      	bne.n	80023ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239c:	4b4d      	ldr	r3, [pc, #308]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	049b      	lsls	r3, r3, #18
 80023a4:	4013      	ands	r3, r2
 80023a6:	d11f      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e08b      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4013      	ands	r3, r2
 80023be:	d113      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e07f      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d108      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e074      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e06d      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e8:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2207      	movs	r2, #7
 80023ee:	4393      	bics	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7ff f8c0 	bl	8001580 <HAL_GetTick>
 8002400:	0003      	movs	r3, r0
 8002402:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002404:	e009      	b.n	800241a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002406:	f7ff f8bb 	bl	8001580 <HAL_GetTick>
 800240a:	0002      	movs	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e054      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2238      	movs	r2, #56	; 0x38
 8002420:	401a      	ands	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	429a      	cmp	r2, r3
 800242a:	d1ec      	bne.n	8002406 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2207      	movs	r2, #7
 8002432:	4013      	ands	r3, r2
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d21e      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2207      	movs	r2, #7
 8002440:	4393      	bics	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800244c:	f7ff f898 	bl	8001580 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002454:	e009      	b.n	800246a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002456:	f7ff f893 	bl	8001580 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e02c      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2207      	movs	r2, #7
 8002470:	4013      	ands	r3, r2
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2204      	movs	r2, #4
 800247e:	4013      	ands	r3, r2
 8002480:	d009      	beq.n	8002496 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4a15      	ldr	r2, [pc, #84]	; (80024dc <HAL_RCC_ClockConfig+0x200>)
 8002488:	4013      	ands	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002496:	f000 f829 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 800249a:	0001      	movs	r1, r0
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_RCC_ClockConfig+0x1f8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	220f      	movs	r2, #15
 80024a4:	401a      	ands	r2, r3
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_RCC_ClockConfig+0x204>)
 80024a8:	0092      	lsls	r2, r2, #2
 80024aa:	58d3      	ldr	r3, [r2, r3]
 80024ac:	221f      	movs	r2, #31
 80024ae:	4013      	ands	r3, r2
 80024b0:	000a      	movs	r2, r1
 80024b2:	40da      	lsrs	r2, r3
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x208>)
 80024b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x20c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff f803 	bl	80014c8 <HAL_InitTick>
 80024c2:	0003      	movs	r3, r0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40022000 	.word	0x40022000
 80024d0:	00001388 	.word	0x00001388
 80024d4:	40021000 	.word	0x40021000
 80024d8:	fffff0ff 	.word	0xfffff0ff
 80024dc:	ffff8fff 	.word	0xffff8fff
 80024e0:	080040c8 	.word	0x080040c8
 80024e4:	20000010 	.word	0x20000010
 80024e8:	20000014 	.word	0x20000014

080024ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f2:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2238      	movs	r2, #56	; 0x38
 80024f8:	4013      	ands	r3, r2
 80024fa:	d10f      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0adb      	lsrs	r3, r3, #11
 8002502:	2207      	movs	r2, #7
 8002504:	4013      	ands	r3, r2
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	0013      	movs	r3, r2
 800250c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800250e:	6839      	ldr	r1, [r7, #0]
 8002510:	4835      	ldr	r0, [pc, #212]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002512:	f7fd fdf5 	bl	8000100 <__udivsi3>
 8002516:	0003      	movs	r3, r0
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	e05d      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2238      	movs	r2, #56	; 0x38
 8002522:	4013      	ands	r3, r2
 8002524:	2b08      	cmp	r3, #8
 8002526:	d102      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002528:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_GetSysClockFreq+0x100>)
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e054      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2238      	movs	r2, #56	; 0x38
 8002534:	4013      	ands	r3, r2
 8002536:	2b10      	cmp	r3, #16
 8002538:	d138      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2203      	movs	r2, #3
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	2207      	movs	r2, #7
 800254c:	4013      	ands	r3, r2
 800254e:	3301      	adds	r3, #1
 8002550:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d10d      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	4824      	ldr	r0, [pc, #144]	; (80025ec <HAL_RCC_GetSysClockFreq+0x100>)
 800255c:	f7fd fdd0 	bl	8000100 <__udivsi3>
 8002560:	0003      	movs	r3, r0
 8002562:	0019      	movs	r1, r3
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	227f      	movs	r2, #127	; 0x7f
 800256c:	4013      	ands	r3, r2
 800256e:	434b      	muls	r3, r1
 8002570:	617b      	str	r3, [r7, #20]
        break;
 8002572:	e00d      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	481c      	ldr	r0, [pc, #112]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002578:	f7fd fdc2 	bl	8000100 <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	0019      	movs	r1, r3
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	227f      	movs	r2, #127	; 0x7f
 8002588:	4013      	ands	r3, r2
 800258a:	434b      	muls	r3, r1
 800258c:	617b      	str	r3, [r7, #20]
        break;
 800258e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0f5b      	lsrs	r3, r3, #29
 8002596:	2207      	movs	r2, #7
 8002598:	4013      	ands	r3, r2
 800259a:	3301      	adds	r3, #1
 800259c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	6978      	ldr	r0, [r7, #20]
 80025a2:	f7fd fdad 	bl	8000100 <__udivsi3>
 80025a6:	0003      	movs	r3, r0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e015      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2238      	movs	r2, #56	; 0x38
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d103      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2238      	movs	r2, #56	; 0x38
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b18      	cmp	r3, #24
 80025ca:	d103      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025cc:	23fa      	movs	r3, #250	; 0xfa
 80025ce:	01db      	lsls	r3, r3, #7
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e001      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025d8:	693b      	ldr	r3, [r7, #16]
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b006      	add	sp, #24
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	40021000 	.word	0x40021000
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	007a1200 	.word	0x007a1200

080025f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_RCC_GetHCLKFreq+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	20000010 	.word	0x20000010

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b5b0      	push	{r4, r5, r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002608:	f7ff fff2 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 800260c:	0004      	movs	r4, r0
 800260e:	f7ff fb49 	bl	8001ca4 <LL_RCC_GetAPB1Prescaler>
 8002612:	0003      	movs	r3, r0
 8002614:	0b1a      	lsrs	r2, r3, #12
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	58d3      	ldr	r3, [r2, r3]
 800261c:	221f      	movs	r2, #31
 800261e:	4013      	ands	r3, r2
 8002620:	40dc      	lsrs	r4, r3
 8002622:	0023      	movs	r3, r4
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	bdb0      	pop	{r4, r5, r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	08004108 	.word	0x08004108

08002630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e04a      	b.n	80026d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	223d      	movs	r2, #61	; 0x3d
 8002646:	5c9b      	ldrb	r3, [r3, r2]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d107      	bne.n	800265e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	223c      	movs	r2, #60	; 0x3c
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f7fe fdd3 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	223d      	movs	r2, #61	; 0x3d
 8002662:	2102      	movs	r1, #2
 8002664:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3304      	adds	r3, #4
 800266e:	0019      	movs	r1, r3
 8002670:	0010      	movs	r0, r2
 8002672:	f000 faf1 	bl	8002c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2248      	movs	r2, #72	; 0x48
 800267a:	2101      	movs	r1, #1
 800267c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	223e      	movs	r2, #62	; 0x3e
 8002682:	2101      	movs	r1, #1
 8002684:	5499      	strb	r1, [r3, r2]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	223f      	movs	r2, #63	; 0x3f
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2240      	movs	r2, #64	; 0x40
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2241      	movs	r2, #65	; 0x41
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2242      	movs	r2, #66	; 0x42
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2243      	movs	r2, #67	; 0x43
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2244      	movs	r2, #68	; 0x44
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2245      	movs	r2, #69	; 0x45
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2246      	movs	r2, #70	; 0x46
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2247      	movs	r2, #71	; 0x47
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	223d      	movs	r2, #61	; 0x3d
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	223d      	movs	r2, #61	; 0x3d
 80026ec:	5c9b      	ldrb	r3, [r3, r2]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d001      	beq.n	80026f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e02f      	b.n	8002758 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	223d      	movs	r2, #61	; 0x3d
 80026fc:	2102      	movs	r1, #2
 80026fe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_TIM_Base_Start+0x80>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_TIM_Base_Start+0x34>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_TIM_Base_Start+0x84>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d116      	bne.n	8002742 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_TIM_Base_Start+0x88>)
 800271c:	4013      	ands	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b06      	cmp	r3, #6
 8002724:	d016      	beq.n	8002754 <HAL_TIM_Base_Start+0x74>
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	025b      	lsls	r3, r3, #9
 800272c:	429a      	cmp	r2, r3
 800272e:	d011      	beq.n	8002754 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2101      	movs	r1, #1
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002740:	e008      	b.n	8002754 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e000      	b.n	8002756 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002754:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b004      	add	sp, #16
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40000400 	.word	0x40000400
 8002768:	00010007 	.word	0x00010007

0800276c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	223d      	movs	r2, #61	; 0x3d
 8002778:	5c9b      	ldrb	r3, [r3, r2]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d001      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e037      	b.n	80027f4 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	223d      	movs	r2, #61	; 0x3d
 8002788:	2102      	movs	r1, #2
 800278a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a16      	ldr	r2, [pc, #88]	; (80027fc <HAL_TIM_Base_Start_IT+0x90>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x44>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <HAL_TIM_Base_Start_IT+0x94>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d116      	bne.n	80027de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_TIM_Base_Start_IT+0x98>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d016      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x84>
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	025b      	lsls	r3, r3, #9
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d011      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	e008      	b.n	80027f0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e000      	b.n	80027f2 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40000400 	.word	0x40000400
 8002804:	00010007 	.word	0x00010007

08002808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d124      	bne.n	8002868 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2202      	movs	r2, #2
 8002826:	4013      	ands	r3, r2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d11d      	bne.n	8002868 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2203      	movs	r2, #3
 8002832:	4252      	negs	r2, r2
 8002834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2203      	movs	r2, #3
 8002844:	4013      	ands	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f9ec 	bl	8002c28 <HAL_TIM_IC_CaptureCallback>
 8002850:	e007      	b.n	8002862 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0018      	movs	r0, r3
 8002856:	f000 f9df 	bl	8002c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 f9eb 	bl	8002c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2204      	movs	r2, #4
 8002870:	4013      	ands	r3, r2
 8002872:	2b04      	cmp	r3, #4
 8002874:	d125      	bne.n	80028c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2204      	movs	r2, #4
 800287e:	4013      	ands	r3, r2
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11e      	bne.n	80028c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2205      	movs	r2, #5
 800288a:	4252      	negs	r2, r2
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	23c0      	movs	r3, #192	; 0xc0
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f000 f9bf 	bl	8002c28 <HAL_TIM_IC_CaptureCallback>
 80028aa:	e007      	b.n	80028bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 f9b2 	bl	8002c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f9be 	bl	8002c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2208      	movs	r2, #8
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d124      	bne.n	800291a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2208      	movs	r2, #8
 80028d8:	4013      	ands	r3, r2
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d11d      	bne.n	800291a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2209      	movs	r2, #9
 80028e4:	4252      	negs	r2, r2
 80028e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2204      	movs	r2, #4
 80028ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	2203      	movs	r2, #3
 80028f6:	4013      	ands	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 f993 	bl	8002c28 <HAL_TIM_IC_CaptureCallback>
 8002902:	e007      	b.n	8002914 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f000 f986 	bl	8002c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 f992 	bl	8002c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2210      	movs	r2, #16
 8002922:	4013      	ands	r3, r2
 8002924:	2b10      	cmp	r3, #16
 8002926:	d125      	bne.n	8002974 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2210      	movs	r2, #16
 8002930:	4013      	ands	r3, r2
 8002932:	2b10      	cmp	r3, #16
 8002934:	d11e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2211      	movs	r2, #17
 800293c:	4252      	negs	r2, r2
 800293e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2208      	movs	r2, #8
 8002944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	23c0      	movs	r3, #192	; 0xc0
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4013      	ands	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0018      	movs	r0, r3
 8002958:	f000 f966 	bl	8002c28 <HAL_TIM_IC_CaptureCallback>
 800295c:	e007      	b.n	800296e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0018      	movs	r0, r3
 8002962:	f000 f959 	bl	8002c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f000 f965 	bl	8002c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2201      	movs	r2, #1
 800297c:	4013      	ands	r3, r2
 800297e:	2b01      	cmp	r3, #1
 8002980:	d10f      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	4013      	ands	r3, r2
 800298c:	2b01      	cmp	r3, #1
 800298e:	d108      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2202      	movs	r2, #2
 8002996:	4252      	negs	r2, r2
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	0018      	movs	r0, r3
 800299e:	f7fd fdfd 	bl	800059c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d10f      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b80      	cmp	r3, #128	; 0x80
 80029bc:	d108      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2281      	movs	r2, #129	; 0x81
 80029c4:	4252      	negs	r2, r2
 80029c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fab6 	bl	8002f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	401a      	ands	r2, r3
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d10e      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b80      	cmp	r3, #128	; 0x80
 80029f0:	d107      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_TIM_IRQHandler+0x260>)
 80029f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 faa5 	bl	8002f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d10f      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d108      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2241      	movs	r2, #65	; 0x41
 8002a24:	4252      	negs	r2, r2
 8002a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f90c 	bl	8002c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2220      	movs	r2, #32
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d10f      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d108      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2221      	movs	r2, #33	; 0x21
 8002a52:	4252      	negs	r2, r2
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 fa67 	bl	8002f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	fffffeff 	.word	0xfffffeff

08002a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	230f      	movs	r3, #15
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223c      	movs	r2, #60	; 0x3c
 8002a82:	5c9b      	ldrb	r3, [r3, r2]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_TIM_ConfigClockSource+0x20>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e0bc      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x19a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	223c      	movs	r2, #60	; 0x3c
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223d      	movs	r2, #61	; 0x3d
 8002a98:	2102      	movs	r1, #2
 8002a9a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4a5a      	ldr	r2, [pc, #360]	; (8002c10 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4a59      	ldr	r2, [pc, #356]	; (8002c14 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	0192      	lsls	r2, r2, #6
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d040      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xde>
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	0192      	lsls	r2, r2, #6
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d900      	bls.n	8002ad2 <HAL_TIM_ConfigClockSource+0x66>
 8002ad0:	e088      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	0152      	lsls	r2, r2, #5
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d100      	bne.n	8002adc <HAL_TIM_ConfigClockSource+0x70>
 8002ada:	e088      	b.n	8002bee <HAL_TIM_ConfigClockSource+0x182>
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	0152      	lsls	r2, r2, #5
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d900      	bls.n	8002ae6 <HAL_TIM_ConfigClockSource+0x7a>
 8002ae4:	e07e      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
 8002ae6:	2b70      	cmp	r3, #112	; 0x70
 8002ae8:	d018      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0xb0>
 8002aea:	d900      	bls.n	8002aee <HAL_TIM_ConfigClockSource+0x82>
 8002aec:	e07a      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
 8002aee:	2b60      	cmp	r3, #96	; 0x60
 8002af0:	d04f      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x126>
 8002af2:	d900      	bls.n	8002af6 <HAL_TIM_ConfigClockSource+0x8a>
 8002af4:	e076      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
 8002af6:	2b50      	cmp	r3, #80	; 0x50
 8002af8:	d03b      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0x106>
 8002afa:	d900      	bls.n	8002afe <HAL_TIM_ConfigClockSource+0x92>
 8002afc:	e072      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d057      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0x146>
 8002b02:	d900      	bls.n	8002b06 <HAL_TIM_ConfigClockSource+0x9a>
 8002b04:	e06e      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
 8002b06:	2b30      	cmp	r3, #48	; 0x30
 8002b08:	d063      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x166>
 8002b0a:	d86b      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d060      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x166>
 8002b10:	d868      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d05d      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x166>
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d05b      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x166>
 8002b1a:	e063      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f000 f97c 	bl	8002e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2277      	movs	r2, #119	; 0x77
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	609a      	str	r2, [r3, #8]
      break;
 8002b48:	e052      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f000 f965 	bl	8002e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	01c9      	lsls	r1, r1, #7
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
      break;
 8002b70:	e03e      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	001a      	movs	r2, r3
 8002b80:	f000 f8d6 	bl	8002d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2150      	movs	r1, #80	; 0x50
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 f930 	bl	8002df0 <TIM_ITRx_SetConfig>
      break;
 8002b90:	e02e      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	f000 f8f4 	bl	8002d8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2160      	movs	r1, #96	; 0x60
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f920 	bl	8002df0 <TIM_ITRx_SetConfig>
      break;
 8002bb0:	e01e      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	f000 f8b6 	bl	8002d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2140      	movs	r1, #64	; 0x40
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 f910 	bl	8002df0 <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e00e      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0019      	movs	r1, r3
 8002bdc:	0010      	movs	r0, r2
 8002bde:	f000 f907 	bl	8002df0 <TIM_ITRx_SetConfig>
      break;
 8002be2:	e005      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002be4:	230f      	movs	r3, #15
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
      break;
 8002bec:	e000      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002bee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	223d      	movs	r2, #61	; 0x3d
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	223c      	movs	r2, #60	; 0x3c
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

  return status;
 8002c00:	230f      	movs	r3, #15
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b004      	add	sp, #16
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	ffceff88 	.word	0xffceff88
 8002c14:	ffff00ff 	.word	0xffff00ff

08002c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <TIM_Base_SetConfig+0xc0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0x20>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <TIM_Base_SetConfig+0xc4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2270      	movs	r2, #112	; 0x70
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <TIM_Base_SetConfig+0xc0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00f      	beq.n	8002cb2 <TIM_Base_SetConfig+0x5a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <TIM_Base_SetConfig+0xc4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00b      	beq.n	8002cb2 <TIM_Base_SetConfig+0x5a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <TIM_Base_SetConfig+0xc8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <TIM_Base_SetConfig+0x5a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <TIM_Base_SetConfig+0xcc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_Base_SetConfig+0x5a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <TIM_Base_SetConfig+0xd0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <TIM_Base_SetConfig+0xd4>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	4393      	bics	r3, r2
 8002cca:	001a      	movs	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <TIM_Base_SetConfig+0xc0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_Base_SetConfig+0xaa>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <TIM_Base_SetConfig+0xcc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0xaa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <TIM_Base_SetConfig+0xd0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d103      	bne.n	8002d0a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b004      	add	sp, #16
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40002000 	.word	0x40002000
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800
 8002d2c:	fffffcff 	.word	0xfffffcff

08002d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	2201      	movs	r2, #1
 8002d48:	4393      	bics	r3, r2
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	22f0      	movs	r2, #240	; 0xf0
 8002d5a:	4393      	bics	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	220a      	movs	r2, #10
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b006      	add	sp, #24
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4393      	bics	r3, r2
 8002da0:	001a      	movs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <TIM_TI2_ConfigInputStage+0x60>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	031b      	lsls	r3, r3, #12
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	22a0      	movs	r2, #160	; 0xa0
 8002dc8:	4393      	bics	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b006      	add	sp, #24
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	ffff0fff 	.word	0xffff0fff

08002df0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <TIM_ITRx_SetConfig+0x34>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	2207      	movs	r2, #7
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	609a      	str	r2, [r3, #8]
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	ffcfff8f 	.word	0xffcfff8f

08002e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <TIM_ETR_SetConfig+0x3c>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b006      	add	sp, #24
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	ffff00ff 	.word	0xffff00ff

08002e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	223c      	movs	r2, #60	; 0x3c
 8002e76:	5c9b      	ldrb	r3, [r3, r2]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e04a      	b.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	223c      	movs	r2, #60	; 0x3c
 8002e84:	2101      	movs	r1, #1
 8002e86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	223d      	movs	r2, #61	; 0x3d
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2270      	movs	r2, #112	; 0x70
 8002ec0:	4393      	bics	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10c      	bne.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2280      	movs	r2, #128	; 0x80
 8002eee:	4393      	bics	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	223d      	movs	r2, #61	; 0x3d
 8002f08:	2101      	movs	r1, #1
 8002f0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	223c      	movs	r2, #60	; 0x3c
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	ff0fffff 	.word	0xff0fffff
 8002f28:	40000400 	.word	0x40000400

08002f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e046      	b.n	8002ffc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2288      	movs	r2, #136	; 0x88
 8002f72:	589b      	ldr	r3, [r3, r2]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2284      	movs	r2, #132	; 0x84
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7fe f9b6 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2288      	movs	r2, #136	; 0x88
 8002f8c:	2124      	movs	r1, #36	; 0x24
 8002f8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 fb72 	bl	800368c <UART_SetConfig>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e024      	b.n	8002ffc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 fccf 	bl	8003960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	490d      	ldr	r1, [pc, #52]	; (8003004 <HAL_UART_Init+0xa8>)
 8002fce:	400a      	ands	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	212a      	movs	r1, #42	; 0x2a
 8002fde:	438a      	bics	r2, r1
 8002fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 fd67 	bl	8003ac8 <UART_CheckIdleState>
 8002ffa:	0003      	movs	r3, r0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}
 8003004:	ffffb7ff 	.word	0xffffb7ff

08003008 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b0aa      	sub	sp, #168	; 0xa8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	22a4      	movs	r2, #164	; 0xa4
 8003018:	18b9      	adds	r1, r7, r2
 800301a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	20a0      	movs	r0, #160	; 0xa0
 8003024:	1839      	adds	r1, r7, r0
 8003026:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	249c      	movs	r4, #156	; 0x9c
 8003030:	1939      	adds	r1, r7, r4
 8003032:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003034:	0011      	movs	r1, r2
 8003036:	18bb      	adds	r3, r7, r2
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4aa2      	ldr	r2, [pc, #648]	; (80032c4 <HAL_UART_IRQHandler+0x2bc>)
 800303c:	4013      	ands	r3, r2
 800303e:	2298      	movs	r2, #152	; 0x98
 8003040:	18bd      	adds	r5, r7, r2
 8003042:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003044:	18bb      	adds	r3, r7, r2
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d11a      	bne.n	8003082 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800304c:	187b      	adds	r3, r7, r1
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2220      	movs	r2, #32
 8003052:	4013      	ands	r3, r2
 8003054:	d015      	beq.n	8003082 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003056:	183b      	adds	r3, r7, r0
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	4013      	ands	r3, r2
 800305e:	d105      	bne.n	800306c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003060:	193b      	adds	r3, r7, r4
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	055b      	lsls	r3, r3, #21
 8003068:	4013      	ands	r3, r2
 800306a:	d00a      	beq.n	8003082 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003070:	2b00      	cmp	r3, #0
 8003072:	d100      	bne.n	8003076 <HAL_UART_IRQHandler+0x6e>
 8003074:	e2dc      	b.n	8003630 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	0010      	movs	r0, r2
 800307e:	4798      	blx	r3
      }
      return;
 8003080:	e2d6      	b.n	8003630 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003082:	2398      	movs	r3, #152	; 0x98
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d100      	bne.n	800308e <HAL_UART_IRQHandler+0x86>
 800308c:	e122      	b.n	80032d4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800308e:	239c      	movs	r3, #156	; 0x9c
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a8c      	ldr	r2, [pc, #560]	; (80032c8 <HAL_UART_IRQHandler+0x2c0>)
 8003096:	4013      	ands	r3, r2
 8003098:	d106      	bne.n	80030a8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800309a:	23a0      	movs	r3, #160	; 0xa0
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a8a      	ldr	r2, [pc, #552]	; (80032cc <HAL_UART_IRQHandler+0x2c4>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	d100      	bne.n	80030a8 <HAL_UART_IRQHandler+0xa0>
 80030a6:	e115      	b.n	80032d4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030a8:	23a4      	movs	r3, #164	; 0xa4
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2201      	movs	r2, #1
 80030b0:	4013      	ands	r3, r2
 80030b2:	d012      	beq.n	80030da <HAL_UART_IRQHandler+0xd2>
 80030b4:	23a0      	movs	r3, #160	; 0xa0
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d00b      	beq.n	80030da <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2290      	movs	r2, #144	; 0x90
 80030ce:	589b      	ldr	r3, [r3, r2]
 80030d0:	2201      	movs	r2, #1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2190      	movs	r1, #144	; 0x90
 80030d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030da:	23a4      	movs	r3, #164	; 0xa4
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2202      	movs	r2, #2
 80030e2:	4013      	ands	r3, r2
 80030e4:	d011      	beq.n	800310a <HAL_UART_IRQHandler+0x102>
 80030e6:	239c      	movs	r3, #156	; 0x9c
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2201      	movs	r2, #1
 80030ee:	4013      	ands	r3, r2
 80030f0:	d00b      	beq.n	800310a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2202      	movs	r2, #2
 80030f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2290      	movs	r2, #144	; 0x90
 80030fe:	589b      	ldr	r3, [r3, r2]
 8003100:	2204      	movs	r2, #4
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2190      	movs	r1, #144	; 0x90
 8003108:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800310a:	23a4      	movs	r3, #164	; 0xa4
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2204      	movs	r2, #4
 8003112:	4013      	ands	r3, r2
 8003114:	d011      	beq.n	800313a <HAL_UART_IRQHandler+0x132>
 8003116:	239c      	movs	r3, #156	; 0x9c
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d00b      	beq.n	800313a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2204      	movs	r2, #4
 8003128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2290      	movs	r2, #144	; 0x90
 800312e:	589b      	ldr	r3, [r3, r2]
 8003130:	2202      	movs	r2, #2
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2190      	movs	r1, #144	; 0x90
 8003138:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800313a:	23a4      	movs	r3, #164	; 0xa4
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2208      	movs	r2, #8
 8003142:	4013      	ands	r3, r2
 8003144:	d017      	beq.n	8003176 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003146:	23a0      	movs	r3, #160	; 0xa0
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2220      	movs	r2, #32
 800314e:	4013      	ands	r3, r2
 8003150:	d105      	bne.n	800315e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003152:	239c      	movs	r3, #156	; 0x9c
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5b      	ldr	r2, [pc, #364]	; (80032c8 <HAL_UART_IRQHandler+0x2c0>)
 800315a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800315c:	d00b      	beq.n	8003176 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2208      	movs	r2, #8
 8003164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2290      	movs	r2, #144	; 0x90
 800316a:	589b      	ldr	r3, [r3, r2]
 800316c:	2208      	movs	r2, #8
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2190      	movs	r1, #144	; 0x90
 8003174:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003176:	23a4      	movs	r3, #164	; 0xa4
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	4013      	ands	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_UART_IRQHandler+0x1a4>
 8003184:	23a0      	movs	r3, #160	; 0xa0
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	04db      	lsls	r3, r3, #19
 800318e:	4013      	ands	r3, r2
 8003190:	d00c      	beq.n	80031ac <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	0112      	lsls	r2, r2, #4
 800319a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2290      	movs	r2, #144	; 0x90
 80031a0:	589b      	ldr	r3, [r3, r2]
 80031a2:	2220      	movs	r2, #32
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2190      	movs	r1, #144	; 0x90
 80031aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2290      	movs	r2, #144	; 0x90
 80031b0:	589b      	ldr	r3, [r3, r2]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d100      	bne.n	80031b8 <HAL_UART_IRQHandler+0x1b0>
 80031b6:	e23d      	b.n	8003634 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031b8:	23a4      	movs	r3, #164	; 0xa4
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2220      	movs	r2, #32
 80031c0:	4013      	ands	r3, r2
 80031c2:	d015      	beq.n	80031f0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031c4:	23a0      	movs	r3, #160	; 0xa0
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2220      	movs	r2, #32
 80031cc:	4013      	ands	r3, r2
 80031ce:	d106      	bne.n	80031de <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031d0:	239c      	movs	r3, #156	; 0x9c
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	055b      	lsls	r3, r3, #21
 80031da:	4013      	ands	r3, r2
 80031dc:	d008      	beq.n	80031f0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	0010      	movs	r0, r2
 80031ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2290      	movs	r2, #144	; 0x90
 80031f4:	589b      	ldr	r3, [r3, r2]
 80031f6:	2194      	movs	r1, #148	; 0x94
 80031f8:	187a      	adds	r2, r7, r1
 80031fa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2240      	movs	r2, #64	; 0x40
 8003204:	4013      	ands	r3, r2
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d004      	beq.n	8003214 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800320a:	187b      	adds	r3, r7, r1
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2228      	movs	r2, #40	; 0x28
 8003210:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003212:	d04c      	beq.n	80032ae <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f000 fd6c 	bl	8003cf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2240      	movs	r2, #64	; 0x40
 8003224:	4013      	ands	r3, r2
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d13c      	bne.n	80032a4 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8310 	mrs	r3, PRIMASK
 800322e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	2090      	movs	r0, #144	; 0x90
 8003234:	183a      	adds	r2, r7, r0
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	2301      	movs	r3, #1
 800323a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800323e:	f383 8810 	msr	PRIMASK, r3
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2140      	movs	r1, #64	; 0x40
 8003250:	438a      	bics	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	183b      	adds	r3, r7, r0
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	589b      	ldr	r3, [r3, r2]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d016      	beq.n	800329a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2280      	movs	r2, #128	; 0x80
 8003270:	589b      	ldr	r3, [r3, r2]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_UART_IRQHandler+0x2c8>)
 8003274:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2280      	movs	r2, #128	; 0x80
 800327a:	589b      	ldr	r3, [r3, r2]
 800327c:	0018      	movs	r0, r3
 800327e:	f7fe fac9 	bl	8001814 <HAL_DMA_Abort_IT>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d01c      	beq.n	80032c0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	589b      	ldr	r3, [r3, r2]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	5852      	ldr	r2, [r2, r1]
 8003294:	0010      	movs	r0, r2
 8003296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e012      	b.n	80032c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0018      	movs	r0, r3
 800329e:	f000 f9e1 	bl	8003664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a2:	e00d      	b.n	80032c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 f9dc 	bl	8003664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e008      	b.n	80032c0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 f9d7 	bl	8003664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2290      	movs	r2, #144	; 0x90
 80032ba:	2100      	movs	r1, #0
 80032bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032be:	e1b9      	b.n	8003634 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	46c0      	nop			; (mov r8, r8)
    return;
 80032c2:	e1b7      	b.n	8003634 <HAL_UART_IRQHandler+0x62c>
 80032c4:	0000080f 	.word	0x0000080f
 80032c8:	10000001 	.word	0x10000001
 80032cc:	04000120 	.word	0x04000120
 80032d0:	08003dc1 	.word	0x08003dc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d000      	beq.n	80032de <HAL_UART_IRQHandler+0x2d6>
 80032dc:	e13e      	b.n	800355c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032de:	23a4      	movs	r3, #164	; 0xa4
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2210      	movs	r2, #16
 80032e6:	4013      	ands	r3, r2
 80032e8:	d100      	bne.n	80032ec <HAL_UART_IRQHandler+0x2e4>
 80032ea:	e137      	b.n	800355c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032ec:	23a0      	movs	r3, #160	; 0xa0
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2210      	movs	r2, #16
 80032f4:	4013      	ands	r3, r2
 80032f6:	d100      	bne.n	80032fa <HAL_UART_IRQHandler+0x2f2>
 80032f8:	e130      	b.n	800355c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2210      	movs	r2, #16
 8003300:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2240      	movs	r2, #64	; 0x40
 800330a:	4013      	ands	r3, r2
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d000      	beq.n	8003312 <HAL_UART_IRQHandler+0x30a>
 8003310:	e0a4      	b.n	800345c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	589b      	ldr	r3, [r3, r2]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	217e      	movs	r1, #126	; 0x7e
 800331e:	187b      	adds	r3, r7, r1
 8003320:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003322:	187b      	adds	r3, r7, r1
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d100      	bne.n	800332c <HAL_UART_IRQHandler+0x324>
 800332a:	e185      	b.n	8003638 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	225c      	movs	r2, #92	; 0x5c
 8003330:	5a9b      	ldrh	r3, [r3, r2]
 8003332:	187a      	adds	r2, r7, r1
 8003334:	8812      	ldrh	r2, [r2, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d300      	bcc.n	800333c <HAL_UART_IRQHandler+0x334>
 800333a:	e17d      	b.n	8003638 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	187a      	adds	r2, r7, r1
 8003340:	215e      	movs	r1, #94	; 0x5e
 8003342:	8812      	ldrh	r2, [r2, #0]
 8003344:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	589b      	ldr	r3, [r3, r2]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2220      	movs	r2, #32
 8003352:	4013      	ands	r3, r2
 8003354:	d170      	bne.n	8003438 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800335e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003360:	2301      	movs	r3, #1
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	49b4      	ldr	r1, [pc, #720]	; (8003648 <HAL_UART_IRQHandler+0x640>)
 8003378:	400a      	ands	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003388:	f3ef 8310 	mrs	r3, PRIMASK
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800338e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003390:	677b      	str	r3, [r7, #116]	; 0x74
 8003392:	2301      	movs	r3, #1
 8003394:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	438a      	bics	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ba:	f3ef 8310 	mrs	r3, PRIMASK
 80033be:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80033c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033c2:	673b      	str	r3, [r7, #112]	; 0x70
 80033c4:	2301      	movs	r3, #1
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2140      	movs	r1, #64	; 0x40
 80033dc:	438a      	bics	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e6:	f383 8810 	msr	PRIMASK, r3
}
 80033ea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	228c      	movs	r2, #140	; 0x8c
 80033f0:	2120      	movs	r1, #32
 80033f2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fa:	f3ef 8310 	mrs	r3, PRIMASK
 80033fe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003400:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003402:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003404:	2301      	movs	r3, #1
 8003406:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340a:	f383 8810 	msr	PRIMASK, r3
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2110      	movs	r1, #16
 800341c:	438a      	bics	r2, r1
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003422:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003426:	f383 8810 	msr	PRIMASK, r3
}
 800342a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	589b      	ldr	r3, [r3, r2]
 8003432:	0018      	movs	r0, r3
 8003434:	f7fe f98c 	bl	8001750 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	225c      	movs	r2, #92	; 0x5c
 8003442:	5a9a      	ldrh	r2, [r3, r2]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	215e      	movs	r1, #94	; 0x5e
 8003448:	5a5b      	ldrh	r3, [r3, r1]
 800344a:	b29b      	uxth	r3, r3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0011      	movs	r1, r2
 8003454:	0018      	movs	r0, r3
 8003456:	f000 f90d 	bl	8003674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800345a:	e0ed      	b.n	8003638 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	225c      	movs	r2, #92	; 0x5c
 8003460:	5a99      	ldrh	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	225e      	movs	r2, #94	; 0x5e
 8003466:	5a9b      	ldrh	r3, [r3, r2]
 8003468:	b29a      	uxth	r2, r3
 800346a:	208e      	movs	r0, #142	; 0x8e
 800346c:	183b      	adds	r3, r7, r0
 800346e:	1a8a      	subs	r2, r1, r2
 8003470:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	225e      	movs	r2, #94	; 0x5e
 8003476:	5a9b      	ldrh	r3, [r3, r2]
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d100      	bne.n	8003480 <HAL_UART_IRQHandler+0x478>
 800347e:	e0dd      	b.n	800363c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003480:	183b      	adds	r3, r7, r0
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d100      	bne.n	800348a <HAL_UART_IRQHandler+0x482>
 8003488:	e0d8      	b.n	800363c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348a:	f3ef 8310 	mrs	r3, PRIMASK
 800348e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003490:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003492:	2488      	movs	r4, #136	; 0x88
 8003494:	193a      	adds	r2, r7, r4
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	2301      	movs	r3, #1
 800349a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f383 8810 	msr	PRIMASK, r3
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4967      	ldr	r1, [pc, #412]	; (800364c <HAL_UART_IRQHandler+0x644>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c2:	f3ef 8310 	mrs	r3, PRIMASK
 80034c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80034c8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034ca:	2484      	movs	r4, #132	; 0x84
 80034cc:	193a      	adds	r2, r7, r4
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	2301      	movs	r3, #1
 80034d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f383 8810 	msr	PRIMASK, r3
}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	495a      	ldr	r1, [pc, #360]	; (8003650 <HAL_UART_IRQHandler+0x648>)
 80034e8:	400a      	ands	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	228c      	movs	r2, #140	; 0x8c
 80034fe:	2120      	movs	r1, #32
 8003500:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350e:	f3ef 8310 	mrs	r3, PRIMASK
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003516:	2480      	movs	r4, #128	; 0x80
 8003518:	193a      	adds	r2, r7, r4
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	2301      	movs	r3, #1
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2110      	movs	r1, #16
 8003534:	438a      	bics	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	193b      	adds	r3, r7, r4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800354c:	183b      	adds	r3, r7, r0
 800354e:	881a      	ldrh	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0011      	movs	r1, r2
 8003554:	0018      	movs	r0, r3
 8003556:	f000 f88d 	bl	8003674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800355a:	e06f      	b.n	800363c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800355c:	23a4      	movs	r3, #164	; 0xa4
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	035b      	lsls	r3, r3, #13
 8003566:	4013      	ands	r3, r2
 8003568:	d010      	beq.n	800358c <HAL_UART_IRQHandler+0x584>
 800356a:	239c      	movs	r3, #156	; 0x9c
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	03db      	lsls	r3, r3, #15
 8003574:	4013      	ands	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	0352      	lsls	r2, r2, #13
 8003580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fc5e 	bl	8003e46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800358a:	e05a      	b.n	8003642 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800358c:	23a4      	movs	r3, #164	; 0xa4
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	4013      	ands	r3, r2
 8003596:	d016      	beq.n	80035c6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003598:	23a0      	movs	r3, #160	; 0xa0
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	4013      	ands	r3, r2
 80035a2:	d106      	bne.n	80035b2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80035a4:	239c      	movs	r3, #156	; 0x9c
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	4013      	ands	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d042      	beq.n	8003640 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	0010      	movs	r0, r2
 80035c2:	4798      	blx	r3
    }
    return;
 80035c4:	e03c      	b.n	8003640 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035c6:	23a4      	movs	r3, #164	; 0xa4
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2240      	movs	r2, #64	; 0x40
 80035ce:	4013      	ands	r3, r2
 80035d0:	d00a      	beq.n	80035e8 <HAL_UART_IRQHandler+0x5e0>
 80035d2:	23a0      	movs	r3, #160	; 0xa0
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2240      	movs	r2, #64	; 0x40
 80035da:	4013      	ands	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 fc04 	bl	8003dee <UART_EndTransmit_IT>
    return;
 80035e6:	e02c      	b.n	8003642 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80035e8:	23a4      	movs	r3, #164	; 0xa4
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	4013      	ands	r3, r2
 80035f4:	d00b      	beq.n	800360e <HAL_UART_IRQHandler+0x606>
 80035f6:	23a0      	movs	r3, #160	; 0xa0
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	05db      	lsls	r3, r3, #23
 8003600:	4013      	ands	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fc2d 	bl	8003e66 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800360c:	e019      	b.n	8003642 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800360e:	23a4      	movs	r3, #164	; 0xa4
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	045b      	lsls	r3, r3, #17
 8003618:	4013      	ands	r3, r2
 800361a:	d012      	beq.n	8003642 <HAL_UART_IRQHandler+0x63a>
 800361c:	23a0      	movs	r3, #160	; 0xa0
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	da0d      	bge.n	8003642 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f000 fc14 	bl	8003e56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800362e:	e008      	b.n	8003642 <HAL_UART_IRQHandler+0x63a>
      return;
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	e006      	b.n	8003642 <HAL_UART_IRQHandler+0x63a>
    return;
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	e004      	b.n	8003642 <HAL_UART_IRQHandler+0x63a>
      return;
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	e002      	b.n	8003642 <HAL_UART_IRQHandler+0x63a>
      return;
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	e000      	b.n	8003642 <HAL_UART_IRQHandler+0x63a>
    return;
 8003640:	46c0      	nop			; (mov r8, r8)
  }
}
 8003642:	46bd      	mov	sp, r7
 8003644:	b02a      	add	sp, #168	; 0xa8
 8003646:	bdb0      	pop	{r4, r5, r7, pc}
 8003648:	fffffeff 	.word	0xfffffeff
 800364c:	fffffedf 	.word	0xfffffedf
 8003650:	effffffe 	.word	0xeffffffe

08003654 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	000a      	movs	r2, r1
 800367e:	1cbb      	adds	r3, r7, #2
 8003680:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003694:	231a      	movs	r3, #26
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4aa1      	ldr	r2, [pc, #644]	; (8003940 <UART_SetConfig+0x2b4>)
 80036bc:	4013      	ands	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a9c      	ldr	r2, [pc, #624]	; (8003944 <UART_SetConfig+0x2b8>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a93      	ldr	r2, [pc, #588]	; (8003948 <UART_SetConfig+0x2bc>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	220f      	movs	r2, #15
 8003710:	4393      	bics	r3, r2
 8003712:	0019      	movs	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a89      	ldr	r2, [pc, #548]	; (800394c <UART_SetConfig+0x2c0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d127      	bne.n	800377a <UART_SetConfig+0xee>
 800372a:	4b89      	ldr	r3, [pc, #548]	; (8003950 <UART_SetConfig+0x2c4>)
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	2203      	movs	r2, #3
 8003730:	4013      	ands	r3, r2
 8003732:	2b03      	cmp	r3, #3
 8003734:	d017      	beq.n	8003766 <UART_SetConfig+0xda>
 8003736:	d81b      	bhi.n	8003770 <UART_SetConfig+0xe4>
 8003738:	2b02      	cmp	r3, #2
 800373a:	d00a      	beq.n	8003752 <UART_SetConfig+0xc6>
 800373c:	d818      	bhi.n	8003770 <UART_SetConfig+0xe4>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <UART_SetConfig+0xbc>
 8003742:	2b01      	cmp	r3, #1
 8003744:	d00a      	beq.n	800375c <UART_SetConfig+0xd0>
 8003746:	e013      	b.n	8003770 <UART_SetConfig+0xe4>
 8003748:	231b      	movs	r3, #27
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e021      	b.n	8003796 <UART_SetConfig+0x10a>
 8003752:	231b      	movs	r3, #27
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e01c      	b.n	8003796 <UART_SetConfig+0x10a>
 800375c:	231b      	movs	r3, #27
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2204      	movs	r2, #4
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e017      	b.n	8003796 <UART_SetConfig+0x10a>
 8003766:	231b      	movs	r3, #27
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	2208      	movs	r2, #8
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e012      	b.n	8003796 <UART_SetConfig+0x10a>
 8003770:	231b      	movs	r3, #27
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2210      	movs	r2, #16
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e00d      	b.n	8003796 <UART_SetConfig+0x10a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a75      	ldr	r2, [pc, #468]	; (8003954 <UART_SetConfig+0x2c8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d104      	bne.n	800378e <UART_SetConfig+0x102>
 8003784:	231b      	movs	r3, #27
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e003      	b.n	8003796 <UART_SetConfig+0x10a>
 800378e:	231b      	movs	r3, #27
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	2210      	movs	r2, #16
 8003794:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	429a      	cmp	r2, r3
 80037a0:	d000      	beq.n	80037a4 <UART_SetConfig+0x118>
 80037a2:	e065      	b.n	8003870 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80037a4:	231b      	movs	r3, #27
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d015      	beq.n	80037da <UART_SetConfig+0x14e>
 80037ae:	dc18      	bgt.n	80037e2 <UART_SetConfig+0x156>
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d00d      	beq.n	80037d0 <UART_SetConfig+0x144>
 80037b4:	dc15      	bgt.n	80037e2 <UART_SetConfig+0x156>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <UART_SetConfig+0x134>
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d005      	beq.n	80037ca <UART_SetConfig+0x13e>
 80037be:	e010      	b.n	80037e2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c0:	f7fe ff20 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 80037c4:	0003      	movs	r3, r0
 80037c6:	617b      	str	r3, [r7, #20]
        break;
 80037c8:	e012      	b.n	80037f0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ca:	4b63      	ldr	r3, [pc, #396]	; (8003958 <UART_SetConfig+0x2cc>)
 80037cc:	617b      	str	r3, [r7, #20]
        break;
 80037ce:	e00f      	b.n	80037f0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037d0:	f7fe fe8c 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80037d4:	0003      	movs	r3, r0
 80037d6:	617b      	str	r3, [r7, #20]
        break;
 80037d8:	e00a      	b.n	80037f0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	617b      	str	r3, [r7, #20]
        break;
 80037e0:	e006      	b.n	80037f0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037e6:	231a      	movs	r3, #26
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
        break;
 80037ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d100      	bne.n	80037f8 <UART_SetConfig+0x16c>
 80037f6:	e08d      	b.n	8003914 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fc:	4b57      	ldr	r3, [pc, #348]	; (800395c <UART_SetConfig+0x2d0>)
 80037fe:	0052      	lsls	r2, r2, #1
 8003800:	5ad3      	ldrh	r3, [r2, r3]
 8003802:	0019      	movs	r1, r3
 8003804:	6978      	ldr	r0, [r7, #20]
 8003806:	f7fc fc7b 	bl	8000100 <__udivsi3>
 800380a:	0003      	movs	r3, r0
 800380c:	005a      	lsls	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	18d2      	adds	r2, r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	0019      	movs	r1, r3
 800381c:	0010      	movs	r0, r2
 800381e:	f7fc fc6f 	bl	8000100 <__udivsi3>
 8003822:	0003      	movs	r3, r0
 8003824:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b0f      	cmp	r3, #15
 800382a:	d91c      	bls.n	8003866 <UART_SetConfig+0x1da>
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	025b      	lsls	r3, r3, #9
 8003832:	429a      	cmp	r2, r3
 8003834:	d217      	bcs.n	8003866 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	b29a      	uxth	r2, r3
 800383a:	200e      	movs	r0, #14
 800383c:	183b      	adds	r3, r7, r0
 800383e:	210f      	movs	r1, #15
 8003840:	438a      	bics	r2, r1
 8003842:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	b29b      	uxth	r3, r3
 800384a:	2207      	movs	r2, #7
 800384c:	4013      	ands	r3, r2
 800384e:	b299      	uxth	r1, r3
 8003850:	183b      	adds	r3, r7, r0
 8003852:	183a      	adds	r2, r7, r0
 8003854:	8812      	ldrh	r2, [r2, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	183a      	adds	r2, r7, r0
 8003860:	8812      	ldrh	r2, [r2, #0]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	e056      	b.n	8003914 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003866:	231a      	movs	r3, #26
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2201      	movs	r2, #1
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	e051      	b.n	8003914 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003870:	231b      	movs	r3, #27
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b08      	cmp	r3, #8
 8003878:	d015      	beq.n	80038a6 <UART_SetConfig+0x21a>
 800387a:	dc18      	bgt.n	80038ae <UART_SetConfig+0x222>
 800387c:	2b04      	cmp	r3, #4
 800387e:	d00d      	beq.n	800389c <UART_SetConfig+0x210>
 8003880:	dc15      	bgt.n	80038ae <UART_SetConfig+0x222>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <UART_SetConfig+0x200>
 8003886:	2b02      	cmp	r3, #2
 8003888:	d005      	beq.n	8003896 <UART_SetConfig+0x20a>
 800388a:	e010      	b.n	80038ae <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800388c:	f7fe feba 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8003890:	0003      	movs	r3, r0
 8003892:	617b      	str	r3, [r7, #20]
        break;
 8003894:	e012      	b.n	80038bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003896:	4b30      	ldr	r3, [pc, #192]	; (8003958 <UART_SetConfig+0x2cc>)
 8003898:	617b      	str	r3, [r7, #20]
        break;
 800389a:	e00f      	b.n	80038bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389c:	f7fe fe26 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80038a0:	0003      	movs	r3, r0
 80038a2:	617b      	str	r3, [r7, #20]
        break;
 80038a4:	e00a      	b.n	80038bc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	617b      	str	r3, [r7, #20]
        break;
 80038ac:	e006      	b.n	80038bc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038b2:	231a      	movs	r3, #26
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
        break;
 80038ba:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d028      	beq.n	8003914 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c6:	4b25      	ldr	r3, [pc, #148]	; (800395c <UART_SetConfig+0x2d0>)
 80038c8:	0052      	lsls	r2, r2, #1
 80038ca:	5ad3      	ldrh	r3, [r2, r3]
 80038cc:	0019      	movs	r1, r3
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	f7fc fc16 	bl	8000100 <__udivsi3>
 80038d4:	0003      	movs	r3, r0
 80038d6:	001a      	movs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	18d2      	adds	r2, r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	0019      	movs	r1, r3
 80038e6:	0010      	movs	r0, r2
 80038e8:	f7fc fc0a 	bl	8000100 <__udivsi3>
 80038ec:	0003      	movs	r3, r0
 80038ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d90a      	bls.n	800390c <UART_SetConfig+0x280>
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	025b      	lsls	r3, r3, #9
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d205      	bcs.n	800390c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	e003      	b.n	8003914 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800390c:	231a      	movs	r3, #26
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	226a      	movs	r2, #106	; 0x6a
 8003918:	2101      	movs	r1, #1
 800391a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2268      	movs	r2, #104	; 0x68
 8003920:	2101      	movs	r1, #1
 8003922:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003930:	231a      	movs	r3, #26
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	781b      	ldrb	r3, [r3, #0]
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b008      	add	sp, #32
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	cfff69f3 	.word	0xcfff69f3
 8003944:	ffffcfff 	.word	0xffffcfff
 8003948:	11fff4ff 	.word	0x11fff4ff
 800394c:	40013800 	.word	0x40013800
 8003950:	40021000 	.word	0x40021000
 8003954:	40004400 	.word	0x40004400
 8003958:	00f42400 	.word	0x00f42400
 800395c:	08004128 	.word	0x08004128

08003960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	d00b      	beq.n	800398a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a4a      	ldr	r2, [pc, #296]	; (8003aa4 <UART_AdvFeatureConfig+0x144>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	2202      	movs	r2, #2
 8003990:	4013      	ands	r3, r2
 8003992:	d00b      	beq.n	80039ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4a43      	ldr	r2, [pc, #268]	; (8003aa8 <UART_AdvFeatureConfig+0x148>)
 800399c:	4013      	ands	r3, r2
 800399e:	0019      	movs	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	2204      	movs	r2, #4
 80039b2:	4013      	ands	r3, r2
 80039b4:	d00b      	beq.n	80039ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <UART_AdvFeatureConfig+0x14c>)
 80039be:	4013      	ands	r3, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	2208      	movs	r2, #8
 80039d4:	4013      	ands	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <UART_AdvFeatureConfig+0x150>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	0019      	movs	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	2210      	movs	r2, #16
 80039f6:	4013      	ands	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <UART_AdvFeatureConfig+0x154>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	2220      	movs	r2, #32
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4a25      	ldr	r2, [pc, #148]	; (8003ab8 <UART_AdvFeatureConfig+0x158>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	0019      	movs	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a1d      	ldr	r2, [pc, #116]	; (8003abc <UART_AdvFeatureConfig+0x15c>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	035b      	lsls	r3, r3, #13
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d10b      	bne.n	8003a7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <UART_AdvFeatureConfig+0x160>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	2280      	movs	r2, #128	; 0x80
 8003a80:	4013      	ands	r3, r2
 8003a82:	d00b      	beq.n	8003a9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <UART_AdvFeatureConfig+0x164>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  }
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	fffdffff 	.word	0xfffdffff
 8003aa8:	fffeffff 	.word	0xfffeffff
 8003aac:	fffbffff 	.word	0xfffbffff
 8003ab0:	ffff7fff 	.word	0xffff7fff
 8003ab4:	ffffefff 	.word	0xffffefff
 8003ab8:	ffffdfff 	.word	0xffffdfff
 8003abc:	ffefffff 	.word	0xffefffff
 8003ac0:	ff9fffff 	.word	0xff9fffff
 8003ac4:	fff7ffff 	.word	0xfff7ffff

08003ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2290      	movs	r2, #144	; 0x90
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad8:	f7fd fd52 	bl	8001580 <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d10c      	bne.n	8003b08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	0391      	lsls	r1, r2, #14
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <UART_CheckIdleState+0x98>)
 8003af8:	9200      	str	r2, [sp, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f000 f832 	bl	8003b64 <UART_WaitOnFlagUntilTimeout>
 8003b00:	1e03      	subs	r3, r0, #0
 8003b02:	d001      	beq.n	8003b08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e026      	b.n	8003b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d10c      	bne.n	8003b30 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	03d1      	lsls	r1, r2, #15
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <UART_CheckIdleState+0x98>)
 8003b20:	9200      	str	r2, [sp, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f000 f81e 	bl	8003b64 <UART_WaitOnFlagUntilTimeout>
 8003b28:	1e03      	subs	r3, r0, #0
 8003b2a:	d001      	beq.n	8003b30 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e012      	b.n	8003b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2288      	movs	r2, #136	; 0x88
 8003b34:	2120      	movs	r1, #32
 8003b36:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	228c      	movs	r2, #140	; 0x8c
 8003b3c:	2120      	movs	r1, #32
 8003b3e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2284      	movs	r2, #132	; 0x84
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	01ffffff 	.word	0x01ffffff

08003b64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b094      	sub	sp, #80	; 0x50
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	1dfb      	adds	r3, r7, #7
 8003b72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b74:	e0a7      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b78:	3301      	adds	r3, #1
 8003b7a:	d100      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b7c:	e0a3      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7fd fcff 	bl	8001580 <HAL_GetTick>
 8003b82:	0002      	movs	r2, r0
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d13f      	bne.n	8003c14 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	494e      	ldr	r1, [pc, #312]	; (8003cf0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	f383 8810 	msr	PRIMASK, r3
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2101      	movs	r1, #1
 8003be8:	438a      	bics	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf2:	f383 8810 	msr	PRIMASK, r3
}
 8003bf6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2288      	movs	r2, #136	; 0x88
 8003bfc:	2120      	movs	r1, #32
 8003bfe:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	228c      	movs	r2, #140	; 0x8c
 8003c04:	2120      	movs	r1, #32
 8003c06:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2284      	movs	r2, #132	; 0x84
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e069      	b.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d052      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d148      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	0112      	lsls	r2, r2, #4
 8003c3c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	613b      	str	r3, [r7, #16]
  return(result);
 8003c44:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c48:	2301      	movs	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4924      	ldr	r1, [pc, #144]	; (8003cf0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c70:	f3ef 8310 	mrs	r3, PRIMASK
 8003c74:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c76:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	438a      	bics	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2288      	movs	r2, #136	; 0x88
 8003ca6:	2120      	movs	r1, #32
 8003ca8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	228c      	movs	r2, #140	; 0x8c
 8003cae:	2120      	movs	r1, #32
 8003cb0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2290      	movs	r2, #144	; 0x90
 8003cb6:	2120      	movs	r1, #32
 8003cb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2284      	movs	r2, #132	; 0x84
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e010      	b.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	425a      	negs	r2, r3
 8003cd6:	4153      	adcs	r3, r2
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	001a      	movs	r2, r3
 8003cdc:	1dfb      	adds	r3, r7, #7
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d100      	bne.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x182>
 8003ce4:	e747      	b.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b014      	add	sp, #80	; 0x50
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	fffffe5f 	.word	0xfffffe5f

08003cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08e      	sub	sp, #56	; 0x38
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	617b      	str	r3, [r7, #20]
  return(result);
 8003d02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4926      	ldr	r1, [pc, #152]	; (8003db8 <UART_EndRxTransfer+0xc4>)
 8003d1e:	400a      	ands	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d32:	623b      	str	r3, [r7, #32]
  return(result);
 8003d34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30
 8003d38:	2301      	movs	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	491b      	ldr	r1, [pc, #108]	; (8003dbc <UART_EndRxTransfer+0xc8>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	f383 8810 	msr	PRIMASK, r3
}
 8003d5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d118      	bne.n	8003d9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d68:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d72:	2301      	movs	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2110      	movs	r1, #16
 8003d8a:	438a      	bics	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f383 8810 	msr	PRIMASK, r3
}
 8003d98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	228c      	movs	r2, #140	; 0x8c
 8003d9e:	2120      	movs	r1, #32
 8003da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b00e      	add	sp, #56	; 0x38
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	fffffedf 	.word	0xfffffedf
 8003dbc:	effffffe 	.word	0xeffffffe

08003dc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	225e      	movs	r2, #94	; 0x5e
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2256      	movs	r2, #86	; 0x56
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff fc3f 	bl	8003664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b004      	add	sp, #16
 8003dec:	bd80      	pop	{r7, pc}

08003dee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	2301      	movs	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f383 8810 	msr	PRIMASK, r3
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2140      	movs	r1, #64	; 0x40
 8003e18:	438a      	bics	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f383 8810 	msr	PRIMASK, r3
}
 8003e26:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2288      	movs	r2, #136	; 0x88
 8003e2c:	2120      	movs	r1, #32
 8003e2e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7ff fc0b 	bl	8003654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b006      	add	sp, #24
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b002      	add	sp, #8
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b002      	add	sp, #8
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	4d0c      	ldr	r5, [pc, #48]	; (8003eb0 <__libc_init_array+0x38>)
 8003e7e:	4c0d      	ldr	r4, [pc, #52]	; (8003eb4 <__libc_init_array+0x3c>)
 8003e80:	1b64      	subs	r4, r4, r5
 8003e82:	10a4      	asrs	r4, r4, #2
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	2600      	movs	r6, #0
 8003e8a:	f000 f82b 	bl	8003ee4 <_init>
 8003e8e:	4d0a      	ldr	r5, [pc, #40]	; (8003eb8 <__libc_init_array+0x40>)
 8003e90:	4c0a      	ldr	r4, [pc, #40]	; (8003ebc <__libc_init_array+0x44>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	00b3      	lsls	r3, r6, #2
 8003e9e:	58eb      	ldr	r3, [r5, r3]
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	00b3      	lsls	r3, r6, #2
 8003ea8:	58eb      	ldr	r3, [r5, r3]
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	08004140 	.word	0x08004140
 8003eb4:	08004140 	.word	0x08004140
 8003eb8:	08004140 	.word	0x08004140
 8003ebc:	08004144 	.word	0x08004144

08003ec0 <memcpy>:
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d100      	bne.n	8003eca <memcpy+0xa>
 8003ec8:	bd10      	pop	{r4, pc}
 8003eca:	5ccc      	ldrb	r4, [r1, r3]
 8003ecc:	54c4      	strb	r4, [r0, r3]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	e7f8      	b.n	8003ec4 <memcpy+0x4>

08003ed2 <memset>:
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	1882      	adds	r2, r0, r2
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d100      	bne.n	8003edc <memset+0xa>
 8003eda:	4770      	bx	lr
 8003edc:	7019      	strb	r1, [r3, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	e7f9      	b.n	8003ed6 <memset+0x4>
	...

08003ee4 <_init>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr

08003ef0 <_fini>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr
