
low_pass_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e4c  08004e4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e4c  08004e4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e4c  08004e4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000010  08004e60  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004e60  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130cf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ce  00000000  00000000  00033103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ae60  00000000  00000000  000357d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  00040638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001458  00000000  00000000  00040e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000157e4  00000000  00000000  000422b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125a3  00000000  00000000  00057a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088f25  00000000  00000000  0006a03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f2f64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ae0  00000000  00000000  000f2fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004d28 	.word	0x08004d28

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004d28 	.word	0x08004d28

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_f2uiz>:
 80003ec:	219e      	movs	r1, #158	; 0x9e
 80003ee:	b510      	push	{r4, lr}
 80003f0:	05c9      	lsls	r1, r1, #23
 80003f2:	1c04      	adds	r4, r0, #0
 80003f4:	f001 ff38 	bl	8002268 <__aeabi_fcmpge>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d103      	bne.n	8000404 <__aeabi_f2uiz+0x18>
 80003fc:	1c20      	adds	r0, r4, #0
 80003fe:	f000 fc9d 	bl	8000d3c <__aeabi_f2iz>
 8000402:	bd10      	pop	{r4, pc}
 8000404:	219e      	movs	r1, #158	; 0x9e
 8000406:	1c20      	adds	r0, r4, #0
 8000408:	05c9      	lsls	r1, r1, #23
 800040a:	f000 fae9 	bl	80009e0 <__aeabi_fsub>
 800040e:	f000 fc95 	bl	8000d3c <__aeabi_f2iz>
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	061b      	lsls	r3, r3, #24
 8000416:	469c      	mov	ip, r3
 8000418:	4460      	add	r0, ip
 800041a:	e7f2      	b.n	8000402 <__aeabi_f2uiz+0x16>

0800041c <__aeabi_d2uiz>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	2200      	movs	r2, #0
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <__aeabi_d2uiz+0x38>)
 8000422:	0004      	movs	r4, r0
 8000424:	000d      	movs	r5, r1
 8000426:	f001 fee5 	bl	80021f4 <__aeabi_dcmpge>
 800042a:	2800      	cmp	r0, #0
 800042c:	d104      	bne.n	8000438 <__aeabi_d2uiz+0x1c>
 800042e:	0020      	movs	r0, r4
 8000430:	0029      	movs	r1, r5
 8000432:	f001 fe1f 	bl	8002074 <__aeabi_d2iz>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <__aeabi_d2uiz+0x38>)
 800043a:	2200      	movs	r2, #0
 800043c:	0020      	movs	r0, r4
 800043e:	0029      	movs	r1, r5
 8000440:	f001 fa86 	bl	8001950 <__aeabi_dsub>
 8000444:	f001 fe16 	bl	8002074 <__aeabi_d2iz>
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	061b      	lsls	r3, r3, #24
 800044c:	469c      	mov	ip, r3
 800044e:	4460      	add	r0, ip
 8000450:	e7f1      	b.n	8000436 <__aeabi_d2uiz+0x1a>
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	41e00000 	.word	0x41e00000

08000458 <__aeabi_fadd>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46c6      	mov	lr, r8
 800045c:	0243      	lsls	r3, r0, #9
 800045e:	0a5b      	lsrs	r3, r3, #9
 8000460:	024e      	lsls	r6, r1, #9
 8000462:	0045      	lsls	r5, r0, #1
 8000464:	004f      	lsls	r7, r1, #1
 8000466:	00da      	lsls	r2, r3, #3
 8000468:	0fc4      	lsrs	r4, r0, #31
 800046a:	469c      	mov	ip, r3
 800046c:	0a70      	lsrs	r0, r6, #9
 800046e:	4690      	mov	r8, r2
 8000470:	b500      	push	{lr}
 8000472:	0e2d      	lsrs	r5, r5, #24
 8000474:	0e3f      	lsrs	r7, r7, #24
 8000476:	0fc9      	lsrs	r1, r1, #31
 8000478:	09b6      	lsrs	r6, r6, #6
 800047a:	428c      	cmp	r4, r1
 800047c:	d04b      	beq.n	8000516 <__aeabi_fadd+0xbe>
 800047e:	1bea      	subs	r2, r5, r7
 8000480:	2a00      	cmp	r2, #0
 8000482:	dd36      	ble.n	80004f2 <__aeabi_fadd+0x9a>
 8000484:	2f00      	cmp	r7, #0
 8000486:	d061      	beq.n	800054c <__aeabi_fadd+0xf4>
 8000488:	2dff      	cmp	r5, #255	; 0xff
 800048a:	d100      	bne.n	800048e <__aeabi_fadd+0x36>
 800048c:	e0ad      	b.n	80005ea <__aeabi_fadd+0x192>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	04db      	lsls	r3, r3, #19
 8000492:	431e      	orrs	r6, r3
 8000494:	2a1b      	cmp	r2, #27
 8000496:	dc00      	bgt.n	800049a <__aeabi_fadd+0x42>
 8000498:	e0d3      	b.n	8000642 <__aeabi_fadd+0x1ea>
 800049a:	2001      	movs	r0, #1
 800049c:	4643      	mov	r3, r8
 800049e:	1a18      	subs	r0, r3, r0
 80004a0:	0143      	lsls	r3, r0, #5
 80004a2:	d400      	bmi.n	80004a6 <__aeabi_fadd+0x4e>
 80004a4:	e08c      	b.n	80005c0 <__aeabi_fadd+0x168>
 80004a6:	0180      	lsls	r0, r0, #6
 80004a8:	0987      	lsrs	r7, r0, #6
 80004aa:	0038      	movs	r0, r7
 80004ac:	f001 fee6 	bl	800227c <__clzsi2>
 80004b0:	3805      	subs	r0, #5
 80004b2:	4087      	lsls	r7, r0
 80004b4:	4285      	cmp	r5, r0
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_fadd+0x62>
 80004b8:	e0b6      	b.n	8000628 <__aeabi_fadd+0x1d0>
 80004ba:	1a2d      	subs	r5, r5, r0
 80004bc:	48b3      	ldr	r0, [pc, #716]	; (800078c <__aeabi_fadd+0x334>)
 80004be:	4038      	ands	r0, r7
 80004c0:	0743      	lsls	r3, r0, #29
 80004c2:	d004      	beq.n	80004ce <__aeabi_fadd+0x76>
 80004c4:	230f      	movs	r3, #15
 80004c6:	4003      	ands	r3, r0
 80004c8:	2b04      	cmp	r3, #4
 80004ca:	d000      	beq.n	80004ce <__aeabi_fadd+0x76>
 80004cc:	3004      	adds	r0, #4
 80004ce:	0143      	lsls	r3, r0, #5
 80004d0:	d400      	bmi.n	80004d4 <__aeabi_fadd+0x7c>
 80004d2:	e078      	b.n	80005c6 <__aeabi_fadd+0x16e>
 80004d4:	1c6a      	adds	r2, r5, #1
 80004d6:	2dfe      	cmp	r5, #254	; 0xfe
 80004d8:	d065      	beq.n	80005a6 <__aeabi_fadd+0x14e>
 80004da:	0180      	lsls	r0, r0, #6
 80004dc:	0a43      	lsrs	r3, r0, #9
 80004de:	469c      	mov	ip, r3
 80004e0:	b2d2      	uxtb	r2, r2
 80004e2:	4663      	mov	r3, ip
 80004e4:	05d0      	lsls	r0, r2, #23
 80004e6:	4318      	orrs	r0, r3
 80004e8:	07e4      	lsls	r4, r4, #31
 80004ea:	4320      	orrs	r0, r4
 80004ec:	bc80      	pop	{r7}
 80004ee:	46b8      	mov	r8, r7
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2a00      	cmp	r2, #0
 80004f4:	d035      	beq.n	8000562 <__aeabi_fadd+0x10a>
 80004f6:	1b7a      	subs	r2, r7, r5
 80004f8:	2d00      	cmp	r5, #0
 80004fa:	d000      	beq.n	80004fe <__aeabi_fadd+0xa6>
 80004fc:	e0af      	b.n	800065e <__aeabi_fadd+0x206>
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_fadd+0xae>
 8000504:	e0a7      	b.n	8000656 <__aeabi_fadd+0x1fe>
 8000506:	1e53      	subs	r3, r2, #1
 8000508:	2a01      	cmp	r2, #1
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0xb6>
 800050c:	e12f      	b.n	800076e <__aeabi_fadd+0x316>
 800050e:	2aff      	cmp	r2, #255	; 0xff
 8000510:	d069      	beq.n	80005e6 <__aeabi_fadd+0x18e>
 8000512:	001a      	movs	r2, r3
 8000514:	e0aa      	b.n	800066c <__aeabi_fadd+0x214>
 8000516:	1be9      	subs	r1, r5, r7
 8000518:	2900      	cmp	r1, #0
 800051a:	dd70      	ble.n	80005fe <__aeabi_fadd+0x1a6>
 800051c:	2f00      	cmp	r7, #0
 800051e:	d037      	beq.n	8000590 <__aeabi_fadd+0x138>
 8000520:	2dff      	cmp	r5, #255	; 0xff
 8000522:	d062      	beq.n	80005ea <__aeabi_fadd+0x192>
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	04db      	lsls	r3, r3, #19
 8000528:	431e      	orrs	r6, r3
 800052a:	291b      	cmp	r1, #27
 800052c:	dc00      	bgt.n	8000530 <__aeabi_fadd+0xd8>
 800052e:	e0b0      	b.n	8000692 <__aeabi_fadd+0x23a>
 8000530:	2001      	movs	r0, #1
 8000532:	4440      	add	r0, r8
 8000534:	0143      	lsls	r3, r0, #5
 8000536:	d543      	bpl.n	80005c0 <__aeabi_fadd+0x168>
 8000538:	3501      	adds	r5, #1
 800053a:	2dff      	cmp	r5, #255	; 0xff
 800053c:	d033      	beq.n	80005a6 <__aeabi_fadd+0x14e>
 800053e:	2301      	movs	r3, #1
 8000540:	4a93      	ldr	r2, [pc, #588]	; (8000790 <__aeabi_fadd+0x338>)
 8000542:	4003      	ands	r3, r0
 8000544:	0840      	lsrs	r0, r0, #1
 8000546:	4010      	ands	r0, r2
 8000548:	4318      	orrs	r0, r3
 800054a:	e7b9      	b.n	80004c0 <__aeabi_fadd+0x68>
 800054c:	2e00      	cmp	r6, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0xfa>
 8000550:	e083      	b.n	800065a <__aeabi_fadd+0x202>
 8000552:	1e51      	subs	r1, r2, #1
 8000554:	2a01      	cmp	r2, #1
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0x102>
 8000558:	e0d8      	b.n	800070c <__aeabi_fadd+0x2b4>
 800055a:	2aff      	cmp	r2, #255	; 0xff
 800055c:	d045      	beq.n	80005ea <__aeabi_fadd+0x192>
 800055e:	000a      	movs	r2, r1
 8000560:	e798      	b.n	8000494 <__aeabi_fadd+0x3c>
 8000562:	27fe      	movs	r7, #254	; 0xfe
 8000564:	1c6a      	adds	r2, r5, #1
 8000566:	4217      	tst	r7, r2
 8000568:	d000      	beq.n	800056c <__aeabi_fadd+0x114>
 800056a:	e086      	b.n	800067a <__aeabi_fadd+0x222>
 800056c:	2d00      	cmp	r5, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_fadd+0x11a>
 8000570:	e0b7      	b.n	80006e2 <__aeabi_fadd+0x28a>
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0x122>
 8000578:	e0f3      	b.n	8000762 <__aeabi_fadd+0x30a>
 800057a:	2200      	movs	r2, #0
 800057c:	2e00      	cmp	r6, #0
 800057e:	d0b0      	beq.n	80004e2 <__aeabi_fadd+0x8a>
 8000580:	1b98      	subs	r0, r3, r6
 8000582:	0143      	lsls	r3, r0, #5
 8000584:	d400      	bmi.n	8000588 <__aeabi_fadd+0x130>
 8000586:	e0fa      	b.n	800077e <__aeabi_fadd+0x326>
 8000588:	4643      	mov	r3, r8
 800058a:	000c      	movs	r4, r1
 800058c:	1af0      	subs	r0, r6, r3
 800058e:	e797      	b.n	80004c0 <__aeabi_fadd+0x68>
 8000590:	2e00      	cmp	r6, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0x13e>
 8000594:	e0c8      	b.n	8000728 <__aeabi_fadd+0x2d0>
 8000596:	1e4a      	subs	r2, r1, #1
 8000598:	2901      	cmp	r1, #1
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x146>
 800059c:	e0ae      	b.n	80006fc <__aeabi_fadd+0x2a4>
 800059e:	29ff      	cmp	r1, #255	; 0xff
 80005a0:	d023      	beq.n	80005ea <__aeabi_fadd+0x192>
 80005a2:	0011      	movs	r1, r2
 80005a4:	e7c1      	b.n	800052a <__aeabi_fadd+0xd2>
 80005a6:	2300      	movs	r3, #0
 80005a8:	22ff      	movs	r2, #255	; 0xff
 80005aa:	469c      	mov	ip, r3
 80005ac:	e799      	b.n	80004e2 <__aeabi_fadd+0x8a>
 80005ae:	21fe      	movs	r1, #254	; 0xfe
 80005b0:	1c6a      	adds	r2, r5, #1
 80005b2:	4211      	tst	r1, r2
 80005b4:	d077      	beq.n	80006a6 <__aeabi_fadd+0x24e>
 80005b6:	2aff      	cmp	r2, #255	; 0xff
 80005b8:	d0f5      	beq.n	80005a6 <__aeabi_fadd+0x14e>
 80005ba:	0015      	movs	r5, r2
 80005bc:	4446      	add	r6, r8
 80005be:	0870      	lsrs	r0, r6, #1
 80005c0:	0743      	lsls	r3, r0, #29
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fadd+0x16e>
 80005c4:	e77e      	b.n	80004c4 <__aeabi_fadd+0x6c>
 80005c6:	08c3      	lsrs	r3, r0, #3
 80005c8:	2dff      	cmp	r5, #255	; 0xff
 80005ca:	d00e      	beq.n	80005ea <__aeabi_fadd+0x192>
 80005cc:	025b      	lsls	r3, r3, #9
 80005ce:	0a5b      	lsrs	r3, r3, #9
 80005d0:	469c      	mov	ip, r3
 80005d2:	b2ea      	uxtb	r2, r5
 80005d4:	e785      	b.n	80004e2 <__aeabi_fadd+0x8a>
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d007      	beq.n	80005ea <__aeabi_fadd+0x192>
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	03d2      	lsls	r2, r2, #15
 80005de:	4213      	tst	r3, r2
 80005e0:	d003      	beq.n	80005ea <__aeabi_fadd+0x192>
 80005e2:	4210      	tst	r0, r2
 80005e4:	d101      	bne.n	80005ea <__aeabi_fadd+0x192>
 80005e6:	000c      	movs	r4, r1
 80005e8:	0003      	movs	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0db      	beq.n	80005a6 <__aeabi_fadd+0x14e>
 80005ee:	2080      	movs	r0, #128	; 0x80
 80005f0:	03c0      	lsls	r0, r0, #15
 80005f2:	4318      	orrs	r0, r3
 80005f4:	0240      	lsls	r0, r0, #9
 80005f6:	0a43      	lsrs	r3, r0, #9
 80005f8:	469c      	mov	ip, r3
 80005fa:	22ff      	movs	r2, #255	; 0xff
 80005fc:	e771      	b.n	80004e2 <__aeabi_fadd+0x8a>
 80005fe:	2900      	cmp	r1, #0
 8000600:	d0d5      	beq.n	80005ae <__aeabi_fadd+0x156>
 8000602:	1b7a      	subs	r2, r7, r5
 8000604:	2d00      	cmp	r5, #0
 8000606:	d160      	bne.n	80006ca <__aeabi_fadd+0x272>
 8000608:	4643      	mov	r3, r8
 800060a:	2b00      	cmp	r3, #0
 800060c:	d024      	beq.n	8000658 <__aeabi_fadd+0x200>
 800060e:	1e53      	subs	r3, r2, #1
 8000610:	2a01      	cmp	r2, #1
 8000612:	d073      	beq.n	80006fc <__aeabi_fadd+0x2a4>
 8000614:	2aff      	cmp	r2, #255	; 0xff
 8000616:	d0e7      	beq.n	80005e8 <__aeabi_fadd+0x190>
 8000618:	001a      	movs	r2, r3
 800061a:	2a1b      	cmp	r2, #27
 800061c:	dc00      	bgt.n	8000620 <__aeabi_fadd+0x1c8>
 800061e:	e085      	b.n	800072c <__aeabi_fadd+0x2d4>
 8000620:	2001      	movs	r0, #1
 8000622:	003d      	movs	r5, r7
 8000624:	1980      	adds	r0, r0, r6
 8000626:	e785      	b.n	8000534 <__aeabi_fadd+0xdc>
 8000628:	2320      	movs	r3, #32
 800062a:	003a      	movs	r2, r7
 800062c:	1b45      	subs	r5, r0, r5
 800062e:	0038      	movs	r0, r7
 8000630:	3501      	adds	r5, #1
 8000632:	40ea      	lsrs	r2, r5
 8000634:	1b5d      	subs	r5, r3, r5
 8000636:	40a8      	lsls	r0, r5
 8000638:	1e43      	subs	r3, r0, #1
 800063a:	4198      	sbcs	r0, r3
 800063c:	2500      	movs	r5, #0
 800063e:	4310      	orrs	r0, r2
 8000640:	e73e      	b.n	80004c0 <__aeabi_fadd+0x68>
 8000642:	2320      	movs	r3, #32
 8000644:	0030      	movs	r0, r6
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	0031      	movs	r1, r6
 800064a:	4098      	lsls	r0, r3
 800064c:	40d1      	lsrs	r1, r2
 800064e:	1e43      	subs	r3, r0, #1
 8000650:	4198      	sbcs	r0, r3
 8000652:	4308      	orrs	r0, r1
 8000654:	e722      	b.n	800049c <__aeabi_fadd+0x44>
 8000656:	000c      	movs	r4, r1
 8000658:	0003      	movs	r3, r0
 800065a:	0015      	movs	r5, r2
 800065c:	e7b4      	b.n	80005c8 <__aeabi_fadd+0x170>
 800065e:	2fff      	cmp	r7, #255	; 0xff
 8000660:	d0c1      	beq.n	80005e6 <__aeabi_fadd+0x18e>
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	4640      	mov	r0, r8
 8000666:	04db      	lsls	r3, r3, #19
 8000668:	4318      	orrs	r0, r3
 800066a:	4680      	mov	r8, r0
 800066c:	2a1b      	cmp	r2, #27
 800066e:	dd51      	ble.n	8000714 <__aeabi_fadd+0x2bc>
 8000670:	2001      	movs	r0, #1
 8000672:	000c      	movs	r4, r1
 8000674:	003d      	movs	r5, r7
 8000676:	1a30      	subs	r0, r6, r0
 8000678:	e712      	b.n	80004a0 <__aeabi_fadd+0x48>
 800067a:	4643      	mov	r3, r8
 800067c:	1b9f      	subs	r7, r3, r6
 800067e:	017b      	lsls	r3, r7, #5
 8000680:	d42b      	bmi.n	80006da <__aeabi_fadd+0x282>
 8000682:	2f00      	cmp	r7, #0
 8000684:	d000      	beq.n	8000688 <__aeabi_fadd+0x230>
 8000686:	e710      	b.n	80004aa <__aeabi_fadd+0x52>
 8000688:	2300      	movs	r3, #0
 800068a:	2400      	movs	r4, #0
 800068c:	2200      	movs	r2, #0
 800068e:	469c      	mov	ip, r3
 8000690:	e727      	b.n	80004e2 <__aeabi_fadd+0x8a>
 8000692:	2320      	movs	r3, #32
 8000694:	0032      	movs	r2, r6
 8000696:	0030      	movs	r0, r6
 8000698:	40ca      	lsrs	r2, r1
 800069a:	1a59      	subs	r1, r3, r1
 800069c:	4088      	lsls	r0, r1
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	4198      	sbcs	r0, r3
 80006a2:	4310      	orrs	r0, r2
 80006a4:	e745      	b.n	8000532 <__aeabi_fadd+0xda>
 80006a6:	2d00      	cmp	r5, #0
 80006a8:	d14a      	bne.n	8000740 <__aeabi_fadd+0x2e8>
 80006aa:	4643      	mov	r3, r8
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d063      	beq.n	8000778 <__aeabi_fadd+0x320>
 80006b0:	2200      	movs	r2, #0
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0x260>
 80006b6:	e714      	b.n	80004e2 <__aeabi_fadd+0x8a>
 80006b8:	0030      	movs	r0, r6
 80006ba:	4440      	add	r0, r8
 80006bc:	0143      	lsls	r3, r0, #5
 80006be:	d400      	bmi.n	80006c2 <__aeabi_fadd+0x26a>
 80006c0:	e77e      	b.n	80005c0 <__aeabi_fadd+0x168>
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <__aeabi_fadd+0x334>)
 80006c4:	3501      	adds	r5, #1
 80006c6:	4018      	ands	r0, r3
 80006c8:	e77a      	b.n	80005c0 <__aeabi_fadd+0x168>
 80006ca:	2fff      	cmp	r7, #255	; 0xff
 80006cc:	d08c      	beq.n	80005e8 <__aeabi_fadd+0x190>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	4641      	mov	r1, r8
 80006d2:	04db      	lsls	r3, r3, #19
 80006d4:	4319      	orrs	r1, r3
 80006d6:	4688      	mov	r8, r1
 80006d8:	e79f      	b.n	800061a <__aeabi_fadd+0x1c2>
 80006da:	4643      	mov	r3, r8
 80006dc:	000c      	movs	r4, r1
 80006de:	1af7      	subs	r7, r6, r3
 80006e0:	e6e3      	b.n	80004aa <__aeabi_fadd+0x52>
 80006e2:	4642      	mov	r2, r8
 80006e4:	2a00      	cmp	r2, #0
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0x292>
 80006e8:	e775      	b.n	80005d6 <__aeabi_fadd+0x17e>
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fadd+0x298>
 80006ee:	e77a      	b.n	80005e6 <__aeabi_fadd+0x18e>
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	03db      	lsls	r3, r3, #15
 80006f4:	2400      	movs	r4, #0
 80006f6:	469c      	mov	ip, r3
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	e6f2      	b.n	80004e2 <__aeabi_fadd+0x8a>
 80006fc:	0030      	movs	r0, r6
 80006fe:	4440      	add	r0, r8
 8000700:	2501      	movs	r5, #1
 8000702:	0143      	lsls	r3, r0, #5
 8000704:	d400      	bmi.n	8000708 <__aeabi_fadd+0x2b0>
 8000706:	e75b      	b.n	80005c0 <__aeabi_fadd+0x168>
 8000708:	2502      	movs	r5, #2
 800070a:	e718      	b.n	800053e <__aeabi_fadd+0xe6>
 800070c:	4643      	mov	r3, r8
 800070e:	2501      	movs	r5, #1
 8000710:	1b98      	subs	r0, r3, r6
 8000712:	e6c5      	b.n	80004a0 <__aeabi_fadd+0x48>
 8000714:	2320      	movs	r3, #32
 8000716:	4644      	mov	r4, r8
 8000718:	4640      	mov	r0, r8
 800071a:	40d4      	lsrs	r4, r2
 800071c:	1a9a      	subs	r2, r3, r2
 800071e:	4090      	lsls	r0, r2
 8000720:	1e43      	subs	r3, r0, #1
 8000722:	4198      	sbcs	r0, r3
 8000724:	4320      	orrs	r0, r4
 8000726:	e7a4      	b.n	8000672 <__aeabi_fadd+0x21a>
 8000728:	000d      	movs	r5, r1
 800072a:	e74d      	b.n	80005c8 <__aeabi_fadd+0x170>
 800072c:	2320      	movs	r3, #32
 800072e:	4641      	mov	r1, r8
 8000730:	4640      	mov	r0, r8
 8000732:	40d1      	lsrs	r1, r2
 8000734:	1a9a      	subs	r2, r3, r2
 8000736:	4090      	lsls	r0, r2
 8000738:	1e43      	subs	r3, r0, #1
 800073a:	4198      	sbcs	r0, r3
 800073c:	4308      	orrs	r0, r1
 800073e:	e770      	b.n	8000622 <__aeabi_fadd+0x1ca>
 8000740:	4642      	mov	r2, r8
 8000742:	2a00      	cmp	r2, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x2f0>
 8000746:	e74f      	b.n	80005e8 <__aeabi_fadd+0x190>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x2f6>
 800074c:	e74d      	b.n	80005ea <__aeabi_fadd+0x192>
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	03d2      	lsls	r2, r2, #15
 8000752:	4213      	tst	r3, r2
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x300>
 8000756:	e748      	b.n	80005ea <__aeabi_fadd+0x192>
 8000758:	4210      	tst	r0, r2
 800075a:	d000      	beq.n	800075e <__aeabi_fadd+0x306>
 800075c:	e745      	b.n	80005ea <__aeabi_fadd+0x192>
 800075e:	0003      	movs	r3, r0
 8000760:	e743      	b.n	80005ea <__aeabi_fadd+0x192>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d090      	beq.n	8000688 <__aeabi_fadd+0x230>
 8000766:	000c      	movs	r4, r1
 8000768:	4684      	mov	ip, r0
 800076a:	2200      	movs	r2, #0
 800076c:	e6b9      	b.n	80004e2 <__aeabi_fadd+0x8a>
 800076e:	4643      	mov	r3, r8
 8000770:	000c      	movs	r4, r1
 8000772:	1af0      	subs	r0, r6, r3
 8000774:	3501      	adds	r5, #1
 8000776:	e693      	b.n	80004a0 <__aeabi_fadd+0x48>
 8000778:	4684      	mov	ip, r0
 800077a:	2200      	movs	r2, #0
 800077c:	e6b1      	b.n	80004e2 <__aeabi_fadd+0x8a>
 800077e:	2800      	cmp	r0, #0
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x32c>
 8000782:	e71d      	b.n	80005c0 <__aeabi_fadd+0x168>
 8000784:	2300      	movs	r3, #0
 8000786:	2400      	movs	r4, #0
 8000788:	469c      	mov	ip, r3
 800078a:	e6aa      	b.n	80004e2 <__aeabi_fadd+0x8a>
 800078c:	fbffffff 	.word	0xfbffffff
 8000790:	7dffffff 	.word	0x7dffffff

08000794 <__aeabi_fmul>:
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	464f      	mov	r7, r9
 8000798:	4646      	mov	r6, r8
 800079a:	46d6      	mov	lr, sl
 800079c:	0244      	lsls	r4, r0, #9
 800079e:	0045      	lsls	r5, r0, #1
 80007a0:	b5c0      	push	{r6, r7, lr}
 80007a2:	0a64      	lsrs	r4, r4, #9
 80007a4:	1c0f      	adds	r7, r1, #0
 80007a6:	0e2d      	lsrs	r5, r5, #24
 80007a8:	0fc6      	lsrs	r6, r0, #31
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fmul+0x1c>
 80007ae:	e08d      	b.n	80008cc <__aeabi_fmul+0x138>
 80007b0:	2dff      	cmp	r5, #255	; 0xff
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fmul+0x22>
 80007b4:	e092      	b.n	80008dc <__aeabi_fmul+0x148>
 80007b6:	2300      	movs	r3, #0
 80007b8:	2080      	movs	r0, #128	; 0x80
 80007ba:	4699      	mov	r9, r3
 80007bc:	469a      	mov	sl, r3
 80007be:	00e4      	lsls	r4, r4, #3
 80007c0:	04c0      	lsls	r0, r0, #19
 80007c2:	4304      	orrs	r4, r0
 80007c4:	3d7f      	subs	r5, #127	; 0x7f
 80007c6:	0278      	lsls	r0, r7, #9
 80007c8:	0a43      	lsrs	r3, r0, #9
 80007ca:	4698      	mov	r8, r3
 80007cc:	007b      	lsls	r3, r7, #1
 80007ce:	0e1b      	lsrs	r3, r3, #24
 80007d0:	0fff      	lsrs	r7, r7, #31
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fmul+0x44>
 80007d6:	e070      	b.n	80008ba <__aeabi_fmul+0x126>
 80007d8:	2bff      	cmp	r3, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fmul+0x4a>
 80007dc:	e086      	b.n	80008ec <__aeabi_fmul+0x158>
 80007de:	4642      	mov	r2, r8
 80007e0:	00d0      	lsls	r0, r2, #3
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	3b7f      	subs	r3, #127	; 0x7f
 80007e6:	18ed      	adds	r5, r5, r3
 80007e8:	2300      	movs	r3, #0
 80007ea:	04d2      	lsls	r2, r2, #19
 80007ec:	4302      	orrs	r2, r0
 80007ee:	4690      	mov	r8, r2
 80007f0:	469c      	mov	ip, r3
 80007f2:	0031      	movs	r1, r6
 80007f4:	464b      	mov	r3, r9
 80007f6:	4079      	eors	r1, r7
 80007f8:	1c68      	adds	r0, r5, #1
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d81c      	bhi.n	8000838 <__aeabi_fmul+0xa4>
 80007fe:	4a76      	ldr	r2, [pc, #472]	; (80009d8 <__aeabi_fmul+0x244>)
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	58d3      	ldr	r3, [r2, r3]
 8000804:	469f      	mov	pc, r3
 8000806:	0039      	movs	r1, r7
 8000808:	4644      	mov	r4, r8
 800080a:	46e2      	mov	sl, ip
 800080c:	4653      	mov	r3, sl
 800080e:	2b02      	cmp	r3, #2
 8000810:	d00f      	beq.n	8000832 <__aeabi_fmul+0x9e>
 8000812:	2b03      	cmp	r3, #3
 8000814:	d100      	bne.n	8000818 <__aeabi_fmul+0x84>
 8000816:	e0d7      	b.n	80009c8 <__aeabi_fmul+0x234>
 8000818:	2b01      	cmp	r3, #1
 800081a:	d137      	bne.n	800088c <__aeabi_fmul+0xf8>
 800081c:	2000      	movs	r0, #0
 800081e:	2400      	movs	r4, #0
 8000820:	05c0      	lsls	r0, r0, #23
 8000822:	4320      	orrs	r0, r4
 8000824:	07c9      	lsls	r1, r1, #31
 8000826:	4308      	orrs	r0, r1
 8000828:	bce0      	pop	{r5, r6, r7}
 800082a:	46ba      	mov	sl, r7
 800082c:	46b1      	mov	r9, r6
 800082e:	46a8      	mov	r8, r5
 8000830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000832:	20ff      	movs	r0, #255	; 0xff
 8000834:	2400      	movs	r4, #0
 8000836:	e7f3      	b.n	8000820 <__aeabi_fmul+0x8c>
 8000838:	0c26      	lsrs	r6, r4, #16
 800083a:	0424      	lsls	r4, r4, #16
 800083c:	0c22      	lsrs	r2, r4, #16
 800083e:	4644      	mov	r4, r8
 8000840:	0424      	lsls	r4, r4, #16
 8000842:	0c24      	lsrs	r4, r4, #16
 8000844:	4643      	mov	r3, r8
 8000846:	0027      	movs	r7, r4
 8000848:	0c1b      	lsrs	r3, r3, #16
 800084a:	4357      	muls	r7, r2
 800084c:	4374      	muls	r4, r6
 800084e:	435a      	muls	r2, r3
 8000850:	435e      	muls	r6, r3
 8000852:	1912      	adds	r2, r2, r4
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	189b      	adds	r3, r3, r2
 8000858:	429c      	cmp	r4, r3
 800085a:	d903      	bls.n	8000864 <__aeabi_fmul+0xd0>
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	0252      	lsls	r2, r2, #9
 8000860:	4694      	mov	ip, r2
 8000862:	4466      	add	r6, ip
 8000864:	043f      	lsls	r7, r7, #16
 8000866:	041a      	lsls	r2, r3, #16
 8000868:	0c3f      	lsrs	r7, r7, #16
 800086a:	19d2      	adds	r2, r2, r7
 800086c:	0194      	lsls	r4, r2, #6
 800086e:	1e67      	subs	r7, r4, #1
 8000870:	41bc      	sbcs	r4, r7
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	0e92      	lsrs	r2, r2, #26
 8000876:	199b      	adds	r3, r3, r6
 8000878:	4314      	orrs	r4, r2
 800087a:	019b      	lsls	r3, r3, #6
 800087c:	431c      	orrs	r4, r3
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	d400      	bmi.n	8000884 <__aeabi_fmul+0xf0>
 8000882:	e09b      	b.n	80009bc <__aeabi_fmul+0x228>
 8000884:	2301      	movs	r3, #1
 8000886:	0862      	lsrs	r2, r4, #1
 8000888:	401c      	ands	r4, r3
 800088a:	4314      	orrs	r4, r2
 800088c:	0002      	movs	r2, r0
 800088e:	327f      	adds	r2, #127	; 0x7f
 8000890:	2a00      	cmp	r2, #0
 8000892:	dd64      	ble.n	800095e <__aeabi_fmul+0x1ca>
 8000894:	0763      	lsls	r3, r4, #29
 8000896:	d004      	beq.n	80008a2 <__aeabi_fmul+0x10e>
 8000898:	230f      	movs	r3, #15
 800089a:	4023      	ands	r3, r4
 800089c:	2b04      	cmp	r3, #4
 800089e:	d000      	beq.n	80008a2 <__aeabi_fmul+0x10e>
 80008a0:	3404      	adds	r4, #4
 80008a2:	0123      	lsls	r3, r4, #4
 80008a4:	d503      	bpl.n	80008ae <__aeabi_fmul+0x11a>
 80008a6:	0002      	movs	r2, r0
 80008a8:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <__aeabi_fmul+0x248>)
 80008aa:	3280      	adds	r2, #128	; 0x80
 80008ac:	401c      	ands	r4, r3
 80008ae:	2afe      	cmp	r2, #254	; 0xfe
 80008b0:	dcbf      	bgt.n	8000832 <__aeabi_fmul+0x9e>
 80008b2:	01a4      	lsls	r4, r4, #6
 80008b4:	0a64      	lsrs	r4, r4, #9
 80008b6:	b2d0      	uxtb	r0, r2
 80008b8:	e7b2      	b.n	8000820 <__aeabi_fmul+0x8c>
 80008ba:	4643      	mov	r3, r8
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d13d      	bne.n	800093c <__aeabi_fmul+0x1a8>
 80008c0:	464a      	mov	r2, r9
 80008c2:	3301      	adds	r3, #1
 80008c4:	431a      	orrs	r2, r3
 80008c6:	4691      	mov	r9, r2
 80008c8:	469c      	mov	ip, r3
 80008ca:	e792      	b.n	80007f2 <__aeabi_fmul+0x5e>
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d129      	bne.n	8000924 <__aeabi_fmul+0x190>
 80008d0:	2304      	movs	r3, #4
 80008d2:	4699      	mov	r9, r3
 80008d4:	3b03      	subs	r3, #3
 80008d6:	2500      	movs	r5, #0
 80008d8:	469a      	mov	sl, r3
 80008da:	e774      	b.n	80007c6 <__aeabi_fmul+0x32>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d11b      	bne.n	8000918 <__aeabi_fmul+0x184>
 80008e0:	2308      	movs	r3, #8
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b06      	subs	r3, #6
 80008e6:	25ff      	movs	r5, #255	; 0xff
 80008e8:	469a      	mov	sl, r3
 80008ea:	e76c      	b.n	80007c6 <__aeabi_fmul+0x32>
 80008ec:	4643      	mov	r3, r8
 80008ee:	35ff      	adds	r5, #255	; 0xff
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10b      	bne.n	800090c <__aeabi_fmul+0x178>
 80008f4:	2302      	movs	r3, #2
 80008f6:	464a      	mov	r2, r9
 80008f8:	431a      	orrs	r2, r3
 80008fa:	4691      	mov	r9, r2
 80008fc:	469c      	mov	ip, r3
 80008fe:	e778      	b.n	80007f2 <__aeabi_fmul+0x5e>
 8000900:	4653      	mov	r3, sl
 8000902:	0031      	movs	r1, r6
 8000904:	2b02      	cmp	r3, #2
 8000906:	d000      	beq.n	800090a <__aeabi_fmul+0x176>
 8000908:	e783      	b.n	8000812 <__aeabi_fmul+0x7e>
 800090a:	e792      	b.n	8000832 <__aeabi_fmul+0x9e>
 800090c:	2303      	movs	r3, #3
 800090e:	464a      	mov	r2, r9
 8000910:	431a      	orrs	r2, r3
 8000912:	4691      	mov	r9, r2
 8000914:	469c      	mov	ip, r3
 8000916:	e76c      	b.n	80007f2 <__aeabi_fmul+0x5e>
 8000918:	230c      	movs	r3, #12
 800091a:	4699      	mov	r9, r3
 800091c:	3b09      	subs	r3, #9
 800091e:	25ff      	movs	r5, #255	; 0xff
 8000920:	469a      	mov	sl, r3
 8000922:	e750      	b.n	80007c6 <__aeabi_fmul+0x32>
 8000924:	0020      	movs	r0, r4
 8000926:	f001 fca9 	bl	800227c <__clzsi2>
 800092a:	2576      	movs	r5, #118	; 0x76
 800092c:	1f43      	subs	r3, r0, #5
 800092e:	409c      	lsls	r4, r3
 8000930:	2300      	movs	r3, #0
 8000932:	426d      	negs	r5, r5
 8000934:	4699      	mov	r9, r3
 8000936:	469a      	mov	sl, r3
 8000938:	1a2d      	subs	r5, r5, r0
 800093a:	e744      	b.n	80007c6 <__aeabi_fmul+0x32>
 800093c:	4640      	mov	r0, r8
 800093e:	f001 fc9d 	bl	800227c <__clzsi2>
 8000942:	4642      	mov	r2, r8
 8000944:	1f43      	subs	r3, r0, #5
 8000946:	409a      	lsls	r2, r3
 8000948:	2300      	movs	r3, #0
 800094a:	1a2d      	subs	r5, r5, r0
 800094c:	4690      	mov	r8, r2
 800094e:	469c      	mov	ip, r3
 8000950:	3d76      	subs	r5, #118	; 0x76
 8000952:	e74e      	b.n	80007f2 <__aeabi_fmul+0x5e>
 8000954:	2480      	movs	r4, #128	; 0x80
 8000956:	2100      	movs	r1, #0
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	03e4      	lsls	r4, r4, #15
 800095c:	e760      	b.n	8000820 <__aeabi_fmul+0x8c>
 800095e:	2301      	movs	r3, #1
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	2b1b      	cmp	r3, #27
 8000964:	dd00      	ble.n	8000968 <__aeabi_fmul+0x1d4>
 8000966:	e759      	b.n	800081c <__aeabi_fmul+0x88>
 8000968:	0022      	movs	r2, r4
 800096a:	309e      	adds	r0, #158	; 0x9e
 800096c:	40da      	lsrs	r2, r3
 800096e:	4084      	lsls	r4, r0
 8000970:	0013      	movs	r3, r2
 8000972:	1e62      	subs	r2, r4, #1
 8000974:	4194      	sbcs	r4, r2
 8000976:	431c      	orrs	r4, r3
 8000978:	0763      	lsls	r3, r4, #29
 800097a:	d004      	beq.n	8000986 <__aeabi_fmul+0x1f2>
 800097c:	230f      	movs	r3, #15
 800097e:	4023      	ands	r3, r4
 8000980:	2b04      	cmp	r3, #4
 8000982:	d000      	beq.n	8000986 <__aeabi_fmul+0x1f2>
 8000984:	3404      	adds	r4, #4
 8000986:	0163      	lsls	r3, r4, #5
 8000988:	d51a      	bpl.n	80009c0 <__aeabi_fmul+0x22c>
 800098a:	2001      	movs	r0, #1
 800098c:	2400      	movs	r4, #0
 800098e:	e747      	b.n	8000820 <__aeabi_fmul+0x8c>
 8000990:	2080      	movs	r0, #128	; 0x80
 8000992:	03c0      	lsls	r0, r0, #15
 8000994:	4204      	tst	r4, r0
 8000996:	d009      	beq.n	80009ac <__aeabi_fmul+0x218>
 8000998:	4643      	mov	r3, r8
 800099a:	4203      	tst	r3, r0
 800099c:	d106      	bne.n	80009ac <__aeabi_fmul+0x218>
 800099e:	4644      	mov	r4, r8
 80009a0:	4304      	orrs	r4, r0
 80009a2:	0264      	lsls	r4, r4, #9
 80009a4:	0039      	movs	r1, r7
 80009a6:	20ff      	movs	r0, #255	; 0xff
 80009a8:	0a64      	lsrs	r4, r4, #9
 80009aa:	e739      	b.n	8000820 <__aeabi_fmul+0x8c>
 80009ac:	2080      	movs	r0, #128	; 0x80
 80009ae:	03c0      	lsls	r0, r0, #15
 80009b0:	4304      	orrs	r4, r0
 80009b2:	0264      	lsls	r4, r4, #9
 80009b4:	0031      	movs	r1, r6
 80009b6:	20ff      	movs	r0, #255	; 0xff
 80009b8:	0a64      	lsrs	r4, r4, #9
 80009ba:	e731      	b.n	8000820 <__aeabi_fmul+0x8c>
 80009bc:	0028      	movs	r0, r5
 80009be:	e765      	b.n	800088c <__aeabi_fmul+0xf8>
 80009c0:	01a4      	lsls	r4, r4, #6
 80009c2:	2000      	movs	r0, #0
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	e72b      	b.n	8000820 <__aeabi_fmul+0x8c>
 80009c8:	2080      	movs	r0, #128	; 0x80
 80009ca:	03c0      	lsls	r0, r0, #15
 80009cc:	4304      	orrs	r4, r0
 80009ce:	0264      	lsls	r4, r4, #9
 80009d0:	20ff      	movs	r0, #255	; 0xff
 80009d2:	0a64      	lsrs	r4, r4, #9
 80009d4:	e724      	b.n	8000820 <__aeabi_fmul+0x8c>
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	08004d40 	.word	0x08004d40
 80009dc:	f7ffffff 	.word	0xf7ffffff

080009e0 <__aeabi_fsub>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	46ce      	mov	lr, r9
 80009e4:	4647      	mov	r7, r8
 80009e6:	0243      	lsls	r3, r0, #9
 80009e8:	0a5b      	lsrs	r3, r3, #9
 80009ea:	024e      	lsls	r6, r1, #9
 80009ec:	00da      	lsls	r2, r3, #3
 80009ee:	4694      	mov	ip, r2
 80009f0:	0a72      	lsrs	r2, r6, #9
 80009f2:	4691      	mov	r9, r2
 80009f4:	0045      	lsls	r5, r0, #1
 80009f6:	004a      	lsls	r2, r1, #1
 80009f8:	b580      	push	{r7, lr}
 80009fa:	0e2d      	lsrs	r5, r5, #24
 80009fc:	001f      	movs	r7, r3
 80009fe:	0fc4      	lsrs	r4, r0, #31
 8000a00:	0e12      	lsrs	r2, r2, #24
 8000a02:	0fc9      	lsrs	r1, r1, #31
 8000a04:	09b6      	lsrs	r6, r6, #6
 8000a06:	2aff      	cmp	r2, #255	; 0xff
 8000a08:	d05b      	beq.n	8000ac2 <__aeabi_fsub+0xe2>
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	4041      	eors	r1, r0
 8000a0e:	428c      	cmp	r4, r1
 8000a10:	d039      	beq.n	8000a86 <__aeabi_fsub+0xa6>
 8000a12:	1aa8      	subs	r0, r5, r2
 8000a14:	2800      	cmp	r0, #0
 8000a16:	dd5a      	ble.n	8000ace <__aeabi_fsub+0xee>
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d06a      	beq.n	8000af2 <__aeabi_fsub+0x112>
 8000a1c:	2dff      	cmp	r5, #255	; 0xff
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_fsub+0x42>
 8000a20:	e0d9      	b.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	04d2      	lsls	r2, r2, #19
 8000a26:	4316      	orrs	r6, r2
 8000a28:	281b      	cmp	r0, #27
 8000a2a:	dc00      	bgt.n	8000a2e <__aeabi_fsub+0x4e>
 8000a2c:	e0e9      	b.n	8000c02 <__aeabi_fsub+0x222>
 8000a2e:	2001      	movs	r0, #1
 8000a30:	4663      	mov	r3, ip
 8000a32:	1a18      	subs	r0, r3, r0
 8000a34:	0143      	lsls	r3, r0, #5
 8000a36:	d400      	bmi.n	8000a3a <__aeabi_fsub+0x5a>
 8000a38:	e0b4      	b.n	8000ba4 <__aeabi_fsub+0x1c4>
 8000a3a:	0180      	lsls	r0, r0, #6
 8000a3c:	0987      	lsrs	r7, r0, #6
 8000a3e:	0038      	movs	r0, r7
 8000a40:	f001 fc1c 	bl	800227c <__clzsi2>
 8000a44:	3805      	subs	r0, #5
 8000a46:	4087      	lsls	r7, r0
 8000a48:	4285      	cmp	r5, r0
 8000a4a:	dc00      	bgt.n	8000a4e <__aeabi_fsub+0x6e>
 8000a4c:	e0cc      	b.n	8000be8 <__aeabi_fsub+0x208>
 8000a4e:	1a2d      	subs	r5, r5, r0
 8000a50:	48b5      	ldr	r0, [pc, #724]	; (8000d28 <__aeabi_fsub+0x348>)
 8000a52:	4038      	ands	r0, r7
 8000a54:	0743      	lsls	r3, r0, #29
 8000a56:	d004      	beq.n	8000a62 <__aeabi_fsub+0x82>
 8000a58:	230f      	movs	r3, #15
 8000a5a:	4003      	ands	r3, r0
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_fsub+0x82>
 8000a60:	3004      	adds	r0, #4
 8000a62:	0143      	lsls	r3, r0, #5
 8000a64:	d400      	bmi.n	8000a68 <__aeabi_fsub+0x88>
 8000a66:	e0a0      	b.n	8000baa <__aeabi_fsub+0x1ca>
 8000a68:	1c6a      	adds	r2, r5, #1
 8000a6a:	2dfe      	cmp	r5, #254	; 0xfe
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fsub+0x90>
 8000a6e:	e08d      	b.n	8000b8c <__aeabi_fsub+0x1ac>
 8000a70:	0180      	lsls	r0, r0, #6
 8000a72:	0a47      	lsrs	r7, r0, #9
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	05d0      	lsls	r0, r2, #23
 8000a78:	4338      	orrs	r0, r7
 8000a7a:	07e4      	lsls	r4, r4, #31
 8000a7c:	4320      	orrs	r0, r4
 8000a7e:	bcc0      	pop	{r6, r7}
 8000a80:	46b9      	mov	r9, r7
 8000a82:	46b0      	mov	r8, r6
 8000a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a86:	1aa8      	subs	r0, r5, r2
 8000a88:	4680      	mov	r8, r0
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	dd45      	ble.n	8000b1a <__aeabi_fsub+0x13a>
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	d070      	beq.n	8000b74 <__aeabi_fsub+0x194>
 8000a92:	2dff      	cmp	r5, #255	; 0xff
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0xb8>
 8000a96:	e09e      	b.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	04db      	lsls	r3, r3, #19
 8000a9c:	431e      	orrs	r6, r3
 8000a9e:	4643      	mov	r3, r8
 8000aa0:	2b1b      	cmp	r3, #27
 8000aa2:	dc00      	bgt.n	8000aa6 <__aeabi_fsub+0xc6>
 8000aa4:	e0d2      	b.n	8000c4c <__aeabi_fsub+0x26c>
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	4460      	add	r0, ip
 8000aaa:	0143      	lsls	r3, r0, #5
 8000aac:	d57a      	bpl.n	8000ba4 <__aeabi_fsub+0x1c4>
 8000aae:	3501      	adds	r5, #1
 8000ab0:	2dff      	cmp	r5, #255	; 0xff
 8000ab2:	d06b      	beq.n	8000b8c <__aeabi_fsub+0x1ac>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	4a9d      	ldr	r2, [pc, #628]	; (8000d2c <__aeabi_fsub+0x34c>)
 8000ab8:	4003      	ands	r3, r0
 8000aba:	0840      	lsrs	r0, r0, #1
 8000abc:	4010      	ands	r0, r2
 8000abe:	4318      	orrs	r0, r3
 8000ac0:	e7c8      	b.n	8000a54 <__aeabi_fsub+0x74>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d020      	beq.n	8000b08 <__aeabi_fsub+0x128>
 8000ac6:	428c      	cmp	r4, r1
 8000ac8:	d023      	beq.n	8000b12 <__aeabi_fsub+0x132>
 8000aca:	0028      	movs	r0, r5
 8000acc:	38ff      	subs	r0, #255	; 0xff
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d039      	beq.n	8000b46 <__aeabi_fsub+0x166>
 8000ad2:	1b57      	subs	r7, r2, r5
 8000ad4:	2d00      	cmp	r5, #0
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fsub+0xfa>
 8000ad8:	e09d      	b.n	8000c16 <__aeabi_fsub+0x236>
 8000ada:	4663      	mov	r3, ip
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fsub+0x102>
 8000ae0:	e0db      	b.n	8000c9a <__aeabi_fsub+0x2ba>
 8000ae2:	1e7b      	subs	r3, r7, #1
 8000ae4:	2f01      	cmp	r7, #1
 8000ae6:	d100      	bne.n	8000aea <__aeabi_fsub+0x10a>
 8000ae8:	e10d      	b.n	8000d06 <__aeabi_fsub+0x326>
 8000aea:	2fff      	cmp	r7, #255	; 0xff
 8000aec:	d071      	beq.n	8000bd2 <__aeabi_fsub+0x1f2>
 8000aee:	001f      	movs	r7, r3
 8000af0:	e098      	b.n	8000c24 <__aeabi_fsub+0x244>
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x118>
 8000af6:	e0a7      	b.n	8000c48 <__aeabi_fsub+0x268>
 8000af8:	1e42      	subs	r2, r0, #1
 8000afa:	2801      	cmp	r0, #1
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x120>
 8000afe:	e0e6      	b.n	8000cce <__aeabi_fsub+0x2ee>
 8000b00:	28ff      	cmp	r0, #255	; 0xff
 8000b02:	d068      	beq.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000b04:	0010      	movs	r0, r2
 8000b06:	e78f      	b.n	8000a28 <__aeabi_fsub+0x48>
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4041      	eors	r1, r0
 8000b0c:	42a1      	cmp	r1, r4
 8000b0e:	d000      	beq.n	8000b12 <__aeabi_fsub+0x132>
 8000b10:	e77f      	b.n	8000a12 <__aeabi_fsub+0x32>
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	4240      	negs	r0, r0
 8000b16:	4680      	mov	r8, r0
 8000b18:	44a8      	add	r8, r5
 8000b1a:	4640      	mov	r0, r8
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d038      	beq.n	8000b92 <__aeabi_fsub+0x1b2>
 8000b20:	1b51      	subs	r1, r2, r5
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fsub+0x148>
 8000b26:	e0ae      	b.n	8000c86 <__aeabi_fsub+0x2a6>
 8000b28:	2aff      	cmp	r2, #255	; 0xff
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_fsub+0x14e>
 8000b2c:	e0df      	b.n	8000cee <__aeabi_fsub+0x30e>
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	4660      	mov	r0, ip
 8000b32:	04db      	lsls	r3, r3, #19
 8000b34:	4318      	orrs	r0, r3
 8000b36:	4684      	mov	ip, r0
 8000b38:	291b      	cmp	r1, #27
 8000b3a:	dc00      	bgt.n	8000b3e <__aeabi_fsub+0x15e>
 8000b3c:	e0d9      	b.n	8000cf2 <__aeabi_fsub+0x312>
 8000b3e:	2001      	movs	r0, #1
 8000b40:	0015      	movs	r5, r2
 8000b42:	1980      	adds	r0, r0, r6
 8000b44:	e7b1      	b.n	8000aaa <__aeabi_fsub+0xca>
 8000b46:	20fe      	movs	r0, #254	; 0xfe
 8000b48:	1c6a      	adds	r2, r5, #1
 8000b4a:	4210      	tst	r0, r2
 8000b4c:	d171      	bne.n	8000c32 <__aeabi_fsub+0x252>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fsub+0x174>
 8000b52:	e0a6      	b.n	8000ca2 <__aeabi_fsub+0x2c2>
 8000b54:	4663      	mov	r3, ip
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x17c>
 8000b5a:	e0d9      	b.n	8000d10 <__aeabi_fsub+0x330>
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x184>
 8000b62:	e788      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000b64:	1b98      	subs	r0, r3, r6
 8000b66:	0143      	lsls	r3, r0, #5
 8000b68:	d400      	bmi.n	8000b6c <__aeabi_fsub+0x18c>
 8000b6a:	e0e1      	b.n	8000d30 <__aeabi_fsub+0x350>
 8000b6c:	4663      	mov	r3, ip
 8000b6e:	000c      	movs	r4, r1
 8000b70:	1af0      	subs	r0, r6, r3
 8000b72:	e76f      	b.n	8000a54 <__aeabi_fsub+0x74>
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_fsub+0x19a>
 8000b78:	e0b7      	b.n	8000cea <__aeabi_fsub+0x30a>
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	2801      	cmp	r0, #1
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x1a4>
 8000b82:	e09c      	b.n	8000cbe <__aeabi_fsub+0x2de>
 8000b84:	28ff      	cmp	r0, #255	; 0xff
 8000b86:	d026      	beq.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000b88:	4690      	mov	r8, r2
 8000b8a:	e788      	b.n	8000a9e <__aeabi_fsub+0xbe>
 8000b8c:	22ff      	movs	r2, #255	; 0xff
 8000b8e:	2700      	movs	r7, #0
 8000b90:	e771      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000b92:	20fe      	movs	r0, #254	; 0xfe
 8000b94:	1c6a      	adds	r2, r5, #1
 8000b96:	4210      	tst	r0, r2
 8000b98:	d064      	beq.n	8000c64 <__aeabi_fsub+0x284>
 8000b9a:	2aff      	cmp	r2, #255	; 0xff
 8000b9c:	d0f6      	beq.n	8000b8c <__aeabi_fsub+0x1ac>
 8000b9e:	0015      	movs	r5, r2
 8000ba0:	4466      	add	r6, ip
 8000ba2:	0870      	lsrs	r0, r6, #1
 8000ba4:	0743      	lsls	r3, r0, #29
 8000ba6:	d000      	beq.n	8000baa <__aeabi_fsub+0x1ca>
 8000ba8:	e756      	b.n	8000a58 <__aeabi_fsub+0x78>
 8000baa:	08c3      	lsrs	r3, r0, #3
 8000bac:	2dff      	cmp	r5, #255	; 0xff
 8000bae:	d012      	beq.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000bb0:	025b      	lsls	r3, r3, #9
 8000bb2:	0a5f      	lsrs	r7, r3, #9
 8000bb4:	b2ea      	uxtb	r2, r5
 8000bb6:	e75e      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000bb8:	4662      	mov	r2, ip
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fsub+0x1e0>
 8000bbe:	e096      	b.n	8000cee <__aeabi_fsub+0x30e>
 8000bc0:	2e00      	cmp	r6, #0
 8000bc2:	d008      	beq.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	03d2      	lsls	r2, r2, #15
 8000bc8:	4213      	tst	r3, r2
 8000bca:	d004      	beq.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000bcc:	4648      	mov	r0, r9
 8000bce:	4210      	tst	r0, r2
 8000bd0:	d101      	bne.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000bd2:	000c      	movs	r4, r1
 8000bd4:	464b      	mov	r3, r9
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0d8      	beq.n	8000b8c <__aeabi_fsub+0x1ac>
 8000bda:	2780      	movs	r7, #128	; 0x80
 8000bdc:	03ff      	lsls	r7, r7, #15
 8000bde:	431f      	orrs	r7, r3
 8000be0:	027f      	lsls	r7, r7, #9
 8000be2:	22ff      	movs	r2, #255	; 0xff
 8000be4:	0a7f      	lsrs	r7, r7, #9
 8000be6:	e746      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000be8:	2320      	movs	r3, #32
 8000bea:	003a      	movs	r2, r7
 8000bec:	1b45      	subs	r5, r0, r5
 8000bee:	0038      	movs	r0, r7
 8000bf0:	3501      	adds	r5, #1
 8000bf2:	40ea      	lsrs	r2, r5
 8000bf4:	1b5d      	subs	r5, r3, r5
 8000bf6:	40a8      	lsls	r0, r5
 8000bf8:	1e43      	subs	r3, r0, #1
 8000bfa:	4198      	sbcs	r0, r3
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	4310      	orrs	r0, r2
 8000c00:	e728      	b.n	8000a54 <__aeabi_fsub+0x74>
 8000c02:	2320      	movs	r3, #32
 8000c04:	1a1b      	subs	r3, r3, r0
 8000c06:	0032      	movs	r2, r6
 8000c08:	409e      	lsls	r6, r3
 8000c0a:	40c2      	lsrs	r2, r0
 8000c0c:	0030      	movs	r0, r6
 8000c0e:	1e43      	subs	r3, r0, #1
 8000c10:	4198      	sbcs	r0, r3
 8000c12:	4310      	orrs	r0, r2
 8000c14:	e70c      	b.n	8000a30 <__aeabi_fsub+0x50>
 8000c16:	2aff      	cmp	r2, #255	; 0xff
 8000c18:	d0db      	beq.n	8000bd2 <__aeabi_fsub+0x1f2>
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	4660      	mov	r0, ip
 8000c1e:	04db      	lsls	r3, r3, #19
 8000c20:	4318      	orrs	r0, r3
 8000c22:	4684      	mov	ip, r0
 8000c24:	2f1b      	cmp	r7, #27
 8000c26:	dd56      	ble.n	8000cd6 <__aeabi_fsub+0x2f6>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	000c      	movs	r4, r1
 8000c2c:	0015      	movs	r5, r2
 8000c2e:	1a30      	subs	r0, r6, r0
 8000c30:	e700      	b.n	8000a34 <__aeabi_fsub+0x54>
 8000c32:	4663      	mov	r3, ip
 8000c34:	1b9f      	subs	r7, r3, r6
 8000c36:	017b      	lsls	r3, r7, #5
 8000c38:	d43d      	bmi.n	8000cb6 <__aeabi_fsub+0x2d6>
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fsub+0x260>
 8000c3e:	e6fe      	b.n	8000a3e <__aeabi_fsub+0x5e>
 8000c40:	2400      	movs	r4, #0
 8000c42:	2200      	movs	r2, #0
 8000c44:	2700      	movs	r7, #0
 8000c46:	e716      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000c48:	0005      	movs	r5, r0
 8000c4a:	e7af      	b.n	8000bac <__aeabi_fsub+0x1cc>
 8000c4c:	0032      	movs	r2, r6
 8000c4e:	4643      	mov	r3, r8
 8000c50:	4641      	mov	r1, r8
 8000c52:	40da      	lsrs	r2, r3
 8000c54:	2320      	movs	r3, #32
 8000c56:	1a5b      	subs	r3, r3, r1
 8000c58:	409e      	lsls	r6, r3
 8000c5a:	0030      	movs	r0, r6
 8000c5c:	1e43      	subs	r3, r0, #1
 8000c5e:	4198      	sbcs	r0, r3
 8000c60:	4310      	orrs	r0, r2
 8000c62:	e721      	b.n	8000aa8 <__aeabi_fsub+0xc8>
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	d1a7      	bne.n	8000bb8 <__aeabi_fsub+0x1d8>
 8000c68:	4663      	mov	r3, ip
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d059      	beq.n	8000d22 <__aeabi_fsub+0x342>
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2e00      	cmp	r6, #0
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fsub+0x296>
 8000c74:	e6ff      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000c76:	0030      	movs	r0, r6
 8000c78:	4460      	add	r0, ip
 8000c7a:	0143      	lsls	r3, r0, #5
 8000c7c:	d592      	bpl.n	8000ba4 <__aeabi_fsub+0x1c4>
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <__aeabi_fsub+0x348>)
 8000c80:	3501      	adds	r5, #1
 8000c82:	4018      	ands	r0, r3
 8000c84:	e78e      	b.n	8000ba4 <__aeabi_fsub+0x1c4>
 8000c86:	4663      	mov	r3, ip
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d047      	beq.n	8000d1c <__aeabi_fsub+0x33c>
 8000c8c:	1e4b      	subs	r3, r1, #1
 8000c8e:	2901      	cmp	r1, #1
 8000c90:	d015      	beq.n	8000cbe <__aeabi_fsub+0x2de>
 8000c92:	29ff      	cmp	r1, #255	; 0xff
 8000c94:	d02b      	beq.n	8000cee <__aeabi_fsub+0x30e>
 8000c96:	0019      	movs	r1, r3
 8000c98:	e74e      	b.n	8000b38 <__aeabi_fsub+0x158>
 8000c9a:	000c      	movs	r4, r1
 8000c9c:	464b      	mov	r3, r9
 8000c9e:	003d      	movs	r5, r7
 8000ca0:	e784      	b.n	8000bac <__aeabi_fsub+0x1cc>
 8000ca2:	4662      	mov	r2, ip
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	d18b      	bne.n	8000bc0 <__aeabi_fsub+0x1e0>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d192      	bne.n	8000bd2 <__aeabi_fsub+0x1f2>
 8000cac:	2780      	movs	r7, #128	; 0x80
 8000cae:	2400      	movs	r4, #0
 8000cb0:	22ff      	movs	r2, #255	; 0xff
 8000cb2:	03ff      	lsls	r7, r7, #15
 8000cb4:	e6df      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	000c      	movs	r4, r1
 8000cba:	1af7      	subs	r7, r6, r3
 8000cbc:	e6bf      	b.n	8000a3e <__aeabi_fsub+0x5e>
 8000cbe:	0030      	movs	r0, r6
 8000cc0:	4460      	add	r0, ip
 8000cc2:	2501      	movs	r5, #1
 8000cc4:	0143      	lsls	r3, r0, #5
 8000cc6:	d400      	bmi.n	8000cca <__aeabi_fsub+0x2ea>
 8000cc8:	e76c      	b.n	8000ba4 <__aeabi_fsub+0x1c4>
 8000cca:	2502      	movs	r5, #2
 8000ccc:	e6f2      	b.n	8000ab4 <__aeabi_fsub+0xd4>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	2501      	movs	r5, #1
 8000cd2:	1b98      	subs	r0, r3, r6
 8000cd4:	e6ae      	b.n	8000a34 <__aeabi_fsub+0x54>
 8000cd6:	2320      	movs	r3, #32
 8000cd8:	4664      	mov	r4, ip
 8000cda:	4660      	mov	r0, ip
 8000cdc:	40fc      	lsrs	r4, r7
 8000cde:	1bdf      	subs	r7, r3, r7
 8000ce0:	40b8      	lsls	r0, r7
 8000ce2:	1e43      	subs	r3, r0, #1
 8000ce4:	4198      	sbcs	r0, r3
 8000ce6:	4320      	orrs	r0, r4
 8000ce8:	e79f      	b.n	8000c2a <__aeabi_fsub+0x24a>
 8000cea:	0005      	movs	r5, r0
 8000cec:	e75e      	b.n	8000bac <__aeabi_fsub+0x1cc>
 8000cee:	464b      	mov	r3, r9
 8000cf0:	e771      	b.n	8000bd6 <__aeabi_fsub+0x1f6>
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	4665      	mov	r5, ip
 8000cf6:	4660      	mov	r0, ip
 8000cf8:	40cd      	lsrs	r5, r1
 8000cfa:	1a59      	subs	r1, r3, r1
 8000cfc:	4088      	lsls	r0, r1
 8000cfe:	1e43      	subs	r3, r0, #1
 8000d00:	4198      	sbcs	r0, r3
 8000d02:	4328      	orrs	r0, r5
 8000d04:	e71c      	b.n	8000b40 <__aeabi_fsub+0x160>
 8000d06:	4663      	mov	r3, ip
 8000d08:	000c      	movs	r4, r1
 8000d0a:	2501      	movs	r5, #1
 8000d0c:	1af0      	subs	r0, r6, r3
 8000d0e:	e691      	b.n	8000a34 <__aeabi_fsub+0x54>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d095      	beq.n	8000c40 <__aeabi_fsub+0x260>
 8000d14:	000c      	movs	r4, r1
 8000d16:	464f      	mov	r7, r9
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e6ac      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	000d      	movs	r5, r1
 8000d20:	e744      	b.n	8000bac <__aeabi_fsub+0x1cc>
 8000d22:	464f      	mov	r7, r9
 8000d24:	2200      	movs	r2, #0
 8000d26:	e6a6      	b.n	8000a76 <__aeabi_fsub+0x96>
 8000d28:	fbffffff 	.word	0xfbffffff
 8000d2c:	7dffffff 	.word	0x7dffffff
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d000      	beq.n	8000d36 <__aeabi_fsub+0x356>
 8000d34:	e736      	b.n	8000ba4 <__aeabi_fsub+0x1c4>
 8000d36:	2400      	movs	r4, #0
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e69c      	b.n	8000a76 <__aeabi_fsub+0x96>

08000d3c <__aeabi_f2iz>:
 8000d3c:	0241      	lsls	r1, r0, #9
 8000d3e:	0042      	lsls	r2, r0, #1
 8000d40:	0fc3      	lsrs	r3, r0, #31
 8000d42:	0a49      	lsrs	r1, r1, #9
 8000d44:	2000      	movs	r0, #0
 8000d46:	0e12      	lsrs	r2, r2, #24
 8000d48:	2a7e      	cmp	r2, #126	; 0x7e
 8000d4a:	dd03      	ble.n	8000d54 <__aeabi_f2iz+0x18>
 8000d4c:	2a9d      	cmp	r2, #157	; 0x9d
 8000d4e:	dd02      	ble.n	8000d56 <__aeabi_f2iz+0x1a>
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <__aeabi_f2iz+0x3c>)
 8000d52:	1898      	adds	r0, r3, r2
 8000d54:	4770      	bx	lr
 8000d56:	2080      	movs	r0, #128	; 0x80
 8000d58:	0400      	lsls	r0, r0, #16
 8000d5a:	4301      	orrs	r1, r0
 8000d5c:	2a95      	cmp	r2, #149	; 0x95
 8000d5e:	dc07      	bgt.n	8000d70 <__aeabi_f2iz+0x34>
 8000d60:	2096      	movs	r0, #150	; 0x96
 8000d62:	1a82      	subs	r2, r0, r2
 8000d64:	40d1      	lsrs	r1, r2
 8000d66:	4248      	negs	r0, r1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f3      	bne.n	8000d54 <__aeabi_f2iz+0x18>
 8000d6c:	0008      	movs	r0, r1
 8000d6e:	e7f1      	b.n	8000d54 <__aeabi_f2iz+0x18>
 8000d70:	3a96      	subs	r2, #150	; 0x96
 8000d72:	4091      	lsls	r1, r2
 8000d74:	e7f7      	b.n	8000d66 <__aeabi_f2iz+0x2a>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	7fffffff 	.word	0x7fffffff

08000d7c <__aeabi_ui2f>:
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	1e05      	subs	r5, r0, #0
 8000d80:	d00e      	beq.n	8000da0 <__aeabi_ui2f+0x24>
 8000d82:	f001 fa7b 	bl	800227c <__clzsi2>
 8000d86:	239e      	movs	r3, #158	; 0x9e
 8000d88:	0004      	movs	r4, r0
 8000d8a:	1a1b      	subs	r3, r3, r0
 8000d8c:	2b96      	cmp	r3, #150	; 0x96
 8000d8e:	dc0c      	bgt.n	8000daa <__aeabi_ui2f+0x2e>
 8000d90:	2808      	cmp	r0, #8
 8000d92:	dd01      	ble.n	8000d98 <__aeabi_ui2f+0x1c>
 8000d94:	3c08      	subs	r4, #8
 8000d96:	40a5      	lsls	r5, r4
 8000d98:	026d      	lsls	r5, r5, #9
 8000d9a:	0a6d      	lsrs	r5, r5, #9
 8000d9c:	b2d8      	uxtb	r0, r3
 8000d9e:	e001      	b.n	8000da4 <__aeabi_ui2f+0x28>
 8000da0:	2000      	movs	r0, #0
 8000da2:	2500      	movs	r5, #0
 8000da4:	05c0      	lsls	r0, r0, #23
 8000da6:	4328      	orrs	r0, r5
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
 8000daa:	2b99      	cmp	r3, #153	; 0x99
 8000dac:	dd09      	ble.n	8000dc2 <__aeabi_ui2f+0x46>
 8000dae:	0002      	movs	r2, r0
 8000db0:	0029      	movs	r1, r5
 8000db2:	321b      	adds	r2, #27
 8000db4:	4091      	lsls	r1, r2
 8000db6:	1e4a      	subs	r2, r1, #1
 8000db8:	4191      	sbcs	r1, r2
 8000dba:	2205      	movs	r2, #5
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	40d5      	lsrs	r5, r2
 8000dc0:	430d      	orrs	r5, r1
 8000dc2:	2c05      	cmp	r4, #5
 8000dc4:	dc12      	bgt.n	8000dec <__aeabi_ui2f+0x70>
 8000dc6:	0029      	movs	r1, r5
 8000dc8:	4e0c      	ldr	r6, [pc, #48]	; (8000dfc <__aeabi_ui2f+0x80>)
 8000dca:	4031      	ands	r1, r6
 8000dcc:	076a      	lsls	r2, r5, #29
 8000dce:	d009      	beq.n	8000de4 <__aeabi_ui2f+0x68>
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	4028      	ands	r0, r5
 8000dd4:	2804      	cmp	r0, #4
 8000dd6:	d005      	beq.n	8000de4 <__aeabi_ui2f+0x68>
 8000dd8:	3104      	adds	r1, #4
 8000dda:	014a      	lsls	r2, r1, #5
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_ui2f+0x68>
 8000dde:	239f      	movs	r3, #159	; 0x9f
 8000de0:	4031      	ands	r1, r6
 8000de2:	1b1b      	subs	r3, r3, r4
 8000de4:	0189      	lsls	r1, r1, #6
 8000de6:	0a4d      	lsrs	r5, r1, #9
 8000de8:	b2d8      	uxtb	r0, r3
 8000dea:	e7db      	b.n	8000da4 <__aeabi_ui2f+0x28>
 8000dec:	1f62      	subs	r2, r4, #5
 8000dee:	4095      	lsls	r5, r2
 8000df0:	0029      	movs	r1, r5
 8000df2:	4e02      	ldr	r6, [pc, #8]	; (8000dfc <__aeabi_ui2f+0x80>)
 8000df4:	4031      	ands	r1, r6
 8000df6:	076a      	lsls	r2, r5, #29
 8000df8:	d0f4      	beq.n	8000de4 <__aeabi_ui2f+0x68>
 8000dfa:	e7e9      	b.n	8000dd0 <__aeabi_ui2f+0x54>
 8000dfc:	fbffffff 	.word	0xfbffffff

08000e00 <__aeabi_dadd>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	464f      	mov	r7, r9
 8000e04:	4646      	mov	r6, r8
 8000e06:	46d6      	mov	lr, sl
 8000e08:	000d      	movs	r5, r1
 8000e0a:	0004      	movs	r4, r0
 8000e0c:	b5c0      	push	{r6, r7, lr}
 8000e0e:	001f      	movs	r7, r3
 8000e10:	0011      	movs	r1, r2
 8000e12:	0328      	lsls	r0, r5, #12
 8000e14:	0f62      	lsrs	r2, r4, #29
 8000e16:	0a40      	lsrs	r0, r0, #9
 8000e18:	4310      	orrs	r0, r2
 8000e1a:	007a      	lsls	r2, r7, #1
 8000e1c:	0d52      	lsrs	r2, r2, #21
 8000e1e:	00e3      	lsls	r3, r4, #3
 8000e20:	033c      	lsls	r4, r7, #12
 8000e22:	4691      	mov	r9, r2
 8000e24:	0a64      	lsrs	r4, r4, #9
 8000e26:	0ffa      	lsrs	r2, r7, #31
 8000e28:	0f4f      	lsrs	r7, r1, #29
 8000e2a:	006e      	lsls	r6, r5, #1
 8000e2c:	4327      	orrs	r7, r4
 8000e2e:	4692      	mov	sl, r2
 8000e30:	46b8      	mov	r8, r7
 8000e32:	0d76      	lsrs	r6, r6, #21
 8000e34:	0fed      	lsrs	r5, r5, #31
 8000e36:	00c9      	lsls	r1, r1, #3
 8000e38:	4295      	cmp	r5, r2
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0x3e>
 8000e3c:	e099      	b.n	8000f72 <__aeabi_dadd+0x172>
 8000e3e:	464c      	mov	r4, r9
 8000e40:	1b34      	subs	r4, r6, r4
 8000e42:	46a4      	mov	ip, r4
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	dc00      	bgt.n	8000e4a <__aeabi_dadd+0x4a>
 8000e48:	e07c      	b.n	8000f44 <__aeabi_dadd+0x144>
 8000e4a:	464a      	mov	r2, r9
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dadd+0x52>
 8000e50:	e0b8      	b.n	8000fc4 <__aeabi_dadd+0x1c4>
 8000e52:	4ac5      	ldr	r2, [pc, #788]	; (8001168 <__aeabi_dadd+0x368>)
 8000e54:	4296      	cmp	r6, r2
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dadd+0x5a>
 8000e58:	e11c      	b.n	8001094 <__aeabi_dadd+0x294>
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	003c      	movs	r4, r7
 8000e5e:	0412      	lsls	r2, r2, #16
 8000e60:	4314      	orrs	r4, r2
 8000e62:	46a0      	mov	r8, r4
 8000e64:	4662      	mov	r2, ip
 8000e66:	2a38      	cmp	r2, #56	; 0x38
 8000e68:	dd00      	ble.n	8000e6c <__aeabi_dadd+0x6c>
 8000e6a:	e161      	b.n	8001130 <__aeabi_dadd+0x330>
 8000e6c:	2a1f      	cmp	r2, #31
 8000e6e:	dd00      	ble.n	8000e72 <__aeabi_dadd+0x72>
 8000e70:	e1cc      	b.n	800120c <__aeabi_dadd+0x40c>
 8000e72:	4664      	mov	r4, ip
 8000e74:	2220      	movs	r2, #32
 8000e76:	1b12      	subs	r2, r2, r4
 8000e78:	4644      	mov	r4, r8
 8000e7a:	4094      	lsls	r4, r2
 8000e7c:	000f      	movs	r7, r1
 8000e7e:	46a1      	mov	r9, r4
 8000e80:	4664      	mov	r4, ip
 8000e82:	4091      	lsls	r1, r2
 8000e84:	40e7      	lsrs	r7, r4
 8000e86:	464c      	mov	r4, r9
 8000e88:	1e4a      	subs	r2, r1, #1
 8000e8a:	4191      	sbcs	r1, r2
 8000e8c:	433c      	orrs	r4, r7
 8000e8e:	4642      	mov	r2, r8
 8000e90:	4321      	orrs	r1, r4
 8000e92:	4664      	mov	r4, ip
 8000e94:	40e2      	lsrs	r2, r4
 8000e96:	1a80      	subs	r0, r0, r2
 8000e98:	1a5c      	subs	r4, r3, r1
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	419b      	sbcs	r3, r3
 8000e9e:	425f      	negs	r7, r3
 8000ea0:	1bc7      	subs	r7, r0, r7
 8000ea2:	023b      	lsls	r3, r7, #8
 8000ea4:	d400      	bmi.n	8000ea8 <__aeabi_dadd+0xa8>
 8000ea6:	e0d0      	b.n	800104a <__aeabi_dadd+0x24a>
 8000ea8:	027f      	lsls	r7, r7, #9
 8000eaa:	0a7f      	lsrs	r7, r7, #9
 8000eac:	2f00      	cmp	r7, #0
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_dadd+0xb2>
 8000eb0:	e0ff      	b.n	80010b2 <__aeabi_dadd+0x2b2>
 8000eb2:	0038      	movs	r0, r7
 8000eb4:	f001 f9e2 	bl	800227c <__clzsi2>
 8000eb8:	0001      	movs	r1, r0
 8000eba:	3908      	subs	r1, #8
 8000ebc:	2320      	movs	r3, #32
 8000ebe:	0022      	movs	r2, r4
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	408f      	lsls	r7, r1
 8000ec4:	40da      	lsrs	r2, r3
 8000ec6:	408c      	lsls	r4, r1
 8000ec8:	4317      	orrs	r7, r2
 8000eca:	42b1      	cmp	r1, r6
 8000ecc:	da00      	bge.n	8000ed0 <__aeabi_dadd+0xd0>
 8000ece:	e0ff      	b.n	80010d0 <__aeabi_dadd+0x2d0>
 8000ed0:	1b89      	subs	r1, r1, r6
 8000ed2:	1c4b      	adds	r3, r1, #1
 8000ed4:	2b1f      	cmp	r3, #31
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_dadd+0xda>
 8000ed8:	e0a8      	b.n	800102c <__aeabi_dadd+0x22c>
 8000eda:	2220      	movs	r2, #32
 8000edc:	0039      	movs	r1, r7
 8000ede:	1ad2      	subs	r2, r2, r3
 8000ee0:	0020      	movs	r0, r4
 8000ee2:	4094      	lsls	r4, r2
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	1e62      	subs	r2, r4, #1
 8000eea:	4194      	sbcs	r4, r2
 8000eec:	40df      	lsrs	r7, r3
 8000eee:	2600      	movs	r6, #0
 8000ef0:	4301      	orrs	r1, r0
 8000ef2:	430c      	orrs	r4, r1
 8000ef4:	0763      	lsls	r3, r4, #29
 8000ef6:	d009      	beq.n	8000f0c <__aeabi_dadd+0x10c>
 8000ef8:	230f      	movs	r3, #15
 8000efa:	4023      	ands	r3, r4
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d005      	beq.n	8000f0c <__aeabi_dadd+0x10c>
 8000f00:	1d23      	adds	r3, r4, #4
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	41a4      	sbcs	r4, r4
 8000f06:	4264      	negs	r4, r4
 8000f08:	193f      	adds	r7, r7, r4
 8000f0a:	001c      	movs	r4, r3
 8000f0c:	023b      	lsls	r3, r7, #8
 8000f0e:	d400      	bmi.n	8000f12 <__aeabi_dadd+0x112>
 8000f10:	e09e      	b.n	8001050 <__aeabi_dadd+0x250>
 8000f12:	4b95      	ldr	r3, [pc, #596]	; (8001168 <__aeabi_dadd+0x368>)
 8000f14:	3601      	adds	r6, #1
 8000f16:	429e      	cmp	r6, r3
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dadd+0x11c>
 8000f1a:	e0b7      	b.n	800108c <__aeabi_dadd+0x28c>
 8000f1c:	4a93      	ldr	r2, [pc, #588]	; (800116c <__aeabi_dadd+0x36c>)
 8000f1e:	08e4      	lsrs	r4, r4, #3
 8000f20:	4017      	ands	r7, r2
 8000f22:	077b      	lsls	r3, r7, #29
 8000f24:	0571      	lsls	r1, r6, #21
 8000f26:	027f      	lsls	r7, r7, #9
 8000f28:	4323      	orrs	r3, r4
 8000f2a:	0b3f      	lsrs	r7, r7, #12
 8000f2c:	0d4a      	lsrs	r2, r1, #21
 8000f2e:	0512      	lsls	r2, r2, #20
 8000f30:	433a      	orrs	r2, r7
 8000f32:	07ed      	lsls	r5, r5, #31
 8000f34:	432a      	orrs	r2, r5
 8000f36:	0018      	movs	r0, r3
 8000f38:	0011      	movs	r1, r2
 8000f3a:	bce0      	pop	{r5, r6, r7}
 8000f3c:	46ba      	mov	sl, r7
 8000f3e:	46b1      	mov	r9, r6
 8000f40:	46a8      	mov	r8, r5
 8000f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f44:	2c00      	cmp	r4, #0
 8000f46:	d04b      	beq.n	8000fe0 <__aeabi_dadd+0x1e0>
 8000f48:	464c      	mov	r4, r9
 8000f4a:	1ba4      	subs	r4, r4, r6
 8000f4c:	46a4      	mov	ip, r4
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	d000      	beq.n	8000f54 <__aeabi_dadd+0x154>
 8000f52:	e123      	b.n	800119c <__aeabi_dadd+0x39c>
 8000f54:	0004      	movs	r4, r0
 8000f56:	431c      	orrs	r4, r3
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dadd+0x15c>
 8000f5a:	e1af      	b.n	80012bc <__aeabi_dadd+0x4bc>
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	1e54      	subs	r4, r2, #1
 8000f60:	2a01      	cmp	r2, #1
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dadd+0x166>
 8000f64:	e215      	b.n	8001392 <__aeabi_dadd+0x592>
 8000f66:	4d80      	ldr	r5, [pc, #512]	; (8001168 <__aeabi_dadd+0x368>)
 8000f68:	45ac      	cmp	ip, r5
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x16e>
 8000f6c:	e1c8      	b.n	8001300 <__aeabi_dadd+0x500>
 8000f6e:	46a4      	mov	ip, r4
 8000f70:	e11b      	b.n	80011aa <__aeabi_dadd+0x3aa>
 8000f72:	464a      	mov	r2, r9
 8000f74:	1ab2      	subs	r2, r6, r2
 8000f76:	4694      	mov	ip, r2
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	dc00      	bgt.n	8000f7e <__aeabi_dadd+0x17e>
 8000f7c:	e0ac      	b.n	80010d8 <__aeabi_dadd+0x2d8>
 8000f7e:	464a      	mov	r2, r9
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	d043      	beq.n	800100c <__aeabi_dadd+0x20c>
 8000f84:	4a78      	ldr	r2, [pc, #480]	; (8001168 <__aeabi_dadd+0x368>)
 8000f86:	4296      	cmp	r6, r2
 8000f88:	d100      	bne.n	8000f8c <__aeabi_dadd+0x18c>
 8000f8a:	e1af      	b.n	80012ec <__aeabi_dadd+0x4ec>
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	003c      	movs	r4, r7
 8000f90:	0412      	lsls	r2, r2, #16
 8000f92:	4314      	orrs	r4, r2
 8000f94:	46a0      	mov	r8, r4
 8000f96:	4662      	mov	r2, ip
 8000f98:	2a38      	cmp	r2, #56	; 0x38
 8000f9a:	dc67      	bgt.n	800106c <__aeabi_dadd+0x26c>
 8000f9c:	2a1f      	cmp	r2, #31
 8000f9e:	dc00      	bgt.n	8000fa2 <__aeabi_dadd+0x1a2>
 8000fa0:	e15f      	b.n	8001262 <__aeabi_dadd+0x462>
 8000fa2:	4647      	mov	r7, r8
 8000fa4:	3a20      	subs	r2, #32
 8000fa6:	40d7      	lsrs	r7, r2
 8000fa8:	4662      	mov	r2, ip
 8000faa:	2a20      	cmp	r2, #32
 8000fac:	d005      	beq.n	8000fba <__aeabi_dadd+0x1ba>
 8000fae:	4664      	mov	r4, ip
 8000fb0:	2240      	movs	r2, #64	; 0x40
 8000fb2:	1b12      	subs	r2, r2, r4
 8000fb4:	4644      	mov	r4, r8
 8000fb6:	4094      	lsls	r4, r2
 8000fb8:	4321      	orrs	r1, r4
 8000fba:	1e4a      	subs	r2, r1, #1
 8000fbc:	4191      	sbcs	r1, r2
 8000fbe:	000c      	movs	r4, r1
 8000fc0:	433c      	orrs	r4, r7
 8000fc2:	e057      	b.n	8001074 <__aeabi_dadd+0x274>
 8000fc4:	003a      	movs	r2, r7
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_dadd+0x1cc>
 8000fca:	e105      	b.n	80011d8 <__aeabi_dadd+0x3d8>
 8000fcc:	0022      	movs	r2, r4
 8000fce:	3a01      	subs	r2, #1
 8000fd0:	2c01      	cmp	r4, #1
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dadd+0x1d6>
 8000fd4:	e182      	b.n	80012dc <__aeabi_dadd+0x4dc>
 8000fd6:	4c64      	ldr	r4, [pc, #400]	; (8001168 <__aeabi_dadd+0x368>)
 8000fd8:	45a4      	cmp	ip, r4
 8000fda:	d05b      	beq.n	8001094 <__aeabi_dadd+0x294>
 8000fdc:	4694      	mov	ip, r2
 8000fde:	e741      	b.n	8000e64 <__aeabi_dadd+0x64>
 8000fe0:	4c63      	ldr	r4, [pc, #396]	; (8001170 <__aeabi_dadd+0x370>)
 8000fe2:	1c77      	adds	r7, r6, #1
 8000fe4:	4227      	tst	r7, r4
 8000fe6:	d000      	beq.n	8000fea <__aeabi_dadd+0x1ea>
 8000fe8:	e0c4      	b.n	8001174 <__aeabi_dadd+0x374>
 8000fea:	0004      	movs	r4, r0
 8000fec:	431c      	orrs	r4, r3
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_dadd+0x1f4>
 8000ff2:	e169      	b.n	80012c8 <__aeabi_dadd+0x4c8>
 8000ff4:	2c00      	cmp	r4, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_dadd+0x1fa>
 8000ff8:	e1bf      	b.n	800137a <__aeabi_dadd+0x57a>
 8000ffa:	4644      	mov	r4, r8
 8000ffc:	430c      	orrs	r4, r1
 8000ffe:	d000      	beq.n	8001002 <__aeabi_dadd+0x202>
 8001000:	e1d0      	b.n	80013a4 <__aeabi_dadd+0x5a4>
 8001002:	0742      	lsls	r2, r0, #29
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	4313      	orrs	r3, r2
 8001008:	08c0      	lsrs	r0, r0, #3
 800100a:	e029      	b.n	8001060 <__aeabi_dadd+0x260>
 800100c:	003a      	movs	r2, r7
 800100e:	430a      	orrs	r2, r1
 8001010:	d100      	bne.n	8001014 <__aeabi_dadd+0x214>
 8001012:	e170      	b.n	80012f6 <__aeabi_dadd+0x4f6>
 8001014:	4662      	mov	r2, ip
 8001016:	4664      	mov	r4, ip
 8001018:	3a01      	subs	r2, #1
 800101a:	2c01      	cmp	r4, #1
 800101c:	d100      	bne.n	8001020 <__aeabi_dadd+0x220>
 800101e:	e0e0      	b.n	80011e2 <__aeabi_dadd+0x3e2>
 8001020:	4c51      	ldr	r4, [pc, #324]	; (8001168 <__aeabi_dadd+0x368>)
 8001022:	45a4      	cmp	ip, r4
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x228>
 8001026:	e161      	b.n	80012ec <__aeabi_dadd+0x4ec>
 8001028:	4694      	mov	ip, r2
 800102a:	e7b4      	b.n	8000f96 <__aeabi_dadd+0x196>
 800102c:	003a      	movs	r2, r7
 800102e:	391f      	subs	r1, #31
 8001030:	40ca      	lsrs	r2, r1
 8001032:	0011      	movs	r1, r2
 8001034:	2b20      	cmp	r3, #32
 8001036:	d003      	beq.n	8001040 <__aeabi_dadd+0x240>
 8001038:	2240      	movs	r2, #64	; 0x40
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	409f      	lsls	r7, r3
 800103e:	433c      	orrs	r4, r7
 8001040:	1e63      	subs	r3, r4, #1
 8001042:	419c      	sbcs	r4, r3
 8001044:	2700      	movs	r7, #0
 8001046:	2600      	movs	r6, #0
 8001048:	430c      	orrs	r4, r1
 800104a:	0763      	lsls	r3, r4, #29
 800104c:	d000      	beq.n	8001050 <__aeabi_dadd+0x250>
 800104e:	e753      	b.n	8000ef8 <__aeabi_dadd+0xf8>
 8001050:	46b4      	mov	ip, r6
 8001052:	08e4      	lsrs	r4, r4, #3
 8001054:	077b      	lsls	r3, r7, #29
 8001056:	4323      	orrs	r3, r4
 8001058:	08f8      	lsrs	r0, r7, #3
 800105a:	4a43      	ldr	r2, [pc, #268]	; (8001168 <__aeabi_dadd+0x368>)
 800105c:	4594      	cmp	ip, r2
 800105e:	d01d      	beq.n	800109c <__aeabi_dadd+0x29c>
 8001060:	4662      	mov	r2, ip
 8001062:	0307      	lsls	r7, r0, #12
 8001064:	0552      	lsls	r2, r2, #21
 8001066:	0b3f      	lsrs	r7, r7, #12
 8001068:	0d52      	lsrs	r2, r2, #21
 800106a:	e760      	b.n	8000f2e <__aeabi_dadd+0x12e>
 800106c:	4644      	mov	r4, r8
 800106e:	430c      	orrs	r4, r1
 8001070:	1e62      	subs	r2, r4, #1
 8001072:	4194      	sbcs	r4, r2
 8001074:	18e4      	adds	r4, r4, r3
 8001076:	429c      	cmp	r4, r3
 8001078:	419b      	sbcs	r3, r3
 800107a:	425f      	negs	r7, r3
 800107c:	183f      	adds	r7, r7, r0
 800107e:	023b      	lsls	r3, r7, #8
 8001080:	d5e3      	bpl.n	800104a <__aeabi_dadd+0x24a>
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <__aeabi_dadd+0x368>)
 8001084:	3601      	adds	r6, #1
 8001086:	429e      	cmp	r6, r3
 8001088:	d000      	beq.n	800108c <__aeabi_dadd+0x28c>
 800108a:	e0b5      	b.n	80011f8 <__aeabi_dadd+0x3f8>
 800108c:	0032      	movs	r2, r6
 800108e:	2700      	movs	r7, #0
 8001090:	2300      	movs	r3, #0
 8001092:	e74c      	b.n	8000f2e <__aeabi_dadd+0x12e>
 8001094:	0742      	lsls	r2, r0, #29
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	4313      	orrs	r3, r2
 800109a:	08c0      	lsrs	r0, r0, #3
 800109c:	001a      	movs	r2, r3
 800109e:	4302      	orrs	r2, r0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dadd+0x2a4>
 80010a2:	e1e1      	b.n	8001468 <__aeabi_dadd+0x668>
 80010a4:	2780      	movs	r7, #128	; 0x80
 80010a6:	033f      	lsls	r7, r7, #12
 80010a8:	4307      	orrs	r7, r0
 80010aa:	033f      	lsls	r7, r7, #12
 80010ac:	4a2e      	ldr	r2, [pc, #184]	; (8001168 <__aeabi_dadd+0x368>)
 80010ae:	0b3f      	lsrs	r7, r7, #12
 80010b0:	e73d      	b.n	8000f2e <__aeabi_dadd+0x12e>
 80010b2:	0020      	movs	r0, r4
 80010b4:	f001 f8e2 	bl	800227c <__clzsi2>
 80010b8:	0001      	movs	r1, r0
 80010ba:	3118      	adds	r1, #24
 80010bc:	291f      	cmp	r1, #31
 80010be:	dc00      	bgt.n	80010c2 <__aeabi_dadd+0x2c2>
 80010c0:	e6fc      	b.n	8000ebc <__aeabi_dadd+0xbc>
 80010c2:	3808      	subs	r0, #8
 80010c4:	4084      	lsls	r4, r0
 80010c6:	0027      	movs	r7, r4
 80010c8:	2400      	movs	r4, #0
 80010ca:	42b1      	cmp	r1, r6
 80010cc:	db00      	blt.n	80010d0 <__aeabi_dadd+0x2d0>
 80010ce:	e6ff      	b.n	8000ed0 <__aeabi_dadd+0xd0>
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <__aeabi_dadd+0x36c>)
 80010d2:	1a76      	subs	r6, r6, r1
 80010d4:	4017      	ands	r7, r2
 80010d6:	e70d      	b.n	8000ef4 <__aeabi_dadd+0xf4>
 80010d8:	2a00      	cmp	r2, #0
 80010da:	d02f      	beq.n	800113c <__aeabi_dadd+0x33c>
 80010dc:	464a      	mov	r2, r9
 80010de:	1b92      	subs	r2, r2, r6
 80010e0:	4694      	mov	ip, r2
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dadd+0x2e8>
 80010e6:	e0ad      	b.n	8001244 <__aeabi_dadd+0x444>
 80010e8:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <__aeabi_dadd+0x368>)
 80010ea:	4591      	cmp	r9, r2
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dadd+0x2f0>
 80010ee:	e10f      	b.n	8001310 <__aeabi_dadd+0x510>
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	0412      	lsls	r2, r2, #16
 80010f4:	4310      	orrs	r0, r2
 80010f6:	4662      	mov	r2, ip
 80010f8:	2a38      	cmp	r2, #56	; 0x38
 80010fa:	dd00      	ble.n	80010fe <__aeabi_dadd+0x2fe>
 80010fc:	e10f      	b.n	800131e <__aeabi_dadd+0x51e>
 80010fe:	2a1f      	cmp	r2, #31
 8001100:	dd00      	ble.n	8001104 <__aeabi_dadd+0x304>
 8001102:	e180      	b.n	8001406 <__aeabi_dadd+0x606>
 8001104:	4664      	mov	r4, ip
 8001106:	2220      	movs	r2, #32
 8001108:	001e      	movs	r6, r3
 800110a:	1b12      	subs	r2, r2, r4
 800110c:	4667      	mov	r7, ip
 800110e:	0004      	movs	r4, r0
 8001110:	4093      	lsls	r3, r2
 8001112:	4094      	lsls	r4, r2
 8001114:	40fe      	lsrs	r6, r7
 8001116:	1e5a      	subs	r2, r3, #1
 8001118:	4193      	sbcs	r3, r2
 800111a:	40f8      	lsrs	r0, r7
 800111c:	4334      	orrs	r4, r6
 800111e:	431c      	orrs	r4, r3
 8001120:	4480      	add	r8, r0
 8001122:	1864      	adds	r4, r4, r1
 8001124:	428c      	cmp	r4, r1
 8001126:	41bf      	sbcs	r7, r7
 8001128:	427f      	negs	r7, r7
 800112a:	464e      	mov	r6, r9
 800112c:	4447      	add	r7, r8
 800112e:	e7a6      	b.n	800107e <__aeabi_dadd+0x27e>
 8001130:	4642      	mov	r2, r8
 8001132:	430a      	orrs	r2, r1
 8001134:	0011      	movs	r1, r2
 8001136:	1e4a      	subs	r2, r1, #1
 8001138:	4191      	sbcs	r1, r2
 800113a:	e6ad      	b.n	8000e98 <__aeabi_dadd+0x98>
 800113c:	4c0c      	ldr	r4, [pc, #48]	; (8001170 <__aeabi_dadd+0x370>)
 800113e:	1c72      	adds	r2, r6, #1
 8001140:	4222      	tst	r2, r4
 8001142:	d000      	beq.n	8001146 <__aeabi_dadd+0x346>
 8001144:	e0a1      	b.n	800128a <__aeabi_dadd+0x48a>
 8001146:	0002      	movs	r2, r0
 8001148:	431a      	orrs	r2, r3
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_dadd+0x350>
 800114e:	e0fa      	b.n	8001346 <__aeabi_dadd+0x546>
 8001150:	2a00      	cmp	r2, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x356>
 8001154:	e145      	b.n	80013e2 <__aeabi_dadd+0x5e2>
 8001156:	003a      	movs	r2, r7
 8001158:	430a      	orrs	r2, r1
 800115a:	d000      	beq.n	800115e <__aeabi_dadd+0x35e>
 800115c:	e146      	b.n	80013ec <__aeabi_dadd+0x5ec>
 800115e:	0742      	lsls	r2, r0, #29
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	4313      	orrs	r3, r2
 8001164:	08c0      	lsrs	r0, r0, #3
 8001166:	e77b      	b.n	8001060 <__aeabi_dadd+0x260>
 8001168:	000007ff 	.word	0x000007ff
 800116c:	ff7fffff 	.word	0xff7fffff
 8001170:	000007fe 	.word	0x000007fe
 8001174:	4647      	mov	r7, r8
 8001176:	1a5c      	subs	r4, r3, r1
 8001178:	1bc2      	subs	r2, r0, r7
 800117a:	42a3      	cmp	r3, r4
 800117c:	41bf      	sbcs	r7, r7
 800117e:	427f      	negs	r7, r7
 8001180:	46b9      	mov	r9, r7
 8001182:	0017      	movs	r7, r2
 8001184:	464a      	mov	r2, r9
 8001186:	1abf      	subs	r7, r7, r2
 8001188:	023a      	lsls	r2, r7, #8
 800118a:	d500      	bpl.n	800118e <__aeabi_dadd+0x38e>
 800118c:	e08d      	b.n	80012aa <__aeabi_dadd+0x4aa>
 800118e:	0023      	movs	r3, r4
 8001190:	433b      	orrs	r3, r7
 8001192:	d000      	beq.n	8001196 <__aeabi_dadd+0x396>
 8001194:	e68a      	b.n	8000eac <__aeabi_dadd+0xac>
 8001196:	2000      	movs	r0, #0
 8001198:	2500      	movs	r5, #0
 800119a:	e761      	b.n	8001060 <__aeabi_dadd+0x260>
 800119c:	4cb4      	ldr	r4, [pc, #720]	; (8001470 <__aeabi_dadd+0x670>)
 800119e:	45a1      	cmp	r9, r4
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dadd+0x3a4>
 80011a2:	e0ad      	b.n	8001300 <__aeabi_dadd+0x500>
 80011a4:	2480      	movs	r4, #128	; 0x80
 80011a6:	0424      	lsls	r4, r4, #16
 80011a8:	4320      	orrs	r0, r4
 80011aa:	4664      	mov	r4, ip
 80011ac:	2c38      	cmp	r4, #56	; 0x38
 80011ae:	dc3d      	bgt.n	800122c <__aeabi_dadd+0x42c>
 80011b0:	4662      	mov	r2, ip
 80011b2:	2c1f      	cmp	r4, #31
 80011b4:	dd00      	ble.n	80011b8 <__aeabi_dadd+0x3b8>
 80011b6:	e0b7      	b.n	8001328 <__aeabi_dadd+0x528>
 80011b8:	2520      	movs	r5, #32
 80011ba:	001e      	movs	r6, r3
 80011bc:	1b2d      	subs	r5, r5, r4
 80011be:	0004      	movs	r4, r0
 80011c0:	40ab      	lsls	r3, r5
 80011c2:	40ac      	lsls	r4, r5
 80011c4:	40d6      	lsrs	r6, r2
 80011c6:	40d0      	lsrs	r0, r2
 80011c8:	4642      	mov	r2, r8
 80011ca:	1e5d      	subs	r5, r3, #1
 80011cc:	41ab      	sbcs	r3, r5
 80011ce:	4334      	orrs	r4, r6
 80011d0:	1a12      	subs	r2, r2, r0
 80011d2:	4690      	mov	r8, r2
 80011d4:	4323      	orrs	r3, r4
 80011d6:	e02c      	b.n	8001232 <__aeabi_dadd+0x432>
 80011d8:	0742      	lsls	r2, r0, #29
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	4313      	orrs	r3, r2
 80011de:	08c0      	lsrs	r0, r0, #3
 80011e0:	e73b      	b.n	800105a <__aeabi_dadd+0x25a>
 80011e2:	185c      	adds	r4, r3, r1
 80011e4:	429c      	cmp	r4, r3
 80011e6:	419b      	sbcs	r3, r3
 80011e8:	4440      	add	r0, r8
 80011ea:	425b      	negs	r3, r3
 80011ec:	18c7      	adds	r7, r0, r3
 80011ee:	2601      	movs	r6, #1
 80011f0:	023b      	lsls	r3, r7, #8
 80011f2:	d400      	bmi.n	80011f6 <__aeabi_dadd+0x3f6>
 80011f4:	e729      	b.n	800104a <__aeabi_dadd+0x24a>
 80011f6:	2602      	movs	r6, #2
 80011f8:	4a9e      	ldr	r2, [pc, #632]	; (8001474 <__aeabi_dadd+0x674>)
 80011fa:	0863      	lsrs	r3, r4, #1
 80011fc:	4017      	ands	r7, r2
 80011fe:	2201      	movs	r2, #1
 8001200:	4014      	ands	r4, r2
 8001202:	431c      	orrs	r4, r3
 8001204:	07fb      	lsls	r3, r7, #31
 8001206:	431c      	orrs	r4, r3
 8001208:	087f      	lsrs	r7, r7, #1
 800120a:	e673      	b.n	8000ef4 <__aeabi_dadd+0xf4>
 800120c:	4644      	mov	r4, r8
 800120e:	3a20      	subs	r2, #32
 8001210:	40d4      	lsrs	r4, r2
 8001212:	4662      	mov	r2, ip
 8001214:	2a20      	cmp	r2, #32
 8001216:	d005      	beq.n	8001224 <__aeabi_dadd+0x424>
 8001218:	4667      	mov	r7, ip
 800121a:	2240      	movs	r2, #64	; 0x40
 800121c:	1bd2      	subs	r2, r2, r7
 800121e:	4647      	mov	r7, r8
 8001220:	4097      	lsls	r7, r2
 8001222:	4339      	orrs	r1, r7
 8001224:	1e4a      	subs	r2, r1, #1
 8001226:	4191      	sbcs	r1, r2
 8001228:	4321      	orrs	r1, r4
 800122a:	e635      	b.n	8000e98 <__aeabi_dadd+0x98>
 800122c:	4303      	orrs	r3, r0
 800122e:	1e58      	subs	r0, r3, #1
 8001230:	4183      	sbcs	r3, r0
 8001232:	1acc      	subs	r4, r1, r3
 8001234:	42a1      	cmp	r1, r4
 8001236:	41bf      	sbcs	r7, r7
 8001238:	4643      	mov	r3, r8
 800123a:	427f      	negs	r7, r7
 800123c:	4655      	mov	r5, sl
 800123e:	464e      	mov	r6, r9
 8001240:	1bdf      	subs	r7, r3, r7
 8001242:	e62e      	b.n	8000ea2 <__aeabi_dadd+0xa2>
 8001244:	0002      	movs	r2, r0
 8001246:	431a      	orrs	r2, r3
 8001248:	d100      	bne.n	800124c <__aeabi_dadd+0x44c>
 800124a:	e0bd      	b.n	80013c8 <__aeabi_dadd+0x5c8>
 800124c:	4662      	mov	r2, ip
 800124e:	4664      	mov	r4, ip
 8001250:	3a01      	subs	r2, #1
 8001252:	2c01      	cmp	r4, #1
 8001254:	d100      	bne.n	8001258 <__aeabi_dadd+0x458>
 8001256:	e0e5      	b.n	8001424 <__aeabi_dadd+0x624>
 8001258:	4c85      	ldr	r4, [pc, #532]	; (8001470 <__aeabi_dadd+0x670>)
 800125a:	45a4      	cmp	ip, r4
 800125c:	d058      	beq.n	8001310 <__aeabi_dadd+0x510>
 800125e:	4694      	mov	ip, r2
 8001260:	e749      	b.n	80010f6 <__aeabi_dadd+0x2f6>
 8001262:	4664      	mov	r4, ip
 8001264:	2220      	movs	r2, #32
 8001266:	1b12      	subs	r2, r2, r4
 8001268:	4644      	mov	r4, r8
 800126a:	4094      	lsls	r4, r2
 800126c:	000f      	movs	r7, r1
 800126e:	46a1      	mov	r9, r4
 8001270:	4664      	mov	r4, ip
 8001272:	4091      	lsls	r1, r2
 8001274:	40e7      	lsrs	r7, r4
 8001276:	464c      	mov	r4, r9
 8001278:	1e4a      	subs	r2, r1, #1
 800127a:	4191      	sbcs	r1, r2
 800127c:	433c      	orrs	r4, r7
 800127e:	4642      	mov	r2, r8
 8001280:	430c      	orrs	r4, r1
 8001282:	4661      	mov	r1, ip
 8001284:	40ca      	lsrs	r2, r1
 8001286:	1880      	adds	r0, r0, r2
 8001288:	e6f4      	b.n	8001074 <__aeabi_dadd+0x274>
 800128a:	4c79      	ldr	r4, [pc, #484]	; (8001470 <__aeabi_dadd+0x670>)
 800128c:	42a2      	cmp	r2, r4
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x492>
 8001290:	e6fd      	b.n	800108e <__aeabi_dadd+0x28e>
 8001292:	1859      	adds	r1, r3, r1
 8001294:	4299      	cmp	r1, r3
 8001296:	419b      	sbcs	r3, r3
 8001298:	4440      	add	r0, r8
 800129a:	425f      	negs	r7, r3
 800129c:	19c7      	adds	r7, r0, r7
 800129e:	07fc      	lsls	r4, r7, #31
 80012a0:	0849      	lsrs	r1, r1, #1
 80012a2:	0016      	movs	r6, r2
 80012a4:	430c      	orrs	r4, r1
 80012a6:	087f      	lsrs	r7, r7, #1
 80012a8:	e6cf      	b.n	800104a <__aeabi_dadd+0x24a>
 80012aa:	1acc      	subs	r4, r1, r3
 80012ac:	42a1      	cmp	r1, r4
 80012ae:	41bf      	sbcs	r7, r7
 80012b0:	4643      	mov	r3, r8
 80012b2:	427f      	negs	r7, r7
 80012b4:	1a18      	subs	r0, r3, r0
 80012b6:	4655      	mov	r5, sl
 80012b8:	1bc7      	subs	r7, r0, r7
 80012ba:	e5f7      	b.n	8000eac <__aeabi_dadd+0xac>
 80012bc:	08c9      	lsrs	r1, r1, #3
 80012be:	077b      	lsls	r3, r7, #29
 80012c0:	4655      	mov	r5, sl
 80012c2:	430b      	orrs	r3, r1
 80012c4:	08f8      	lsrs	r0, r7, #3
 80012c6:	e6c8      	b.n	800105a <__aeabi_dadd+0x25a>
 80012c8:	2c00      	cmp	r4, #0
 80012ca:	d000      	beq.n	80012ce <__aeabi_dadd+0x4ce>
 80012cc:	e081      	b.n	80013d2 <__aeabi_dadd+0x5d2>
 80012ce:	4643      	mov	r3, r8
 80012d0:	430b      	orrs	r3, r1
 80012d2:	d115      	bne.n	8001300 <__aeabi_dadd+0x500>
 80012d4:	2080      	movs	r0, #128	; 0x80
 80012d6:	2500      	movs	r5, #0
 80012d8:	0300      	lsls	r0, r0, #12
 80012da:	e6e3      	b.n	80010a4 <__aeabi_dadd+0x2a4>
 80012dc:	1a5c      	subs	r4, r3, r1
 80012de:	42a3      	cmp	r3, r4
 80012e0:	419b      	sbcs	r3, r3
 80012e2:	1bc7      	subs	r7, r0, r7
 80012e4:	425b      	negs	r3, r3
 80012e6:	2601      	movs	r6, #1
 80012e8:	1aff      	subs	r7, r7, r3
 80012ea:	e5da      	b.n	8000ea2 <__aeabi_dadd+0xa2>
 80012ec:	0742      	lsls	r2, r0, #29
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	08c0      	lsrs	r0, r0, #3
 80012f4:	e6d2      	b.n	800109c <__aeabi_dadd+0x29c>
 80012f6:	0742      	lsls	r2, r0, #29
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	08c0      	lsrs	r0, r0, #3
 80012fe:	e6ac      	b.n	800105a <__aeabi_dadd+0x25a>
 8001300:	4643      	mov	r3, r8
 8001302:	4642      	mov	r2, r8
 8001304:	08c9      	lsrs	r1, r1, #3
 8001306:	075b      	lsls	r3, r3, #29
 8001308:	4655      	mov	r5, sl
 800130a:	430b      	orrs	r3, r1
 800130c:	08d0      	lsrs	r0, r2, #3
 800130e:	e6c5      	b.n	800109c <__aeabi_dadd+0x29c>
 8001310:	4643      	mov	r3, r8
 8001312:	4642      	mov	r2, r8
 8001314:	075b      	lsls	r3, r3, #29
 8001316:	08c9      	lsrs	r1, r1, #3
 8001318:	430b      	orrs	r3, r1
 800131a:	08d0      	lsrs	r0, r2, #3
 800131c:	e6be      	b.n	800109c <__aeabi_dadd+0x29c>
 800131e:	4303      	orrs	r3, r0
 8001320:	001c      	movs	r4, r3
 8001322:	1e63      	subs	r3, r4, #1
 8001324:	419c      	sbcs	r4, r3
 8001326:	e6fc      	b.n	8001122 <__aeabi_dadd+0x322>
 8001328:	0002      	movs	r2, r0
 800132a:	3c20      	subs	r4, #32
 800132c:	40e2      	lsrs	r2, r4
 800132e:	0014      	movs	r4, r2
 8001330:	4662      	mov	r2, ip
 8001332:	2a20      	cmp	r2, #32
 8001334:	d003      	beq.n	800133e <__aeabi_dadd+0x53e>
 8001336:	2540      	movs	r5, #64	; 0x40
 8001338:	1aad      	subs	r5, r5, r2
 800133a:	40a8      	lsls	r0, r5
 800133c:	4303      	orrs	r3, r0
 800133e:	1e58      	subs	r0, r3, #1
 8001340:	4183      	sbcs	r3, r0
 8001342:	4323      	orrs	r3, r4
 8001344:	e775      	b.n	8001232 <__aeabi_dadd+0x432>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d0e2      	beq.n	8001310 <__aeabi_dadd+0x510>
 800134a:	003a      	movs	r2, r7
 800134c:	430a      	orrs	r2, r1
 800134e:	d0cd      	beq.n	80012ec <__aeabi_dadd+0x4ec>
 8001350:	0742      	lsls	r2, r0, #29
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	4313      	orrs	r3, r2
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	08c0      	lsrs	r0, r0, #3
 800135a:	0312      	lsls	r2, r2, #12
 800135c:	4210      	tst	r0, r2
 800135e:	d006      	beq.n	800136e <__aeabi_dadd+0x56e>
 8001360:	08fc      	lsrs	r4, r7, #3
 8001362:	4214      	tst	r4, r2
 8001364:	d103      	bne.n	800136e <__aeabi_dadd+0x56e>
 8001366:	0020      	movs	r0, r4
 8001368:	08cb      	lsrs	r3, r1, #3
 800136a:	077a      	lsls	r2, r7, #29
 800136c:	4313      	orrs	r3, r2
 800136e:	0f5a      	lsrs	r2, r3, #29
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	0752      	lsls	r2, r2, #29
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	4313      	orrs	r3, r2
 8001378:	e690      	b.n	800109c <__aeabi_dadd+0x29c>
 800137a:	4643      	mov	r3, r8
 800137c:	430b      	orrs	r3, r1
 800137e:	d100      	bne.n	8001382 <__aeabi_dadd+0x582>
 8001380:	e709      	b.n	8001196 <__aeabi_dadd+0x396>
 8001382:	4643      	mov	r3, r8
 8001384:	4642      	mov	r2, r8
 8001386:	08c9      	lsrs	r1, r1, #3
 8001388:	075b      	lsls	r3, r3, #29
 800138a:	4655      	mov	r5, sl
 800138c:	430b      	orrs	r3, r1
 800138e:	08d0      	lsrs	r0, r2, #3
 8001390:	e666      	b.n	8001060 <__aeabi_dadd+0x260>
 8001392:	1acc      	subs	r4, r1, r3
 8001394:	42a1      	cmp	r1, r4
 8001396:	4189      	sbcs	r1, r1
 8001398:	1a3f      	subs	r7, r7, r0
 800139a:	4249      	negs	r1, r1
 800139c:	4655      	mov	r5, sl
 800139e:	2601      	movs	r6, #1
 80013a0:	1a7f      	subs	r7, r7, r1
 80013a2:	e57e      	b.n	8000ea2 <__aeabi_dadd+0xa2>
 80013a4:	4642      	mov	r2, r8
 80013a6:	1a5c      	subs	r4, r3, r1
 80013a8:	1a87      	subs	r7, r0, r2
 80013aa:	42a3      	cmp	r3, r4
 80013ac:	4192      	sbcs	r2, r2
 80013ae:	4252      	negs	r2, r2
 80013b0:	1abf      	subs	r7, r7, r2
 80013b2:	023a      	lsls	r2, r7, #8
 80013b4:	d53d      	bpl.n	8001432 <__aeabi_dadd+0x632>
 80013b6:	1acc      	subs	r4, r1, r3
 80013b8:	42a1      	cmp	r1, r4
 80013ba:	4189      	sbcs	r1, r1
 80013bc:	4643      	mov	r3, r8
 80013be:	4249      	negs	r1, r1
 80013c0:	1a1f      	subs	r7, r3, r0
 80013c2:	4655      	mov	r5, sl
 80013c4:	1a7f      	subs	r7, r7, r1
 80013c6:	e595      	b.n	8000ef4 <__aeabi_dadd+0xf4>
 80013c8:	077b      	lsls	r3, r7, #29
 80013ca:	08c9      	lsrs	r1, r1, #3
 80013cc:	430b      	orrs	r3, r1
 80013ce:	08f8      	lsrs	r0, r7, #3
 80013d0:	e643      	b.n	800105a <__aeabi_dadd+0x25a>
 80013d2:	4644      	mov	r4, r8
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	430c      	orrs	r4, r1
 80013d8:	d130      	bne.n	800143c <__aeabi_dadd+0x63c>
 80013da:	0742      	lsls	r2, r0, #29
 80013dc:	4313      	orrs	r3, r2
 80013de:	08c0      	lsrs	r0, r0, #3
 80013e0:	e65c      	b.n	800109c <__aeabi_dadd+0x29c>
 80013e2:	077b      	lsls	r3, r7, #29
 80013e4:	08c9      	lsrs	r1, r1, #3
 80013e6:	430b      	orrs	r3, r1
 80013e8:	08f8      	lsrs	r0, r7, #3
 80013ea:	e639      	b.n	8001060 <__aeabi_dadd+0x260>
 80013ec:	185c      	adds	r4, r3, r1
 80013ee:	429c      	cmp	r4, r3
 80013f0:	419b      	sbcs	r3, r3
 80013f2:	4440      	add	r0, r8
 80013f4:	425b      	negs	r3, r3
 80013f6:	18c7      	adds	r7, r0, r3
 80013f8:	023b      	lsls	r3, r7, #8
 80013fa:	d400      	bmi.n	80013fe <__aeabi_dadd+0x5fe>
 80013fc:	e625      	b.n	800104a <__aeabi_dadd+0x24a>
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <__aeabi_dadd+0x674>)
 8001400:	2601      	movs	r6, #1
 8001402:	401f      	ands	r7, r3
 8001404:	e621      	b.n	800104a <__aeabi_dadd+0x24a>
 8001406:	0004      	movs	r4, r0
 8001408:	3a20      	subs	r2, #32
 800140a:	40d4      	lsrs	r4, r2
 800140c:	4662      	mov	r2, ip
 800140e:	2a20      	cmp	r2, #32
 8001410:	d004      	beq.n	800141c <__aeabi_dadd+0x61c>
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	4666      	mov	r6, ip
 8001416:	1b92      	subs	r2, r2, r6
 8001418:	4090      	lsls	r0, r2
 800141a:	4303      	orrs	r3, r0
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	4193      	sbcs	r3, r2
 8001420:	431c      	orrs	r4, r3
 8001422:	e67e      	b.n	8001122 <__aeabi_dadd+0x322>
 8001424:	185c      	adds	r4, r3, r1
 8001426:	428c      	cmp	r4, r1
 8001428:	4189      	sbcs	r1, r1
 800142a:	4440      	add	r0, r8
 800142c:	4249      	negs	r1, r1
 800142e:	1847      	adds	r7, r0, r1
 8001430:	e6dd      	b.n	80011ee <__aeabi_dadd+0x3ee>
 8001432:	0023      	movs	r3, r4
 8001434:	433b      	orrs	r3, r7
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x63a>
 8001438:	e6ad      	b.n	8001196 <__aeabi_dadd+0x396>
 800143a:	e606      	b.n	800104a <__aeabi_dadd+0x24a>
 800143c:	0744      	lsls	r4, r0, #29
 800143e:	4323      	orrs	r3, r4
 8001440:	2480      	movs	r4, #128	; 0x80
 8001442:	08c0      	lsrs	r0, r0, #3
 8001444:	0324      	lsls	r4, r4, #12
 8001446:	4220      	tst	r0, r4
 8001448:	d008      	beq.n	800145c <__aeabi_dadd+0x65c>
 800144a:	4642      	mov	r2, r8
 800144c:	08d6      	lsrs	r6, r2, #3
 800144e:	4226      	tst	r6, r4
 8001450:	d104      	bne.n	800145c <__aeabi_dadd+0x65c>
 8001452:	4655      	mov	r5, sl
 8001454:	0030      	movs	r0, r6
 8001456:	08cb      	lsrs	r3, r1, #3
 8001458:	0751      	lsls	r1, r2, #29
 800145a:	430b      	orrs	r3, r1
 800145c:	0f5a      	lsrs	r2, r3, #29
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	0752      	lsls	r2, r2, #29
 8001464:	4313      	orrs	r3, r2
 8001466:	e619      	b.n	800109c <__aeabi_dadd+0x29c>
 8001468:	2300      	movs	r3, #0
 800146a:	4a01      	ldr	r2, [pc, #4]	; (8001470 <__aeabi_dadd+0x670>)
 800146c:	001f      	movs	r7, r3
 800146e:	e55e      	b.n	8000f2e <__aeabi_dadd+0x12e>
 8001470:	000007ff 	.word	0x000007ff
 8001474:	ff7fffff 	.word	0xff7fffff

08001478 <__aeabi_dmul>:
 8001478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147a:	4657      	mov	r7, sl
 800147c:	464e      	mov	r6, r9
 800147e:	4645      	mov	r5, r8
 8001480:	46de      	mov	lr, fp
 8001482:	b5e0      	push	{r5, r6, r7, lr}
 8001484:	4698      	mov	r8, r3
 8001486:	030c      	lsls	r4, r1, #12
 8001488:	004b      	lsls	r3, r1, #1
 800148a:	0006      	movs	r6, r0
 800148c:	4692      	mov	sl, r2
 800148e:	b087      	sub	sp, #28
 8001490:	0b24      	lsrs	r4, r4, #12
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fcf      	lsrs	r7, r1, #31
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <__aeabi_dmul+0x24>
 800149a:	e15c      	b.n	8001756 <__aeabi_dmul+0x2de>
 800149c:	4ad9      	ldr	r2, [pc, #868]	; (8001804 <__aeabi_dmul+0x38c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dmul+0x2c>
 80014a2:	e175      	b.n	8001790 <__aeabi_dmul+0x318>
 80014a4:	0f42      	lsrs	r2, r0, #29
 80014a6:	00e4      	lsls	r4, r4, #3
 80014a8:	4314      	orrs	r4, r2
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	0412      	lsls	r2, r2, #16
 80014ae:	4314      	orrs	r4, r2
 80014b0:	4ad5      	ldr	r2, [pc, #852]	; (8001808 <__aeabi_dmul+0x390>)
 80014b2:	00c5      	lsls	r5, r0, #3
 80014b4:	4694      	mov	ip, r2
 80014b6:	4463      	add	r3, ip
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2300      	movs	r3, #0
 80014bc:	4699      	mov	r9, r3
 80014be:	469b      	mov	fp, r3
 80014c0:	4643      	mov	r3, r8
 80014c2:	4642      	mov	r2, r8
 80014c4:	031e      	lsls	r6, r3, #12
 80014c6:	0fd2      	lsrs	r2, r2, #31
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4650      	mov	r0, sl
 80014cc:	4690      	mov	r8, r2
 80014ce:	0b36      	lsrs	r6, r6, #12
 80014d0:	0d5b      	lsrs	r3, r3, #21
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dmul+0x5e>
 80014d4:	e120      	b.n	8001718 <__aeabi_dmul+0x2a0>
 80014d6:	4acb      	ldr	r2, [pc, #812]	; (8001804 <__aeabi_dmul+0x38c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x66>
 80014dc:	e162      	b.n	80017a4 <__aeabi_dmul+0x32c>
 80014de:	49ca      	ldr	r1, [pc, #808]	; (8001808 <__aeabi_dmul+0x390>)
 80014e0:	0f42      	lsrs	r2, r0, #29
 80014e2:	468c      	mov	ip, r1
 80014e4:	9900      	ldr	r1, [sp, #0]
 80014e6:	4463      	add	r3, ip
 80014e8:	00f6      	lsls	r6, r6, #3
 80014ea:	468c      	mov	ip, r1
 80014ec:	4316      	orrs	r6, r2
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	449c      	add	ip, r3
 80014f2:	0412      	lsls	r2, r2, #16
 80014f4:	4663      	mov	r3, ip
 80014f6:	4316      	orrs	r6, r2
 80014f8:	00c2      	lsls	r2, r0, #3
 80014fa:	2000      	movs	r0, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	9900      	ldr	r1, [sp, #0]
 8001500:	4643      	mov	r3, r8
 8001502:	3101      	adds	r1, #1
 8001504:	468c      	mov	ip, r1
 8001506:	4649      	mov	r1, r9
 8001508:	407b      	eors	r3, r7
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	290f      	cmp	r1, #15
 800150e:	d826      	bhi.n	800155e <__aeabi_dmul+0xe6>
 8001510:	4bbe      	ldr	r3, [pc, #760]	; (800180c <__aeabi_dmul+0x394>)
 8001512:	0089      	lsls	r1, r1, #2
 8001514:	5859      	ldr	r1, [r3, r1]
 8001516:	468f      	mov	pc, r1
 8001518:	4643      	mov	r3, r8
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	0034      	movs	r4, r6
 800151e:	0015      	movs	r5, r2
 8001520:	4683      	mov	fp, r0
 8001522:	465b      	mov	r3, fp
 8001524:	2b02      	cmp	r3, #2
 8001526:	d016      	beq.n	8001556 <__aeabi_dmul+0xde>
 8001528:	2b03      	cmp	r3, #3
 800152a:	d100      	bne.n	800152e <__aeabi_dmul+0xb6>
 800152c:	e203      	b.n	8001936 <__aeabi_dmul+0x4be>
 800152e:	2b01      	cmp	r3, #1
 8001530:	d000      	beq.n	8001534 <__aeabi_dmul+0xbc>
 8001532:	e0cd      	b.n	80016d0 <__aeabi_dmul+0x258>
 8001534:	2200      	movs	r2, #0
 8001536:	2400      	movs	r4, #0
 8001538:	2500      	movs	r5, #0
 800153a:	9b01      	ldr	r3, [sp, #4]
 800153c:	0512      	lsls	r2, r2, #20
 800153e:	4322      	orrs	r2, r4
 8001540:	07db      	lsls	r3, r3, #31
 8001542:	431a      	orrs	r2, r3
 8001544:	0028      	movs	r0, r5
 8001546:	0011      	movs	r1, r2
 8001548:	b007      	add	sp, #28
 800154a:	bcf0      	pop	{r4, r5, r6, r7}
 800154c:	46bb      	mov	fp, r7
 800154e:	46b2      	mov	sl, r6
 8001550:	46a9      	mov	r9, r5
 8001552:	46a0      	mov	r8, r4
 8001554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001556:	2400      	movs	r4, #0
 8001558:	2500      	movs	r5, #0
 800155a:	4aaa      	ldr	r2, [pc, #680]	; (8001804 <__aeabi_dmul+0x38c>)
 800155c:	e7ed      	b.n	800153a <__aeabi_dmul+0xc2>
 800155e:	0c28      	lsrs	r0, r5, #16
 8001560:	042d      	lsls	r5, r5, #16
 8001562:	0c2d      	lsrs	r5, r5, #16
 8001564:	002b      	movs	r3, r5
 8001566:	0c11      	lsrs	r1, r2, #16
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	0c12      	lsrs	r2, r2, #16
 800156c:	4353      	muls	r3, r2
 800156e:	4698      	mov	r8, r3
 8001570:	0013      	movs	r3, r2
 8001572:	002f      	movs	r7, r5
 8001574:	4343      	muls	r3, r0
 8001576:	4699      	mov	r9, r3
 8001578:	434f      	muls	r7, r1
 800157a:	444f      	add	r7, r9
 800157c:	46bb      	mov	fp, r7
 800157e:	4647      	mov	r7, r8
 8001580:	000b      	movs	r3, r1
 8001582:	0c3f      	lsrs	r7, r7, #16
 8001584:	46ba      	mov	sl, r7
 8001586:	4343      	muls	r3, r0
 8001588:	44da      	add	sl, fp
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	45d1      	cmp	r9, sl
 800158e:	d904      	bls.n	800159a <__aeabi_dmul+0x122>
 8001590:	2780      	movs	r7, #128	; 0x80
 8001592:	027f      	lsls	r7, r7, #9
 8001594:	46b9      	mov	r9, r7
 8001596:	444b      	add	r3, r9
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	4653      	mov	r3, sl
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	469b      	mov	fp, r3
 80015a0:	4653      	mov	r3, sl
 80015a2:	041f      	lsls	r7, r3, #16
 80015a4:	4643      	mov	r3, r8
 80015a6:	041b      	lsls	r3, r3, #16
 80015a8:	0c1b      	lsrs	r3, r3, #16
 80015aa:	4698      	mov	r8, r3
 80015ac:	003b      	movs	r3, r7
 80015ae:	4443      	add	r3, r8
 80015b0:	9304      	str	r3, [sp, #16]
 80015b2:	0c33      	lsrs	r3, r6, #16
 80015b4:	0436      	lsls	r6, r6, #16
 80015b6:	0c36      	lsrs	r6, r6, #16
 80015b8:	4698      	mov	r8, r3
 80015ba:	0033      	movs	r3, r6
 80015bc:	4343      	muls	r3, r0
 80015be:	4699      	mov	r9, r3
 80015c0:	4643      	mov	r3, r8
 80015c2:	4343      	muls	r3, r0
 80015c4:	002f      	movs	r7, r5
 80015c6:	469a      	mov	sl, r3
 80015c8:	4643      	mov	r3, r8
 80015ca:	4377      	muls	r7, r6
 80015cc:	435d      	muls	r5, r3
 80015ce:	0c38      	lsrs	r0, r7, #16
 80015d0:	444d      	add	r5, r9
 80015d2:	1945      	adds	r5, r0, r5
 80015d4:	45a9      	cmp	r9, r5
 80015d6:	d903      	bls.n	80015e0 <__aeabi_dmul+0x168>
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	4699      	mov	r9, r3
 80015de:	44ca      	add	sl, r9
 80015e0:	043f      	lsls	r7, r7, #16
 80015e2:	0c28      	lsrs	r0, r5, #16
 80015e4:	0c3f      	lsrs	r7, r7, #16
 80015e6:	042d      	lsls	r5, r5, #16
 80015e8:	19ed      	adds	r5, r5, r7
 80015ea:	0c27      	lsrs	r7, r4, #16
 80015ec:	0424      	lsls	r4, r4, #16
 80015ee:	0c24      	lsrs	r4, r4, #16
 80015f0:	0003      	movs	r3, r0
 80015f2:	0020      	movs	r0, r4
 80015f4:	4350      	muls	r0, r2
 80015f6:	437a      	muls	r2, r7
 80015f8:	4691      	mov	r9, r2
 80015fa:	003a      	movs	r2, r7
 80015fc:	4453      	add	r3, sl
 80015fe:	9305      	str	r3, [sp, #20]
 8001600:	0c03      	lsrs	r3, r0, #16
 8001602:	469a      	mov	sl, r3
 8001604:	434a      	muls	r2, r1
 8001606:	4361      	muls	r1, r4
 8001608:	4449      	add	r1, r9
 800160a:	4451      	add	r1, sl
 800160c:	44ab      	add	fp, r5
 800160e:	4589      	cmp	r9, r1
 8001610:	d903      	bls.n	800161a <__aeabi_dmul+0x1a2>
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	025b      	lsls	r3, r3, #9
 8001616:	4699      	mov	r9, r3
 8001618:	444a      	add	r2, r9
 800161a:	0400      	lsls	r0, r0, #16
 800161c:	0c0b      	lsrs	r3, r1, #16
 800161e:	0c00      	lsrs	r0, r0, #16
 8001620:	0409      	lsls	r1, r1, #16
 8001622:	1809      	adds	r1, r1, r0
 8001624:	0020      	movs	r0, r4
 8001626:	4699      	mov	r9, r3
 8001628:	4643      	mov	r3, r8
 800162a:	4370      	muls	r0, r6
 800162c:	435c      	muls	r4, r3
 800162e:	437e      	muls	r6, r7
 8001630:	435f      	muls	r7, r3
 8001632:	0c03      	lsrs	r3, r0, #16
 8001634:	4698      	mov	r8, r3
 8001636:	19a4      	adds	r4, r4, r6
 8001638:	4444      	add	r4, r8
 800163a:	444a      	add	r2, r9
 800163c:	9703      	str	r7, [sp, #12]
 800163e:	42a6      	cmp	r6, r4
 8001640:	d904      	bls.n	800164c <__aeabi_dmul+0x1d4>
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	025b      	lsls	r3, r3, #9
 8001646:	4698      	mov	r8, r3
 8001648:	4447      	add	r7, r8
 800164a:	9703      	str	r7, [sp, #12]
 800164c:	0423      	lsls	r3, r4, #16
 800164e:	9e02      	ldr	r6, [sp, #8]
 8001650:	469a      	mov	sl, r3
 8001652:	9b05      	ldr	r3, [sp, #20]
 8001654:	445e      	add	r6, fp
 8001656:	4698      	mov	r8, r3
 8001658:	42ae      	cmp	r6, r5
 800165a:	41ad      	sbcs	r5, r5
 800165c:	1876      	adds	r6, r6, r1
 800165e:	428e      	cmp	r6, r1
 8001660:	4189      	sbcs	r1, r1
 8001662:	0400      	lsls	r0, r0, #16
 8001664:	0c00      	lsrs	r0, r0, #16
 8001666:	4450      	add	r0, sl
 8001668:	4440      	add	r0, r8
 800166a:	426d      	negs	r5, r5
 800166c:	1947      	adds	r7, r0, r5
 800166e:	46b8      	mov	r8, r7
 8001670:	4693      	mov	fp, r2
 8001672:	4249      	negs	r1, r1
 8001674:	4689      	mov	r9, r1
 8001676:	44c3      	add	fp, r8
 8001678:	44d9      	add	r9, fp
 800167a:	4298      	cmp	r0, r3
 800167c:	4180      	sbcs	r0, r0
 800167e:	45a8      	cmp	r8, r5
 8001680:	41ad      	sbcs	r5, r5
 8001682:	4593      	cmp	fp, r2
 8001684:	4192      	sbcs	r2, r2
 8001686:	4589      	cmp	r9, r1
 8001688:	4189      	sbcs	r1, r1
 800168a:	426d      	negs	r5, r5
 800168c:	4240      	negs	r0, r0
 800168e:	4328      	orrs	r0, r5
 8001690:	0c24      	lsrs	r4, r4, #16
 8001692:	4252      	negs	r2, r2
 8001694:	4249      	negs	r1, r1
 8001696:	430a      	orrs	r2, r1
 8001698:	9b03      	ldr	r3, [sp, #12]
 800169a:	1900      	adds	r0, r0, r4
 800169c:	1880      	adds	r0, r0, r2
 800169e:	18c7      	adds	r7, r0, r3
 80016a0:	464b      	mov	r3, r9
 80016a2:	0ddc      	lsrs	r4, r3, #23
 80016a4:	9b04      	ldr	r3, [sp, #16]
 80016a6:	0275      	lsls	r5, r6, #9
 80016a8:	431d      	orrs	r5, r3
 80016aa:	1e6a      	subs	r2, r5, #1
 80016ac:	4195      	sbcs	r5, r2
 80016ae:	464b      	mov	r3, r9
 80016b0:	0df6      	lsrs	r6, r6, #23
 80016b2:	027f      	lsls	r7, r7, #9
 80016b4:	4335      	orrs	r5, r6
 80016b6:	025a      	lsls	r2, r3, #9
 80016b8:	433c      	orrs	r4, r7
 80016ba:	4315      	orrs	r5, r2
 80016bc:	01fb      	lsls	r3, r7, #7
 80016be:	d400      	bmi.n	80016c2 <__aeabi_dmul+0x24a>
 80016c0:	e11c      	b.n	80018fc <__aeabi_dmul+0x484>
 80016c2:	2101      	movs	r1, #1
 80016c4:	086a      	lsrs	r2, r5, #1
 80016c6:	400d      	ands	r5, r1
 80016c8:	4315      	orrs	r5, r2
 80016ca:	07e2      	lsls	r2, r4, #31
 80016cc:	4315      	orrs	r5, r2
 80016ce:	0864      	lsrs	r4, r4, #1
 80016d0:	494f      	ldr	r1, [pc, #316]	; (8001810 <__aeabi_dmul+0x398>)
 80016d2:	4461      	add	r1, ip
 80016d4:	2900      	cmp	r1, #0
 80016d6:	dc00      	bgt.n	80016da <__aeabi_dmul+0x262>
 80016d8:	e0b0      	b.n	800183c <__aeabi_dmul+0x3c4>
 80016da:	076b      	lsls	r3, r5, #29
 80016dc:	d009      	beq.n	80016f2 <__aeabi_dmul+0x27a>
 80016de:	220f      	movs	r2, #15
 80016e0:	402a      	ands	r2, r5
 80016e2:	2a04      	cmp	r2, #4
 80016e4:	d005      	beq.n	80016f2 <__aeabi_dmul+0x27a>
 80016e6:	1d2a      	adds	r2, r5, #4
 80016e8:	42aa      	cmp	r2, r5
 80016ea:	41ad      	sbcs	r5, r5
 80016ec:	426d      	negs	r5, r5
 80016ee:	1964      	adds	r4, r4, r5
 80016f0:	0015      	movs	r5, r2
 80016f2:	01e3      	lsls	r3, r4, #7
 80016f4:	d504      	bpl.n	8001700 <__aeabi_dmul+0x288>
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	4a46      	ldr	r2, [pc, #280]	; (8001814 <__aeabi_dmul+0x39c>)
 80016fa:	00c9      	lsls	r1, r1, #3
 80016fc:	4014      	ands	r4, r2
 80016fe:	4461      	add	r1, ip
 8001700:	4a45      	ldr	r2, [pc, #276]	; (8001818 <__aeabi_dmul+0x3a0>)
 8001702:	4291      	cmp	r1, r2
 8001704:	dd00      	ble.n	8001708 <__aeabi_dmul+0x290>
 8001706:	e726      	b.n	8001556 <__aeabi_dmul+0xde>
 8001708:	0762      	lsls	r2, r4, #29
 800170a:	08ed      	lsrs	r5, r5, #3
 800170c:	0264      	lsls	r4, r4, #9
 800170e:	0549      	lsls	r1, r1, #21
 8001710:	4315      	orrs	r5, r2
 8001712:	0b24      	lsrs	r4, r4, #12
 8001714:	0d4a      	lsrs	r2, r1, #21
 8001716:	e710      	b.n	800153a <__aeabi_dmul+0xc2>
 8001718:	4652      	mov	r2, sl
 800171a:	4332      	orrs	r2, r6
 800171c:	d100      	bne.n	8001720 <__aeabi_dmul+0x2a8>
 800171e:	e07f      	b.n	8001820 <__aeabi_dmul+0x3a8>
 8001720:	2e00      	cmp	r6, #0
 8001722:	d100      	bne.n	8001726 <__aeabi_dmul+0x2ae>
 8001724:	e0dc      	b.n	80018e0 <__aeabi_dmul+0x468>
 8001726:	0030      	movs	r0, r6
 8001728:	f000 fda8 	bl	800227c <__clzsi2>
 800172c:	0002      	movs	r2, r0
 800172e:	3a0b      	subs	r2, #11
 8001730:	231d      	movs	r3, #29
 8001732:	0001      	movs	r1, r0
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	4652      	mov	r2, sl
 8001738:	3908      	subs	r1, #8
 800173a:	40da      	lsrs	r2, r3
 800173c:	408e      	lsls	r6, r1
 800173e:	4316      	orrs	r6, r2
 8001740:	4652      	mov	r2, sl
 8001742:	408a      	lsls	r2, r1
 8001744:	9b00      	ldr	r3, [sp, #0]
 8001746:	4935      	ldr	r1, [pc, #212]	; (800181c <__aeabi_dmul+0x3a4>)
 8001748:	1a18      	subs	r0, r3, r0
 800174a:	0003      	movs	r3, r0
 800174c:	468c      	mov	ip, r1
 800174e:	4463      	add	r3, ip
 8001750:	2000      	movs	r0, #0
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	e6d3      	b.n	80014fe <__aeabi_dmul+0x86>
 8001756:	0025      	movs	r5, r4
 8001758:	4305      	orrs	r5, r0
 800175a:	d04a      	beq.n	80017f2 <__aeabi_dmul+0x37a>
 800175c:	2c00      	cmp	r4, #0
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0x2ea>
 8001760:	e0b0      	b.n	80018c4 <__aeabi_dmul+0x44c>
 8001762:	0020      	movs	r0, r4
 8001764:	f000 fd8a 	bl	800227c <__clzsi2>
 8001768:	0001      	movs	r1, r0
 800176a:	0002      	movs	r2, r0
 800176c:	390b      	subs	r1, #11
 800176e:	231d      	movs	r3, #29
 8001770:	0010      	movs	r0, r2
 8001772:	1a5b      	subs	r3, r3, r1
 8001774:	0031      	movs	r1, r6
 8001776:	0035      	movs	r5, r6
 8001778:	3808      	subs	r0, #8
 800177a:	4084      	lsls	r4, r0
 800177c:	40d9      	lsrs	r1, r3
 800177e:	4085      	lsls	r5, r0
 8001780:	430c      	orrs	r4, r1
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <__aeabi_dmul+0x3a4>)
 8001784:	1a83      	subs	r3, r0, r2
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	4699      	mov	r9, r3
 800178c:	469b      	mov	fp, r3
 800178e:	e697      	b.n	80014c0 <__aeabi_dmul+0x48>
 8001790:	0005      	movs	r5, r0
 8001792:	4325      	orrs	r5, r4
 8001794:	d126      	bne.n	80017e4 <__aeabi_dmul+0x36c>
 8001796:	2208      	movs	r2, #8
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2302      	movs	r3, #2
 800179c:	2400      	movs	r4, #0
 800179e:	4691      	mov	r9, r2
 80017a0:	469b      	mov	fp, r3
 80017a2:	e68d      	b.n	80014c0 <__aeabi_dmul+0x48>
 80017a4:	4652      	mov	r2, sl
 80017a6:	9b00      	ldr	r3, [sp, #0]
 80017a8:	4332      	orrs	r2, r6
 80017aa:	d110      	bne.n	80017ce <__aeabi_dmul+0x356>
 80017ac:	4915      	ldr	r1, [pc, #84]	; (8001804 <__aeabi_dmul+0x38c>)
 80017ae:	2600      	movs	r6, #0
 80017b0:	468c      	mov	ip, r1
 80017b2:	4463      	add	r3, ip
 80017b4:	4649      	mov	r1, r9
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2302      	movs	r3, #2
 80017ba:	4319      	orrs	r1, r3
 80017bc:	4689      	mov	r9, r1
 80017be:	2002      	movs	r0, #2
 80017c0:	e69d      	b.n	80014fe <__aeabi_dmul+0x86>
 80017c2:	465b      	mov	r3, fp
 80017c4:	9701      	str	r7, [sp, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d000      	beq.n	80017cc <__aeabi_dmul+0x354>
 80017ca:	e6ad      	b.n	8001528 <__aeabi_dmul+0xb0>
 80017cc:	e6c3      	b.n	8001556 <__aeabi_dmul+0xde>
 80017ce:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <__aeabi_dmul+0x38c>)
 80017d0:	2003      	movs	r0, #3
 80017d2:	4694      	mov	ip, r2
 80017d4:	4463      	add	r3, ip
 80017d6:	464a      	mov	r2, r9
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2303      	movs	r3, #3
 80017dc:	431a      	orrs	r2, r3
 80017de:	4691      	mov	r9, r2
 80017e0:	4652      	mov	r2, sl
 80017e2:	e68c      	b.n	80014fe <__aeabi_dmul+0x86>
 80017e4:	220c      	movs	r2, #12
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2303      	movs	r3, #3
 80017ea:	0005      	movs	r5, r0
 80017ec:	4691      	mov	r9, r2
 80017ee:	469b      	mov	fp, r3
 80017f0:	e666      	b.n	80014c0 <__aeabi_dmul+0x48>
 80017f2:	2304      	movs	r3, #4
 80017f4:	4699      	mov	r9, r3
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	2400      	movs	r4, #0
 80017fe:	469b      	mov	fp, r3
 8001800:	e65e      	b.n	80014c0 <__aeabi_dmul+0x48>
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	000007ff 	.word	0x000007ff
 8001808:	fffffc01 	.word	0xfffffc01
 800180c:	08004d80 	.word	0x08004d80
 8001810:	000003ff 	.word	0x000003ff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	000007fe 	.word	0x000007fe
 800181c:	fffffc0d 	.word	0xfffffc0d
 8001820:	4649      	mov	r1, r9
 8001822:	2301      	movs	r3, #1
 8001824:	4319      	orrs	r1, r3
 8001826:	4689      	mov	r9, r1
 8001828:	2600      	movs	r6, #0
 800182a:	2001      	movs	r0, #1
 800182c:	e667      	b.n	80014fe <__aeabi_dmul+0x86>
 800182e:	2300      	movs	r3, #0
 8001830:	2480      	movs	r4, #128	; 0x80
 8001832:	2500      	movs	r5, #0
 8001834:	4a43      	ldr	r2, [pc, #268]	; (8001944 <__aeabi_dmul+0x4cc>)
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	0324      	lsls	r4, r4, #12
 800183a:	e67e      	b.n	800153a <__aeabi_dmul+0xc2>
 800183c:	2001      	movs	r0, #1
 800183e:	1a40      	subs	r0, r0, r1
 8001840:	2838      	cmp	r0, #56	; 0x38
 8001842:	dd00      	ble.n	8001846 <__aeabi_dmul+0x3ce>
 8001844:	e676      	b.n	8001534 <__aeabi_dmul+0xbc>
 8001846:	281f      	cmp	r0, #31
 8001848:	dd5b      	ble.n	8001902 <__aeabi_dmul+0x48a>
 800184a:	221f      	movs	r2, #31
 800184c:	0023      	movs	r3, r4
 800184e:	4252      	negs	r2, r2
 8001850:	1a51      	subs	r1, r2, r1
 8001852:	40cb      	lsrs	r3, r1
 8001854:	0019      	movs	r1, r3
 8001856:	2820      	cmp	r0, #32
 8001858:	d003      	beq.n	8001862 <__aeabi_dmul+0x3ea>
 800185a:	4a3b      	ldr	r2, [pc, #236]	; (8001948 <__aeabi_dmul+0x4d0>)
 800185c:	4462      	add	r2, ip
 800185e:	4094      	lsls	r4, r2
 8001860:	4325      	orrs	r5, r4
 8001862:	1e6a      	subs	r2, r5, #1
 8001864:	4195      	sbcs	r5, r2
 8001866:	002a      	movs	r2, r5
 8001868:	430a      	orrs	r2, r1
 800186a:	2107      	movs	r1, #7
 800186c:	000d      	movs	r5, r1
 800186e:	2400      	movs	r4, #0
 8001870:	4015      	ands	r5, r2
 8001872:	4211      	tst	r1, r2
 8001874:	d05b      	beq.n	800192e <__aeabi_dmul+0x4b6>
 8001876:	210f      	movs	r1, #15
 8001878:	2400      	movs	r4, #0
 800187a:	4011      	ands	r1, r2
 800187c:	2904      	cmp	r1, #4
 800187e:	d053      	beq.n	8001928 <__aeabi_dmul+0x4b0>
 8001880:	1d11      	adds	r1, r2, #4
 8001882:	4291      	cmp	r1, r2
 8001884:	4192      	sbcs	r2, r2
 8001886:	4252      	negs	r2, r2
 8001888:	18a4      	adds	r4, r4, r2
 800188a:	000a      	movs	r2, r1
 800188c:	0223      	lsls	r3, r4, #8
 800188e:	d54b      	bpl.n	8001928 <__aeabi_dmul+0x4b0>
 8001890:	2201      	movs	r2, #1
 8001892:	2400      	movs	r4, #0
 8001894:	2500      	movs	r5, #0
 8001896:	e650      	b.n	800153a <__aeabi_dmul+0xc2>
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	031b      	lsls	r3, r3, #12
 800189c:	421c      	tst	r4, r3
 800189e:	d009      	beq.n	80018b4 <__aeabi_dmul+0x43c>
 80018a0:	421e      	tst	r6, r3
 80018a2:	d107      	bne.n	80018b4 <__aeabi_dmul+0x43c>
 80018a4:	4333      	orrs	r3, r6
 80018a6:	031c      	lsls	r4, r3, #12
 80018a8:	4643      	mov	r3, r8
 80018aa:	0015      	movs	r5, r2
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	4a25      	ldr	r2, [pc, #148]	; (8001944 <__aeabi_dmul+0x4cc>)
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	e642      	b.n	800153a <__aeabi_dmul+0xc2>
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	0312      	lsls	r2, r2, #12
 80018b8:	4314      	orrs	r4, r2
 80018ba:	0324      	lsls	r4, r4, #12
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <__aeabi_dmul+0x4cc>)
 80018be:	0b24      	lsrs	r4, r4, #12
 80018c0:	9701      	str	r7, [sp, #4]
 80018c2:	e63a      	b.n	800153a <__aeabi_dmul+0xc2>
 80018c4:	f000 fcda 	bl	800227c <__clzsi2>
 80018c8:	0001      	movs	r1, r0
 80018ca:	0002      	movs	r2, r0
 80018cc:	3115      	adds	r1, #21
 80018ce:	3220      	adds	r2, #32
 80018d0:	291c      	cmp	r1, #28
 80018d2:	dc00      	bgt.n	80018d6 <__aeabi_dmul+0x45e>
 80018d4:	e74b      	b.n	800176e <__aeabi_dmul+0x2f6>
 80018d6:	0034      	movs	r4, r6
 80018d8:	3808      	subs	r0, #8
 80018da:	2500      	movs	r5, #0
 80018dc:	4084      	lsls	r4, r0
 80018de:	e750      	b.n	8001782 <__aeabi_dmul+0x30a>
 80018e0:	f000 fccc 	bl	800227c <__clzsi2>
 80018e4:	0003      	movs	r3, r0
 80018e6:	001a      	movs	r2, r3
 80018e8:	3215      	adds	r2, #21
 80018ea:	3020      	adds	r0, #32
 80018ec:	2a1c      	cmp	r2, #28
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dmul+0x47a>
 80018f0:	e71e      	b.n	8001730 <__aeabi_dmul+0x2b8>
 80018f2:	4656      	mov	r6, sl
 80018f4:	3b08      	subs	r3, #8
 80018f6:	2200      	movs	r2, #0
 80018f8:	409e      	lsls	r6, r3
 80018fa:	e723      	b.n	8001744 <__aeabi_dmul+0x2cc>
 80018fc:	9b00      	ldr	r3, [sp, #0]
 80018fe:	469c      	mov	ip, r3
 8001900:	e6e6      	b.n	80016d0 <__aeabi_dmul+0x258>
 8001902:	4912      	ldr	r1, [pc, #72]	; (800194c <__aeabi_dmul+0x4d4>)
 8001904:	0022      	movs	r2, r4
 8001906:	4461      	add	r1, ip
 8001908:	002e      	movs	r6, r5
 800190a:	408d      	lsls	r5, r1
 800190c:	408a      	lsls	r2, r1
 800190e:	40c6      	lsrs	r6, r0
 8001910:	1e69      	subs	r1, r5, #1
 8001912:	418d      	sbcs	r5, r1
 8001914:	4332      	orrs	r2, r6
 8001916:	432a      	orrs	r2, r5
 8001918:	40c4      	lsrs	r4, r0
 800191a:	0753      	lsls	r3, r2, #29
 800191c:	d0b6      	beq.n	800188c <__aeabi_dmul+0x414>
 800191e:	210f      	movs	r1, #15
 8001920:	4011      	ands	r1, r2
 8001922:	2904      	cmp	r1, #4
 8001924:	d1ac      	bne.n	8001880 <__aeabi_dmul+0x408>
 8001926:	e7b1      	b.n	800188c <__aeabi_dmul+0x414>
 8001928:	0765      	lsls	r5, r4, #29
 800192a:	0264      	lsls	r4, r4, #9
 800192c:	0b24      	lsrs	r4, r4, #12
 800192e:	08d2      	lsrs	r2, r2, #3
 8001930:	4315      	orrs	r5, r2
 8001932:	2200      	movs	r2, #0
 8001934:	e601      	b.n	800153a <__aeabi_dmul+0xc2>
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	0312      	lsls	r2, r2, #12
 800193a:	4314      	orrs	r4, r2
 800193c:	0324      	lsls	r4, r4, #12
 800193e:	4a01      	ldr	r2, [pc, #4]	; (8001944 <__aeabi_dmul+0x4cc>)
 8001940:	0b24      	lsrs	r4, r4, #12
 8001942:	e5fa      	b.n	800153a <__aeabi_dmul+0xc2>
 8001944:	000007ff 	.word	0x000007ff
 8001948:	0000043e 	.word	0x0000043e
 800194c:	0000041e 	.word	0x0000041e

08001950 <__aeabi_dsub>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	4657      	mov	r7, sl
 8001954:	464e      	mov	r6, r9
 8001956:	4645      	mov	r5, r8
 8001958:	46de      	mov	lr, fp
 800195a:	b5e0      	push	{r5, r6, r7, lr}
 800195c:	001e      	movs	r6, r3
 800195e:	0017      	movs	r7, r2
 8001960:	004a      	lsls	r2, r1, #1
 8001962:	030b      	lsls	r3, r1, #12
 8001964:	0d52      	lsrs	r2, r2, #21
 8001966:	0a5b      	lsrs	r3, r3, #9
 8001968:	4690      	mov	r8, r2
 800196a:	0f42      	lsrs	r2, r0, #29
 800196c:	431a      	orrs	r2, r3
 800196e:	0fcd      	lsrs	r5, r1, #31
 8001970:	4ccd      	ldr	r4, [pc, #820]	; (8001ca8 <__aeabi_dsub+0x358>)
 8001972:	0331      	lsls	r1, r6, #12
 8001974:	00c3      	lsls	r3, r0, #3
 8001976:	4694      	mov	ip, r2
 8001978:	0070      	lsls	r0, r6, #1
 800197a:	0f7a      	lsrs	r2, r7, #29
 800197c:	0a49      	lsrs	r1, r1, #9
 800197e:	00ff      	lsls	r7, r7, #3
 8001980:	469a      	mov	sl, r3
 8001982:	46b9      	mov	r9, r7
 8001984:	0d40      	lsrs	r0, r0, #21
 8001986:	0ff6      	lsrs	r6, r6, #31
 8001988:	4311      	orrs	r1, r2
 800198a:	42a0      	cmp	r0, r4
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x40>
 800198e:	e0b1      	b.n	8001af4 <__aeabi_dsub+0x1a4>
 8001990:	2201      	movs	r2, #1
 8001992:	4056      	eors	r6, r2
 8001994:	46b3      	mov	fp, r6
 8001996:	42b5      	cmp	r5, r6
 8001998:	d100      	bne.n	800199c <__aeabi_dsub+0x4c>
 800199a:	e088      	b.n	8001aae <__aeabi_dsub+0x15e>
 800199c:	4642      	mov	r2, r8
 800199e:	1a12      	subs	r2, r2, r0
 80019a0:	2a00      	cmp	r2, #0
 80019a2:	dc00      	bgt.n	80019a6 <__aeabi_dsub+0x56>
 80019a4:	e0ae      	b.n	8001b04 <__aeabi_dsub+0x1b4>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0x5c>
 80019aa:	e0c1      	b.n	8001b30 <__aeabi_dsub+0x1e0>
 80019ac:	48be      	ldr	r0, [pc, #760]	; (8001ca8 <__aeabi_dsub+0x358>)
 80019ae:	4580      	cmp	r8, r0
 80019b0:	d100      	bne.n	80019b4 <__aeabi_dsub+0x64>
 80019b2:	e151      	b.n	8001c58 <__aeabi_dsub+0x308>
 80019b4:	2080      	movs	r0, #128	; 0x80
 80019b6:	0400      	lsls	r0, r0, #16
 80019b8:	4301      	orrs	r1, r0
 80019ba:	2a38      	cmp	r2, #56	; 0x38
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dsub+0x70>
 80019be:	e17b      	b.n	8001cb8 <__aeabi_dsub+0x368>
 80019c0:	2a1f      	cmp	r2, #31
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dsub+0x76>
 80019c4:	e1ee      	b.n	8001da4 <__aeabi_dsub+0x454>
 80019c6:	2020      	movs	r0, #32
 80019c8:	003e      	movs	r6, r7
 80019ca:	1a80      	subs	r0, r0, r2
 80019cc:	000c      	movs	r4, r1
 80019ce:	40d6      	lsrs	r6, r2
 80019d0:	40d1      	lsrs	r1, r2
 80019d2:	4087      	lsls	r7, r0
 80019d4:	4662      	mov	r2, ip
 80019d6:	4084      	lsls	r4, r0
 80019d8:	1a52      	subs	r2, r2, r1
 80019da:	1e78      	subs	r0, r7, #1
 80019dc:	4187      	sbcs	r7, r0
 80019de:	4694      	mov	ip, r2
 80019e0:	4334      	orrs	r4, r6
 80019e2:	4327      	orrs	r7, r4
 80019e4:	1bdc      	subs	r4, r3, r7
 80019e6:	42a3      	cmp	r3, r4
 80019e8:	419b      	sbcs	r3, r3
 80019ea:	4662      	mov	r2, ip
 80019ec:	425b      	negs	r3, r3
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4699      	mov	r9, r3
 80019f2:	464b      	mov	r3, r9
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	d400      	bmi.n	80019fa <__aeabi_dsub+0xaa>
 80019f8:	e118      	b.n	8001c2c <__aeabi_dsub+0x2dc>
 80019fa:	464b      	mov	r3, r9
 80019fc:	0258      	lsls	r0, r3, #9
 80019fe:	0a43      	lsrs	r3, r0, #9
 8001a00:	4699      	mov	r9, r3
 8001a02:	464b      	mov	r3, r9
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0xba>
 8001a08:	e137      	b.n	8001c7a <__aeabi_dsub+0x32a>
 8001a0a:	4648      	mov	r0, r9
 8001a0c:	f000 fc36 	bl	800227c <__clzsi2>
 8001a10:	0001      	movs	r1, r0
 8001a12:	3908      	subs	r1, #8
 8001a14:	2320      	movs	r3, #32
 8001a16:	0022      	movs	r2, r4
 8001a18:	4648      	mov	r0, r9
 8001a1a:	1a5b      	subs	r3, r3, r1
 8001a1c:	40da      	lsrs	r2, r3
 8001a1e:	4088      	lsls	r0, r1
 8001a20:	408c      	lsls	r4, r1
 8001a22:	4643      	mov	r3, r8
 8001a24:	4310      	orrs	r0, r2
 8001a26:	4588      	cmp	r8, r1
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0xdc>
 8001a2a:	e136      	b.n	8001c9a <__aeabi_dsub+0x34a>
 8001a2c:	1ac9      	subs	r1, r1, r3
 8001a2e:	1c4b      	adds	r3, r1, #1
 8001a30:	2b1f      	cmp	r3, #31
 8001a32:	dd00      	ble.n	8001a36 <__aeabi_dsub+0xe6>
 8001a34:	e0ea      	b.n	8001c0c <__aeabi_dsub+0x2bc>
 8001a36:	2220      	movs	r2, #32
 8001a38:	0026      	movs	r6, r4
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	0001      	movs	r1, r0
 8001a3e:	4094      	lsls	r4, r2
 8001a40:	40de      	lsrs	r6, r3
 8001a42:	40d8      	lsrs	r0, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	4091      	lsls	r1, r2
 8001a48:	1e62      	subs	r2, r4, #1
 8001a4a:	4194      	sbcs	r4, r2
 8001a4c:	4681      	mov	r9, r0
 8001a4e:	4698      	mov	r8, r3
 8001a50:	4331      	orrs	r1, r6
 8001a52:	430c      	orrs	r4, r1
 8001a54:	0763      	lsls	r3, r4, #29
 8001a56:	d009      	beq.n	8001a6c <__aeabi_dsub+0x11c>
 8001a58:	230f      	movs	r3, #15
 8001a5a:	4023      	ands	r3, r4
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d005      	beq.n	8001a6c <__aeabi_dsub+0x11c>
 8001a60:	1d23      	adds	r3, r4, #4
 8001a62:	42a3      	cmp	r3, r4
 8001a64:	41a4      	sbcs	r4, r4
 8001a66:	4264      	negs	r4, r4
 8001a68:	44a1      	add	r9, r4
 8001a6a:	001c      	movs	r4, r3
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	d400      	bmi.n	8001a74 <__aeabi_dsub+0x124>
 8001a72:	e0de      	b.n	8001c32 <__aeabi_dsub+0x2e2>
 8001a74:	4641      	mov	r1, r8
 8001a76:	4b8c      	ldr	r3, [pc, #560]	; (8001ca8 <__aeabi_dsub+0x358>)
 8001a78:	3101      	adds	r1, #1
 8001a7a:	4299      	cmp	r1, r3
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x130>
 8001a7e:	e0e7      	b.n	8001c50 <__aeabi_dsub+0x300>
 8001a80:	464b      	mov	r3, r9
 8001a82:	488a      	ldr	r0, [pc, #552]	; (8001cac <__aeabi_dsub+0x35c>)
 8001a84:	08e4      	lsrs	r4, r4, #3
 8001a86:	4003      	ands	r3, r0
 8001a88:	0018      	movs	r0, r3
 8001a8a:	0549      	lsls	r1, r1, #21
 8001a8c:	075b      	lsls	r3, r3, #29
 8001a8e:	0240      	lsls	r0, r0, #9
 8001a90:	4323      	orrs	r3, r4
 8001a92:	0d4a      	lsrs	r2, r1, #21
 8001a94:	0b04      	lsrs	r4, r0, #12
 8001a96:	0512      	lsls	r2, r2, #20
 8001a98:	07ed      	lsls	r5, r5, #31
 8001a9a:	4322      	orrs	r2, r4
 8001a9c:	432a      	orrs	r2, r5
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	0011      	movs	r1, r2
 8001aa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa4:	46bb      	mov	fp, r7
 8001aa6:	46b2      	mov	sl, r6
 8001aa8:	46a9      	mov	r9, r5
 8001aaa:	46a0      	mov	r8, r4
 8001aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aae:	4642      	mov	r2, r8
 8001ab0:	1a12      	subs	r2, r2, r0
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	dd52      	ble.n	8001b5c <__aeabi_dsub+0x20c>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x16c>
 8001aba:	e09c      	b.n	8001bf6 <__aeabi_dsub+0x2a6>
 8001abc:	45a0      	cmp	r8, r4
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x172>
 8001ac0:	e0ca      	b.n	8001c58 <__aeabi_dsub+0x308>
 8001ac2:	2080      	movs	r0, #128	; 0x80
 8001ac4:	0400      	lsls	r0, r0, #16
 8001ac6:	4301      	orrs	r1, r0
 8001ac8:	2a38      	cmp	r2, #56	; 0x38
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dsub+0x17e>
 8001acc:	e149      	b.n	8001d62 <__aeabi_dsub+0x412>
 8001ace:	2a1f      	cmp	r2, #31
 8001ad0:	dc00      	bgt.n	8001ad4 <__aeabi_dsub+0x184>
 8001ad2:	e197      	b.n	8001e04 <__aeabi_dsub+0x4b4>
 8001ad4:	0010      	movs	r0, r2
 8001ad6:	000e      	movs	r6, r1
 8001ad8:	3820      	subs	r0, #32
 8001ada:	40c6      	lsrs	r6, r0
 8001adc:	2a20      	cmp	r2, #32
 8001ade:	d004      	beq.n	8001aea <__aeabi_dsub+0x19a>
 8001ae0:	2040      	movs	r0, #64	; 0x40
 8001ae2:	1a82      	subs	r2, r0, r2
 8001ae4:	4091      	lsls	r1, r2
 8001ae6:	430f      	orrs	r7, r1
 8001ae8:	46b9      	mov	r9, r7
 8001aea:	464c      	mov	r4, r9
 8001aec:	1e62      	subs	r2, r4, #1
 8001aee:	4194      	sbcs	r4, r2
 8001af0:	4334      	orrs	r4, r6
 8001af2:	e13a      	b.n	8001d6a <__aeabi_dsub+0x41a>
 8001af4:	000a      	movs	r2, r1
 8001af6:	433a      	orrs	r2, r7
 8001af8:	d028      	beq.n	8001b4c <__aeabi_dsub+0x1fc>
 8001afa:	46b3      	mov	fp, r6
 8001afc:	42b5      	cmp	r5, r6
 8001afe:	d02b      	beq.n	8001b58 <__aeabi_dsub+0x208>
 8001b00:	4a6b      	ldr	r2, [pc, #428]	; (8001cb0 <__aeabi_dsub+0x360>)
 8001b02:	4442      	add	r2, r8
 8001b04:	2a00      	cmp	r2, #0
 8001b06:	d05d      	beq.n	8001bc4 <__aeabi_dsub+0x274>
 8001b08:	4642      	mov	r2, r8
 8001b0a:	4644      	mov	r4, r8
 8001b0c:	1a82      	subs	r2, r0, r2
 8001b0e:	2c00      	cmp	r4, #0
 8001b10:	d000      	beq.n	8001b14 <__aeabi_dsub+0x1c4>
 8001b12:	e0f5      	b.n	8001d00 <__aeabi_dsub+0x3b0>
 8001b14:	4665      	mov	r5, ip
 8001b16:	431d      	orrs	r5, r3
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x1cc>
 8001b1a:	e19c      	b.n	8001e56 <__aeabi_dsub+0x506>
 8001b1c:	1e55      	subs	r5, r2, #1
 8001b1e:	2a01      	cmp	r2, #1
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x1d4>
 8001b22:	e1fb      	b.n	8001f1c <__aeabi_dsub+0x5cc>
 8001b24:	4c60      	ldr	r4, [pc, #384]	; (8001ca8 <__aeabi_dsub+0x358>)
 8001b26:	42a2      	cmp	r2, r4
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x1dc>
 8001b2a:	e1bd      	b.n	8001ea8 <__aeabi_dsub+0x558>
 8001b2c:	002a      	movs	r2, r5
 8001b2e:	e0f0      	b.n	8001d12 <__aeabi_dsub+0x3c2>
 8001b30:	0008      	movs	r0, r1
 8001b32:	4338      	orrs	r0, r7
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x1e8>
 8001b36:	e0c3      	b.n	8001cc0 <__aeabi_dsub+0x370>
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	2a01      	cmp	r2, #1
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_dsub+0x1f0>
 8001b3e:	e1a8      	b.n	8001e92 <__aeabi_dsub+0x542>
 8001b40:	4c59      	ldr	r4, [pc, #356]	; (8001ca8 <__aeabi_dsub+0x358>)
 8001b42:	42a2      	cmp	r2, r4
 8001b44:	d100      	bne.n	8001b48 <__aeabi_dsub+0x1f8>
 8001b46:	e087      	b.n	8001c58 <__aeabi_dsub+0x308>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	e736      	b.n	80019ba <__aeabi_dsub+0x6a>
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4056      	eors	r6, r2
 8001b50:	46b3      	mov	fp, r6
 8001b52:	42b5      	cmp	r5, r6
 8001b54:	d000      	beq.n	8001b58 <__aeabi_dsub+0x208>
 8001b56:	e721      	b.n	800199c <__aeabi_dsub+0x4c>
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <__aeabi_dsub+0x360>)
 8001b5a:	4442      	add	r2, r8
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0x212>
 8001b60:	e0b5      	b.n	8001cce <__aeabi_dsub+0x37e>
 8001b62:	4642      	mov	r2, r8
 8001b64:	4644      	mov	r4, r8
 8001b66:	1a82      	subs	r2, r0, r2
 8001b68:	2c00      	cmp	r4, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dsub+0x21e>
 8001b6c:	e138      	b.n	8001de0 <__aeabi_dsub+0x490>
 8001b6e:	4e4e      	ldr	r6, [pc, #312]	; (8001ca8 <__aeabi_dsub+0x358>)
 8001b70:	42b0      	cmp	r0, r6
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dsub+0x226>
 8001b74:	e1de      	b.n	8001f34 <__aeabi_dsub+0x5e4>
 8001b76:	2680      	movs	r6, #128	; 0x80
 8001b78:	4664      	mov	r4, ip
 8001b7a:	0436      	lsls	r6, r6, #16
 8001b7c:	4334      	orrs	r4, r6
 8001b7e:	46a4      	mov	ip, r4
 8001b80:	2a38      	cmp	r2, #56	; 0x38
 8001b82:	dd00      	ble.n	8001b86 <__aeabi_dsub+0x236>
 8001b84:	e196      	b.n	8001eb4 <__aeabi_dsub+0x564>
 8001b86:	2a1f      	cmp	r2, #31
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0x23c>
 8001b8a:	e224      	b.n	8001fd6 <__aeabi_dsub+0x686>
 8001b8c:	2620      	movs	r6, #32
 8001b8e:	1ab4      	subs	r4, r6, r2
 8001b90:	46a2      	mov	sl, r4
 8001b92:	4664      	mov	r4, ip
 8001b94:	4656      	mov	r6, sl
 8001b96:	40b4      	lsls	r4, r6
 8001b98:	46a1      	mov	r9, r4
 8001b9a:	001c      	movs	r4, r3
 8001b9c:	464e      	mov	r6, r9
 8001b9e:	40d4      	lsrs	r4, r2
 8001ba0:	4326      	orrs	r6, r4
 8001ba2:	0034      	movs	r4, r6
 8001ba4:	4656      	mov	r6, sl
 8001ba6:	40b3      	lsls	r3, r6
 8001ba8:	1e5e      	subs	r6, r3, #1
 8001baa:	41b3      	sbcs	r3, r6
 8001bac:	431c      	orrs	r4, r3
 8001bae:	4663      	mov	r3, ip
 8001bb0:	40d3      	lsrs	r3, r2
 8001bb2:	18c9      	adds	r1, r1, r3
 8001bb4:	19e4      	adds	r4, r4, r7
 8001bb6:	42bc      	cmp	r4, r7
 8001bb8:	41bf      	sbcs	r7, r7
 8001bba:	427f      	negs	r7, r7
 8001bbc:	46b9      	mov	r9, r7
 8001bbe:	4680      	mov	r8, r0
 8001bc0:	4489      	add	r9, r1
 8001bc2:	e0d8      	b.n	8001d76 <__aeabi_dsub+0x426>
 8001bc4:	4640      	mov	r0, r8
 8001bc6:	4c3b      	ldr	r4, [pc, #236]	; (8001cb4 <__aeabi_dsub+0x364>)
 8001bc8:	3001      	adds	r0, #1
 8001bca:	4220      	tst	r0, r4
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x280>
 8001bce:	e0b4      	b.n	8001d3a <__aeabi_dsub+0x3ea>
 8001bd0:	4640      	mov	r0, r8
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_dsub+0x288>
 8001bd6:	e144      	b.n	8001e62 <__aeabi_dsub+0x512>
 8001bd8:	4660      	mov	r0, ip
 8001bda:	4318      	orrs	r0, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x290>
 8001bde:	e190      	b.n	8001f02 <__aeabi_dsub+0x5b2>
 8001be0:	0008      	movs	r0, r1
 8001be2:	4338      	orrs	r0, r7
 8001be4:	d000      	beq.n	8001be8 <__aeabi_dsub+0x298>
 8001be6:	e1aa      	b.n	8001f3e <__aeabi_dsub+0x5ee>
 8001be8:	4661      	mov	r1, ip
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	0749      	lsls	r1, r1, #29
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	4661      	mov	r1, ip
 8001bf2:	08cc      	lsrs	r4, r1, #3
 8001bf4:	e027      	b.n	8001c46 <__aeabi_dsub+0x2f6>
 8001bf6:	0008      	movs	r0, r1
 8001bf8:	4338      	orrs	r0, r7
 8001bfa:	d061      	beq.n	8001cc0 <__aeabi_dsub+0x370>
 8001bfc:	1e50      	subs	r0, r2, #1
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x2b4>
 8001c02:	e139      	b.n	8001e78 <__aeabi_dsub+0x528>
 8001c04:	42a2      	cmp	r2, r4
 8001c06:	d027      	beq.n	8001c58 <__aeabi_dsub+0x308>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	e75d      	b.n	8001ac8 <__aeabi_dsub+0x178>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	391f      	subs	r1, #31
 8001c10:	40ca      	lsrs	r2, r1
 8001c12:	0011      	movs	r1, r2
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d003      	beq.n	8001c20 <__aeabi_dsub+0x2d0>
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	4098      	lsls	r0, r3
 8001c1e:	4304      	orrs	r4, r0
 8001c20:	1e63      	subs	r3, r4, #1
 8001c22:	419c      	sbcs	r4, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	4699      	mov	r9, r3
 8001c28:	4698      	mov	r8, r3
 8001c2a:	430c      	orrs	r4, r1
 8001c2c:	0763      	lsls	r3, r4, #29
 8001c2e:	d000      	beq.n	8001c32 <__aeabi_dsub+0x2e2>
 8001c30:	e712      	b.n	8001a58 <__aeabi_dsub+0x108>
 8001c32:	464b      	mov	r3, r9
 8001c34:	464a      	mov	r2, r9
 8001c36:	08e4      	lsrs	r4, r4, #3
 8001c38:	075b      	lsls	r3, r3, #29
 8001c3a:	4323      	orrs	r3, r4
 8001c3c:	08d4      	lsrs	r4, r2, #3
 8001c3e:	4642      	mov	r2, r8
 8001c40:	4919      	ldr	r1, [pc, #100]	; (8001ca8 <__aeabi_dsub+0x358>)
 8001c42:	428a      	cmp	r2, r1
 8001c44:	d00e      	beq.n	8001c64 <__aeabi_dsub+0x314>
 8001c46:	0324      	lsls	r4, r4, #12
 8001c48:	0552      	lsls	r2, r2, #21
 8001c4a:	0b24      	lsrs	r4, r4, #12
 8001c4c:	0d52      	lsrs	r2, r2, #21
 8001c4e:	e722      	b.n	8001a96 <__aeabi_dsub+0x146>
 8001c50:	000a      	movs	r2, r1
 8001c52:	2400      	movs	r4, #0
 8001c54:	2300      	movs	r3, #0
 8001c56:	e71e      	b.n	8001a96 <__aeabi_dsub+0x146>
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	4662      	mov	r2, ip
 8001c5c:	0752      	lsls	r2, r2, #29
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	08d4      	lsrs	r4, r2, #3
 8001c64:	001a      	movs	r2, r3
 8001c66:	4322      	orrs	r2, r4
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x31c>
 8001c6a:	e1fc      	b.n	8002066 <__aeabi_dsub+0x716>
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	0312      	lsls	r2, r2, #12
 8001c70:	4314      	orrs	r4, r2
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <__aeabi_dsub+0x358>)
 8001c76:	0b24      	lsrs	r4, r4, #12
 8001c78:	e70d      	b.n	8001a96 <__aeabi_dsub+0x146>
 8001c7a:	0020      	movs	r0, r4
 8001c7c:	f000 fafe 	bl	800227c <__clzsi2>
 8001c80:	0001      	movs	r1, r0
 8001c82:	3118      	adds	r1, #24
 8001c84:	291f      	cmp	r1, #31
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dsub+0x33a>
 8001c88:	e6c4      	b.n	8001a14 <__aeabi_dsub+0xc4>
 8001c8a:	3808      	subs	r0, #8
 8001c8c:	4084      	lsls	r4, r0
 8001c8e:	4643      	mov	r3, r8
 8001c90:	0020      	movs	r0, r4
 8001c92:	2400      	movs	r4, #0
 8001c94:	4588      	cmp	r8, r1
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_dsub+0x34a>
 8001c98:	e6c8      	b.n	8001a2c <__aeabi_dsub+0xdc>
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__aeabi_dsub+0x35c>)
 8001c9c:	1a5b      	subs	r3, r3, r1
 8001c9e:	4010      	ands	r0, r2
 8001ca0:	4698      	mov	r8, r3
 8001ca2:	4681      	mov	r9, r0
 8001ca4:	e6d6      	b.n	8001a54 <__aeabi_dsub+0x104>
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	000007ff 	.word	0x000007ff
 8001cac:	ff7fffff 	.word	0xff7fffff
 8001cb0:	fffff801 	.word	0xfffff801
 8001cb4:	000007fe 	.word	0x000007fe
 8001cb8:	430f      	orrs	r7, r1
 8001cba:	1e7a      	subs	r2, r7, #1
 8001cbc:	4197      	sbcs	r7, r2
 8001cbe:	e691      	b.n	80019e4 <__aeabi_dsub+0x94>
 8001cc0:	4661      	mov	r1, ip
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	0749      	lsls	r1, r1, #29
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	4661      	mov	r1, ip
 8001cca:	08cc      	lsrs	r4, r1, #3
 8001ccc:	e7b8      	b.n	8001c40 <__aeabi_dsub+0x2f0>
 8001cce:	4640      	mov	r0, r8
 8001cd0:	4cd3      	ldr	r4, [pc, #844]	; (8002020 <__aeabi_dsub+0x6d0>)
 8001cd2:	3001      	adds	r0, #1
 8001cd4:	4220      	tst	r0, r4
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x38a>
 8001cd8:	e0a2      	b.n	8001e20 <__aeabi_dsub+0x4d0>
 8001cda:	4640      	mov	r0, r8
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d000      	beq.n	8001ce2 <__aeabi_dsub+0x392>
 8001ce0:	e101      	b.n	8001ee6 <__aeabi_dsub+0x596>
 8001ce2:	4660      	mov	r0, ip
 8001ce4:	4318      	orrs	r0, r3
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x39a>
 8001ce8:	e15e      	b.n	8001fa8 <__aeabi_dsub+0x658>
 8001cea:	0008      	movs	r0, r1
 8001cec:	4338      	orrs	r0, r7
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_dsub+0x3a2>
 8001cf0:	e15f      	b.n	8001fb2 <__aeabi_dsub+0x662>
 8001cf2:	4661      	mov	r1, ip
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	0749      	lsls	r1, r1, #29
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	4661      	mov	r1, ip
 8001cfc:	08cc      	lsrs	r4, r1, #3
 8001cfe:	e7a2      	b.n	8001c46 <__aeabi_dsub+0x2f6>
 8001d00:	4dc8      	ldr	r5, [pc, #800]	; (8002024 <__aeabi_dsub+0x6d4>)
 8001d02:	42a8      	cmp	r0, r5
 8001d04:	d100      	bne.n	8001d08 <__aeabi_dsub+0x3b8>
 8001d06:	e0cf      	b.n	8001ea8 <__aeabi_dsub+0x558>
 8001d08:	2580      	movs	r5, #128	; 0x80
 8001d0a:	4664      	mov	r4, ip
 8001d0c:	042d      	lsls	r5, r5, #16
 8001d0e:	432c      	orrs	r4, r5
 8001d10:	46a4      	mov	ip, r4
 8001d12:	2a38      	cmp	r2, #56	; 0x38
 8001d14:	dc56      	bgt.n	8001dc4 <__aeabi_dsub+0x474>
 8001d16:	2a1f      	cmp	r2, #31
 8001d18:	dd00      	ble.n	8001d1c <__aeabi_dsub+0x3cc>
 8001d1a:	e0d1      	b.n	8001ec0 <__aeabi_dsub+0x570>
 8001d1c:	2520      	movs	r5, #32
 8001d1e:	001e      	movs	r6, r3
 8001d20:	1aad      	subs	r5, r5, r2
 8001d22:	4664      	mov	r4, ip
 8001d24:	40ab      	lsls	r3, r5
 8001d26:	40ac      	lsls	r4, r5
 8001d28:	40d6      	lsrs	r6, r2
 8001d2a:	1e5d      	subs	r5, r3, #1
 8001d2c:	41ab      	sbcs	r3, r5
 8001d2e:	4334      	orrs	r4, r6
 8001d30:	4323      	orrs	r3, r4
 8001d32:	4664      	mov	r4, ip
 8001d34:	40d4      	lsrs	r4, r2
 8001d36:	1b09      	subs	r1, r1, r4
 8001d38:	e049      	b.n	8001dce <__aeabi_dsub+0x47e>
 8001d3a:	4660      	mov	r0, ip
 8001d3c:	1bdc      	subs	r4, r3, r7
 8001d3e:	1a46      	subs	r6, r0, r1
 8001d40:	42a3      	cmp	r3, r4
 8001d42:	4180      	sbcs	r0, r0
 8001d44:	4240      	negs	r0, r0
 8001d46:	4681      	mov	r9, r0
 8001d48:	0030      	movs	r0, r6
 8001d4a:	464e      	mov	r6, r9
 8001d4c:	1b80      	subs	r0, r0, r6
 8001d4e:	4681      	mov	r9, r0
 8001d50:	0200      	lsls	r0, r0, #8
 8001d52:	d476      	bmi.n	8001e42 <__aeabi_dsub+0x4f2>
 8001d54:	464b      	mov	r3, r9
 8001d56:	4323      	orrs	r3, r4
 8001d58:	d000      	beq.n	8001d5c <__aeabi_dsub+0x40c>
 8001d5a:	e652      	b.n	8001a02 <__aeabi_dsub+0xb2>
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	2500      	movs	r5, #0
 8001d60:	e771      	b.n	8001c46 <__aeabi_dsub+0x2f6>
 8001d62:	4339      	orrs	r1, r7
 8001d64:	000c      	movs	r4, r1
 8001d66:	1e62      	subs	r2, r4, #1
 8001d68:	4194      	sbcs	r4, r2
 8001d6a:	18e4      	adds	r4, r4, r3
 8001d6c:	429c      	cmp	r4, r3
 8001d6e:	419b      	sbcs	r3, r3
 8001d70:	425b      	negs	r3, r3
 8001d72:	4463      	add	r3, ip
 8001d74:	4699      	mov	r9, r3
 8001d76:	464b      	mov	r3, r9
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x42e>
 8001d7c:	e756      	b.n	8001c2c <__aeabi_dsub+0x2dc>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	469c      	mov	ip, r3
 8001d82:	4ba8      	ldr	r3, [pc, #672]	; (8002024 <__aeabi_dsub+0x6d4>)
 8001d84:	44e0      	add	r8, ip
 8001d86:	4598      	cmp	r8, r3
 8001d88:	d038      	beq.n	8001dfc <__aeabi_dsub+0x4ac>
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	48a6      	ldr	r0, [pc, #664]	; (8002028 <__aeabi_dsub+0x6d8>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4003      	ands	r3, r0
 8001d92:	0018      	movs	r0, r3
 8001d94:	0863      	lsrs	r3, r4, #1
 8001d96:	4014      	ands	r4, r2
 8001d98:	431c      	orrs	r4, r3
 8001d9a:	07c3      	lsls	r3, r0, #31
 8001d9c:	431c      	orrs	r4, r3
 8001d9e:	0843      	lsrs	r3, r0, #1
 8001da0:	4699      	mov	r9, r3
 8001da2:	e657      	b.n	8001a54 <__aeabi_dsub+0x104>
 8001da4:	0010      	movs	r0, r2
 8001da6:	000e      	movs	r6, r1
 8001da8:	3820      	subs	r0, #32
 8001daa:	40c6      	lsrs	r6, r0
 8001dac:	2a20      	cmp	r2, #32
 8001dae:	d004      	beq.n	8001dba <__aeabi_dsub+0x46a>
 8001db0:	2040      	movs	r0, #64	; 0x40
 8001db2:	1a82      	subs	r2, r0, r2
 8001db4:	4091      	lsls	r1, r2
 8001db6:	430f      	orrs	r7, r1
 8001db8:	46b9      	mov	r9, r7
 8001dba:	464f      	mov	r7, r9
 8001dbc:	1e7a      	subs	r2, r7, #1
 8001dbe:	4197      	sbcs	r7, r2
 8001dc0:	4337      	orrs	r7, r6
 8001dc2:	e60f      	b.n	80019e4 <__aeabi_dsub+0x94>
 8001dc4:	4662      	mov	r2, ip
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	4193      	sbcs	r3, r2
 8001dce:	1afc      	subs	r4, r7, r3
 8001dd0:	42a7      	cmp	r7, r4
 8001dd2:	41bf      	sbcs	r7, r7
 8001dd4:	427f      	negs	r7, r7
 8001dd6:	1bcb      	subs	r3, r1, r7
 8001dd8:	4699      	mov	r9, r3
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4680      	mov	r8, r0
 8001dde:	e608      	b.n	80019f2 <__aeabi_dsub+0xa2>
 8001de0:	4666      	mov	r6, ip
 8001de2:	431e      	orrs	r6, r3
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x498>
 8001de6:	e0be      	b.n	8001f66 <__aeabi_dsub+0x616>
 8001de8:	1e56      	subs	r6, r2, #1
 8001dea:	2a01      	cmp	r2, #1
 8001dec:	d100      	bne.n	8001df0 <__aeabi_dsub+0x4a0>
 8001dee:	e109      	b.n	8002004 <__aeabi_dsub+0x6b4>
 8001df0:	4c8c      	ldr	r4, [pc, #560]	; (8002024 <__aeabi_dsub+0x6d4>)
 8001df2:	42a2      	cmp	r2, r4
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x4a8>
 8001df6:	e119      	b.n	800202c <__aeabi_dsub+0x6dc>
 8001df8:	0032      	movs	r2, r6
 8001dfa:	e6c1      	b.n	8001b80 <__aeabi_dsub+0x230>
 8001dfc:	4642      	mov	r2, r8
 8001dfe:	2400      	movs	r4, #0
 8001e00:	2300      	movs	r3, #0
 8001e02:	e648      	b.n	8001a96 <__aeabi_dsub+0x146>
 8001e04:	2020      	movs	r0, #32
 8001e06:	000c      	movs	r4, r1
 8001e08:	1a80      	subs	r0, r0, r2
 8001e0a:	003e      	movs	r6, r7
 8001e0c:	4087      	lsls	r7, r0
 8001e0e:	4084      	lsls	r4, r0
 8001e10:	40d6      	lsrs	r6, r2
 8001e12:	1e78      	subs	r0, r7, #1
 8001e14:	4187      	sbcs	r7, r0
 8001e16:	40d1      	lsrs	r1, r2
 8001e18:	4334      	orrs	r4, r6
 8001e1a:	433c      	orrs	r4, r7
 8001e1c:	448c      	add	ip, r1
 8001e1e:	e7a4      	b.n	8001d6a <__aeabi_dsub+0x41a>
 8001e20:	4a80      	ldr	r2, [pc, #512]	; (8002024 <__aeabi_dsub+0x6d4>)
 8001e22:	4290      	cmp	r0, r2
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x4d8>
 8001e26:	e0e9      	b.n	8001ffc <__aeabi_dsub+0x6ac>
 8001e28:	19df      	adds	r7, r3, r7
 8001e2a:	429f      	cmp	r7, r3
 8001e2c:	419b      	sbcs	r3, r3
 8001e2e:	4461      	add	r1, ip
 8001e30:	425b      	negs	r3, r3
 8001e32:	18c9      	adds	r1, r1, r3
 8001e34:	07cc      	lsls	r4, r1, #31
 8001e36:	087f      	lsrs	r7, r7, #1
 8001e38:	084b      	lsrs	r3, r1, #1
 8001e3a:	4699      	mov	r9, r3
 8001e3c:	4680      	mov	r8, r0
 8001e3e:	433c      	orrs	r4, r7
 8001e40:	e6f4      	b.n	8001c2c <__aeabi_dsub+0x2dc>
 8001e42:	1afc      	subs	r4, r7, r3
 8001e44:	42a7      	cmp	r7, r4
 8001e46:	41bf      	sbcs	r7, r7
 8001e48:	4663      	mov	r3, ip
 8001e4a:	427f      	negs	r7, r7
 8001e4c:	1ac9      	subs	r1, r1, r3
 8001e4e:	1bcb      	subs	r3, r1, r7
 8001e50:	4699      	mov	r9, r3
 8001e52:	465d      	mov	r5, fp
 8001e54:	e5d5      	b.n	8001a02 <__aeabi_dsub+0xb2>
 8001e56:	08ff      	lsrs	r7, r7, #3
 8001e58:	074b      	lsls	r3, r1, #29
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	433b      	orrs	r3, r7
 8001e5e:	08cc      	lsrs	r4, r1, #3
 8001e60:	e6ee      	b.n	8001c40 <__aeabi_dsub+0x2f0>
 8001e62:	4662      	mov	r2, ip
 8001e64:	431a      	orrs	r2, r3
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dsub+0x51a>
 8001e68:	e082      	b.n	8001f70 <__aeabi_dsub+0x620>
 8001e6a:	000b      	movs	r3, r1
 8001e6c:	433b      	orrs	r3, r7
 8001e6e:	d11b      	bne.n	8001ea8 <__aeabi_dsub+0x558>
 8001e70:	2480      	movs	r4, #128	; 0x80
 8001e72:	2500      	movs	r5, #0
 8001e74:	0324      	lsls	r4, r4, #12
 8001e76:	e6f9      	b.n	8001c6c <__aeabi_dsub+0x31c>
 8001e78:	19dc      	adds	r4, r3, r7
 8001e7a:	429c      	cmp	r4, r3
 8001e7c:	419b      	sbcs	r3, r3
 8001e7e:	4461      	add	r1, ip
 8001e80:	4689      	mov	r9, r1
 8001e82:	425b      	negs	r3, r3
 8001e84:	4499      	add	r9, r3
 8001e86:	464b      	mov	r3, r9
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	d444      	bmi.n	8001f16 <__aeabi_dsub+0x5c6>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	4698      	mov	r8, r3
 8001e90:	e6cc      	b.n	8001c2c <__aeabi_dsub+0x2dc>
 8001e92:	1bdc      	subs	r4, r3, r7
 8001e94:	4662      	mov	r2, ip
 8001e96:	42a3      	cmp	r3, r4
 8001e98:	419b      	sbcs	r3, r3
 8001e9a:	1a51      	subs	r1, r2, r1
 8001e9c:	425b      	negs	r3, r3
 8001e9e:	1acb      	subs	r3, r1, r3
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e5a4      	b.n	80019f2 <__aeabi_dsub+0xa2>
 8001ea8:	08ff      	lsrs	r7, r7, #3
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	465d      	mov	r5, fp
 8001eae:	433b      	orrs	r3, r7
 8001eb0:	08cc      	lsrs	r4, r1, #3
 8001eb2:	e6d7      	b.n	8001c64 <__aeabi_dsub+0x314>
 8001eb4:	4662      	mov	r2, ip
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	0014      	movs	r4, r2
 8001eba:	1e63      	subs	r3, r4, #1
 8001ebc:	419c      	sbcs	r4, r3
 8001ebe:	e679      	b.n	8001bb4 <__aeabi_dsub+0x264>
 8001ec0:	0015      	movs	r5, r2
 8001ec2:	4664      	mov	r4, ip
 8001ec4:	3d20      	subs	r5, #32
 8001ec6:	40ec      	lsrs	r4, r5
 8001ec8:	46a0      	mov	r8, r4
 8001eca:	2a20      	cmp	r2, #32
 8001ecc:	d005      	beq.n	8001eda <__aeabi_dsub+0x58a>
 8001ece:	2540      	movs	r5, #64	; 0x40
 8001ed0:	4664      	mov	r4, ip
 8001ed2:	1aaa      	subs	r2, r5, r2
 8001ed4:	4094      	lsls	r4, r2
 8001ed6:	4323      	orrs	r3, r4
 8001ed8:	469a      	mov	sl, r3
 8001eda:	4654      	mov	r4, sl
 8001edc:	1e63      	subs	r3, r4, #1
 8001ede:	419c      	sbcs	r4, r3
 8001ee0:	4643      	mov	r3, r8
 8001ee2:	4323      	orrs	r3, r4
 8001ee4:	e773      	b.n	8001dce <__aeabi_dsub+0x47e>
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	d023      	beq.n	8001f34 <__aeabi_dsub+0x5e4>
 8001eec:	000a      	movs	r2, r1
 8001eee:	433a      	orrs	r2, r7
 8001ef0:	d000      	beq.n	8001ef4 <__aeabi_dsub+0x5a4>
 8001ef2:	e0a0      	b.n	8002036 <__aeabi_dsub+0x6e6>
 8001ef4:	4662      	mov	r2, ip
 8001ef6:	08db      	lsrs	r3, r3, #3
 8001ef8:	0752      	lsls	r2, r2, #29
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4662      	mov	r2, ip
 8001efe:	08d4      	lsrs	r4, r2, #3
 8001f00:	e6b0      	b.n	8001c64 <__aeabi_dsub+0x314>
 8001f02:	000b      	movs	r3, r1
 8001f04:	433b      	orrs	r3, r7
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dsub+0x5ba>
 8001f08:	e728      	b.n	8001d5c <__aeabi_dsub+0x40c>
 8001f0a:	08ff      	lsrs	r7, r7, #3
 8001f0c:	074b      	lsls	r3, r1, #29
 8001f0e:	465d      	mov	r5, fp
 8001f10:	433b      	orrs	r3, r7
 8001f12:	08cc      	lsrs	r4, r1, #3
 8001f14:	e697      	b.n	8001c46 <__aeabi_dsub+0x2f6>
 8001f16:	2302      	movs	r3, #2
 8001f18:	4698      	mov	r8, r3
 8001f1a:	e736      	b.n	8001d8a <__aeabi_dsub+0x43a>
 8001f1c:	1afc      	subs	r4, r7, r3
 8001f1e:	42a7      	cmp	r7, r4
 8001f20:	41bf      	sbcs	r7, r7
 8001f22:	4663      	mov	r3, ip
 8001f24:	427f      	negs	r7, r7
 8001f26:	1ac9      	subs	r1, r1, r3
 8001f28:	1bcb      	subs	r3, r1, r7
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	465d      	mov	r5, fp
 8001f30:	4698      	mov	r8, r3
 8001f32:	e55e      	b.n	80019f2 <__aeabi_dsub+0xa2>
 8001f34:	074b      	lsls	r3, r1, #29
 8001f36:	08ff      	lsrs	r7, r7, #3
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e692      	b.n	8001c64 <__aeabi_dsub+0x314>
 8001f3e:	1bdc      	subs	r4, r3, r7
 8001f40:	4660      	mov	r0, ip
 8001f42:	42a3      	cmp	r3, r4
 8001f44:	41b6      	sbcs	r6, r6
 8001f46:	1a40      	subs	r0, r0, r1
 8001f48:	4276      	negs	r6, r6
 8001f4a:	1b80      	subs	r0, r0, r6
 8001f4c:	4681      	mov	r9, r0
 8001f4e:	0200      	lsls	r0, r0, #8
 8001f50:	d560      	bpl.n	8002014 <__aeabi_dsub+0x6c4>
 8001f52:	1afc      	subs	r4, r7, r3
 8001f54:	42a7      	cmp	r7, r4
 8001f56:	41bf      	sbcs	r7, r7
 8001f58:	4663      	mov	r3, ip
 8001f5a:	427f      	negs	r7, r7
 8001f5c:	1ac9      	subs	r1, r1, r3
 8001f5e:	1bcb      	subs	r3, r1, r7
 8001f60:	4699      	mov	r9, r3
 8001f62:	465d      	mov	r5, fp
 8001f64:	e576      	b.n	8001a54 <__aeabi_dsub+0x104>
 8001f66:	08ff      	lsrs	r7, r7, #3
 8001f68:	074b      	lsls	r3, r1, #29
 8001f6a:	433b      	orrs	r3, r7
 8001f6c:	08cc      	lsrs	r4, r1, #3
 8001f6e:	e667      	b.n	8001c40 <__aeabi_dsub+0x2f0>
 8001f70:	000a      	movs	r2, r1
 8001f72:	08db      	lsrs	r3, r3, #3
 8001f74:	433a      	orrs	r2, r7
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x62a>
 8001f78:	e66f      	b.n	8001c5a <__aeabi_dsub+0x30a>
 8001f7a:	4662      	mov	r2, ip
 8001f7c:	0752      	lsls	r2, r2, #29
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	4662      	mov	r2, ip
 8001f82:	08d4      	lsrs	r4, r2, #3
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	0312      	lsls	r2, r2, #12
 8001f88:	4214      	tst	r4, r2
 8001f8a:	d007      	beq.n	8001f9c <__aeabi_dsub+0x64c>
 8001f8c:	08c8      	lsrs	r0, r1, #3
 8001f8e:	4210      	tst	r0, r2
 8001f90:	d104      	bne.n	8001f9c <__aeabi_dsub+0x64c>
 8001f92:	465d      	mov	r5, fp
 8001f94:	0004      	movs	r4, r0
 8001f96:	08fb      	lsrs	r3, r7, #3
 8001f98:	0749      	lsls	r1, r1, #29
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	0f5a      	lsrs	r2, r3, #29
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	0752      	lsls	r2, r2, #29
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	e65d      	b.n	8001c64 <__aeabi_dsub+0x314>
 8001fa8:	074b      	lsls	r3, r1, #29
 8001faa:	08ff      	lsrs	r7, r7, #3
 8001fac:	433b      	orrs	r3, r7
 8001fae:	08cc      	lsrs	r4, r1, #3
 8001fb0:	e649      	b.n	8001c46 <__aeabi_dsub+0x2f6>
 8001fb2:	19dc      	adds	r4, r3, r7
 8001fb4:	429c      	cmp	r4, r3
 8001fb6:	419b      	sbcs	r3, r3
 8001fb8:	4461      	add	r1, ip
 8001fba:	4689      	mov	r9, r1
 8001fbc:	425b      	negs	r3, r3
 8001fbe:	4499      	add	r9, r3
 8001fc0:	464b      	mov	r3, r9
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	d400      	bmi.n	8001fc8 <__aeabi_dsub+0x678>
 8001fc6:	e631      	b.n	8001c2c <__aeabi_dsub+0x2dc>
 8001fc8:	464a      	mov	r2, r9
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <__aeabi_dsub+0x6d8>)
 8001fcc:	401a      	ands	r2, r3
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4691      	mov	r9, r2
 8001fd2:	4698      	mov	r8, r3
 8001fd4:	e62a      	b.n	8001c2c <__aeabi_dsub+0x2dc>
 8001fd6:	0016      	movs	r6, r2
 8001fd8:	4664      	mov	r4, ip
 8001fda:	3e20      	subs	r6, #32
 8001fdc:	40f4      	lsrs	r4, r6
 8001fde:	46a0      	mov	r8, r4
 8001fe0:	2a20      	cmp	r2, #32
 8001fe2:	d005      	beq.n	8001ff0 <__aeabi_dsub+0x6a0>
 8001fe4:	2640      	movs	r6, #64	; 0x40
 8001fe6:	4664      	mov	r4, ip
 8001fe8:	1ab2      	subs	r2, r6, r2
 8001fea:	4094      	lsls	r4, r2
 8001fec:	4323      	orrs	r3, r4
 8001fee:	469a      	mov	sl, r3
 8001ff0:	4654      	mov	r4, sl
 8001ff2:	1e63      	subs	r3, r4, #1
 8001ff4:	419c      	sbcs	r4, r3
 8001ff6:	4643      	mov	r3, r8
 8001ff8:	431c      	orrs	r4, r3
 8001ffa:	e5db      	b.n	8001bb4 <__aeabi_dsub+0x264>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	2400      	movs	r4, #0
 8002000:	2300      	movs	r3, #0
 8002002:	e548      	b.n	8001a96 <__aeabi_dsub+0x146>
 8002004:	19dc      	adds	r4, r3, r7
 8002006:	42bc      	cmp	r4, r7
 8002008:	41bf      	sbcs	r7, r7
 800200a:	4461      	add	r1, ip
 800200c:	4689      	mov	r9, r1
 800200e:	427f      	negs	r7, r7
 8002010:	44b9      	add	r9, r7
 8002012:	e738      	b.n	8001e86 <__aeabi_dsub+0x536>
 8002014:	464b      	mov	r3, r9
 8002016:	4323      	orrs	r3, r4
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0x6cc>
 800201a:	e69f      	b.n	8001d5c <__aeabi_dsub+0x40c>
 800201c:	e606      	b.n	8001c2c <__aeabi_dsub+0x2dc>
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	000007fe 	.word	0x000007fe
 8002024:	000007ff 	.word	0x000007ff
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	08ff      	lsrs	r7, r7, #3
 800202e:	074b      	lsls	r3, r1, #29
 8002030:	433b      	orrs	r3, r7
 8002032:	08cc      	lsrs	r4, r1, #3
 8002034:	e616      	b.n	8001c64 <__aeabi_dsub+0x314>
 8002036:	4662      	mov	r2, ip
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	0752      	lsls	r2, r2, #29
 800203c:	4313      	orrs	r3, r2
 800203e:	4662      	mov	r2, ip
 8002040:	08d4      	lsrs	r4, r2, #3
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	0312      	lsls	r2, r2, #12
 8002046:	4214      	tst	r4, r2
 8002048:	d007      	beq.n	800205a <__aeabi_dsub+0x70a>
 800204a:	08c8      	lsrs	r0, r1, #3
 800204c:	4210      	tst	r0, r2
 800204e:	d104      	bne.n	800205a <__aeabi_dsub+0x70a>
 8002050:	465d      	mov	r5, fp
 8002052:	0004      	movs	r4, r0
 8002054:	08fb      	lsrs	r3, r7, #3
 8002056:	0749      	lsls	r1, r1, #29
 8002058:	430b      	orrs	r3, r1
 800205a:	0f5a      	lsrs	r2, r3, #29
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	0752      	lsls	r2, r2, #29
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	4313      	orrs	r3, r2
 8002064:	e5fe      	b.n	8001c64 <__aeabi_dsub+0x314>
 8002066:	2300      	movs	r3, #0
 8002068:	4a01      	ldr	r2, [pc, #4]	; (8002070 <__aeabi_dsub+0x720>)
 800206a:	001c      	movs	r4, r3
 800206c:	e513      	b.n	8001a96 <__aeabi_dsub+0x146>
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	000007ff 	.word	0x000007ff

08002074 <__aeabi_d2iz>:
 8002074:	000a      	movs	r2, r1
 8002076:	b530      	push	{r4, r5, lr}
 8002078:	4c13      	ldr	r4, [pc, #76]	; (80020c8 <__aeabi_d2iz+0x54>)
 800207a:	0053      	lsls	r3, r2, #1
 800207c:	0309      	lsls	r1, r1, #12
 800207e:	0005      	movs	r5, r0
 8002080:	0b09      	lsrs	r1, r1, #12
 8002082:	2000      	movs	r0, #0
 8002084:	0d5b      	lsrs	r3, r3, #21
 8002086:	0fd2      	lsrs	r2, r2, #31
 8002088:	42a3      	cmp	r3, r4
 800208a:	dd04      	ble.n	8002096 <__aeabi_d2iz+0x22>
 800208c:	480f      	ldr	r0, [pc, #60]	; (80020cc <__aeabi_d2iz+0x58>)
 800208e:	4283      	cmp	r3, r0
 8002090:	dd02      	ble.n	8002098 <__aeabi_d2iz+0x24>
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <__aeabi_d2iz+0x5c>)
 8002094:	18d0      	adds	r0, r2, r3
 8002096:	bd30      	pop	{r4, r5, pc}
 8002098:	2080      	movs	r0, #128	; 0x80
 800209a:	0340      	lsls	r0, r0, #13
 800209c:	4301      	orrs	r1, r0
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <__aeabi_d2iz+0x60>)
 80020a0:	1ac0      	subs	r0, r0, r3
 80020a2:	281f      	cmp	r0, #31
 80020a4:	dd08      	ble.n	80020b8 <__aeabi_d2iz+0x44>
 80020a6:	480c      	ldr	r0, [pc, #48]	; (80020d8 <__aeabi_d2iz+0x64>)
 80020a8:	1ac3      	subs	r3, r0, r3
 80020aa:	40d9      	lsrs	r1, r3
 80020ac:	000b      	movs	r3, r1
 80020ae:	4258      	negs	r0, r3
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	d1f0      	bne.n	8002096 <__aeabi_d2iz+0x22>
 80020b4:	0018      	movs	r0, r3
 80020b6:	e7ee      	b.n	8002096 <__aeabi_d2iz+0x22>
 80020b8:	4c08      	ldr	r4, [pc, #32]	; (80020dc <__aeabi_d2iz+0x68>)
 80020ba:	40c5      	lsrs	r5, r0
 80020bc:	46a4      	mov	ip, r4
 80020be:	4463      	add	r3, ip
 80020c0:	4099      	lsls	r1, r3
 80020c2:	000b      	movs	r3, r1
 80020c4:	432b      	orrs	r3, r5
 80020c6:	e7f2      	b.n	80020ae <__aeabi_d2iz+0x3a>
 80020c8:	000003fe 	.word	0x000003fe
 80020cc:	0000041d 	.word	0x0000041d
 80020d0:	7fffffff 	.word	0x7fffffff
 80020d4:	00000433 	.word	0x00000433
 80020d8:	00000413 	.word	0x00000413
 80020dc:	fffffbed 	.word	0xfffffbed

080020e0 <__aeabi_i2d>:
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d016      	beq.n	8002114 <__aeabi_i2d+0x34>
 80020e6:	17c3      	asrs	r3, r0, #31
 80020e8:	18c5      	adds	r5, r0, r3
 80020ea:	405d      	eors	r5, r3
 80020ec:	0fc4      	lsrs	r4, r0, #31
 80020ee:	0028      	movs	r0, r5
 80020f0:	f000 f8c4 	bl	800227c <__clzsi2>
 80020f4:	4a11      	ldr	r2, [pc, #68]	; (800213c <__aeabi_i2d+0x5c>)
 80020f6:	1a12      	subs	r2, r2, r0
 80020f8:	280a      	cmp	r0, #10
 80020fa:	dc16      	bgt.n	800212a <__aeabi_i2d+0x4a>
 80020fc:	0003      	movs	r3, r0
 80020fe:	002e      	movs	r6, r5
 8002100:	3315      	adds	r3, #21
 8002102:	409e      	lsls	r6, r3
 8002104:	230b      	movs	r3, #11
 8002106:	1a18      	subs	r0, r3, r0
 8002108:	40c5      	lsrs	r5, r0
 800210a:	0552      	lsls	r2, r2, #21
 800210c:	032d      	lsls	r5, r5, #12
 800210e:	0b2d      	lsrs	r5, r5, #12
 8002110:	0d53      	lsrs	r3, r2, #21
 8002112:	e003      	b.n	800211c <__aeabi_i2d+0x3c>
 8002114:	2400      	movs	r4, #0
 8002116:	2300      	movs	r3, #0
 8002118:	2500      	movs	r5, #0
 800211a:	2600      	movs	r6, #0
 800211c:	051b      	lsls	r3, r3, #20
 800211e:	432b      	orrs	r3, r5
 8002120:	07e4      	lsls	r4, r4, #31
 8002122:	4323      	orrs	r3, r4
 8002124:	0030      	movs	r0, r6
 8002126:	0019      	movs	r1, r3
 8002128:	bd70      	pop	{r4, r5, r6, pc}
 800212a:	380b      	subs	r0, #11
 800212c:	4085      	lsls	r5, r0
 800212e:	0552      	lsls	r2, r2, #21
 8002130:	032d      	lsls	r5, r5, #12
 8002132:	2600      	movs	r6, #0
 8002134:	0b2d      	lsrs	r5, r5, #12
 8002136:	0d53      	lsrs	r3, r2, #21
 8002138:	e7f0      	b.n	800211c <__aeabi_i2d+0x3c>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	0000041e 	.word	0x0000041e

08002140 <__aeabi_ui2d>:
 8002140:	b510      	push	{r4, lr}
 8002142:	1e04      	subs	r4, r0, #0
 8002144:	d010      	beq.n	8002168 <__aeabi_ui2d+0x28>
 8002146:	f000 f899 	bl	800227c <__clzsi2>
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <__aeabi_ui2d+0x48>)
 800214c:	1a1b      	subs	r3, r3, r0
 800214e:	280a      	cmp	r0, #10
 8002150:	dc11      	bgt.n	8002176 <__aeabi_ui2d+0x36>
 8002152:	220b      	movs	r2, #11
 8002154:	0021      	movs	r1, r4
 8002156:	1a12      	subs	r2, r2, r0
 8002158:	40d1      	lsrs	r1, r2
 800215a:	3015      	adds	r0, #21
 800215c:	030a      	lsls	r2, r1, #12
 800215e:	055b      	lsls	r3, r3, #21
 8002160:	4084      	lsls	r4, r0
 8002162:	0b12      	lsrs	r2, r2, #12
 8002164:	0d5b      	lsrs	r3, r3, #21
 8002166:	e001      	b.n	800216c <__aeabi_ui2d+0x2c>
 8002168:	2300      	movs	r3, #0
 800216a:	2200      	movs	r2, #0
 800216c:	051b      	lsls	r3, r3, #20
 800216e:	4313      	orrs	r3, r2
 8002170:	0020      	movs	r0, r4
 8002172:	0019      	movs	r1, r3
 8002174:	bd10      	pop	{r4, pc}
 8002176:	0022      	movs	r2, r4
 8002178:	380b      	subs	r0, #11
 800217a:	4082      	lsls	r2, r0
 800217c:	055b      	lsls	r3, r3, #21
 800217e:	0312      	lsls	r2, r2, #12
 8002180:	2400      	movs	r4, #0
 8002182:	0b12      	lsrs	r2, r2, #12
 8002184:	0d5b      	lsrs	r3, r3, #21
 8002186:	e7f1      	b.n	800216c <__aeabi_ui2d+0x2c>
 8002188:	0000041e 	.word	0x0000041e

0800218c <__aeabi_cdrcmple>:
 800218c:	4684      	mov	ip, r0
 800218e:	0010      	movs	r0, r2
 8002190:	4662      	mov	r2, ip
 8002192:	468c      	mov	ip, r1
 8002194:	0019      	movs	r1, r3
 8002196:	4663      	mov	r3, ip
 8002198:	e000      	b.n	800219c <__aeabi_cdcmpeq>
 800219a:	46c0      	nop			; (mov r8, r8)

0800219c <__aeabi_cdcmpeq>:
 800219c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800219e:	f000 f9e3 	bl	8002568 <__ledf2>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d401      	bmi.n	80021aa <__aeabi_cdcmpeq+0xe>
 80021a6:	2100      	movs	r1, #0
 80021a8:	42c8      	cmn	r0, r1
 80021aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080021ac <__aeabi_dcmpeq>:
 80021ac:	b510      	push	{r4, lr}
 80021ae:	f000 f933 	bl	8002418 <__eqdf2>
 80021b2:	4240      	negs	r0, r0
 80021b4:	3001      	adds	r0, #1
 80021b6:	bd10      	pop	{r4, pc}

080021b8 <__aeabi_dcmplt>:
 80021b8:	b510      	push	{r4, lr}
 80021ba:	f000 f9d5 	bl	8002568 <__ledf2>
 80021be:	2800      	cmp	r0, #0
 80021c0:	db01      	blt.n	80021c6 <__aeabi_dcmplt+0xe>
 80021c2:	2000      	movs	r0, #0
 80021c4:	bd10      	pop	{r4, pc}
 80021c6:	2001      	movs	r0, #1
 80021c8:	bd10      	pop	{r4, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)

080021cc <__aeabi_dcmple>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	f000 f9cb 	bl	8002568 <__ledf2>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	dd01      	ble.n	80021da <__aeabi_dcmple+0xe>
 80021d6:	2000      	movs	r0, #0
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	2001      	movs	r0, #1
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	46c0      	nop			; (mov r8, r8)

080021e0 <__aeabi_dcmpgt>:
 80021e0:	b510      	push	{r4, lr}
 80021e2:	f000 f95b 	bl	800249c <__gedf2>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	dc01      	bgt.n	80021ee <__aeabi_dcmpgt+0xe>
 80021ea:	2000      	movs	r0, #0
 80021ec:	bd10      	pop	{r4, pc}
 80021ee:	2001      	movs	r0, #1
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)

080021f4 <__aeabi_dcmpge>:
 80021f4:	b510      	push	{r4, lr}
 80021f6:	f000 f951 	bl	800249c <__gedf2>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	da01      	bge.n	8002202 <__aeabi_dcmpge+0xe>
 80021fe:	2000      	movs	r0, #0
 8002200:	bd10      	pop	{r4, pc}
 8002202:	2001      	movs	r0, #1
 8002204:	bd10      	pop	{r4, pc}
 8002206:	46c0      	nop			; (mov r8, r8)

08002208 <__aeabi_cfrcmple>:
 8002208:	4684      	mov	ip, r0
 800220a:	0008      	movs	r0, r1
 800220c:	4661      	mov	r1, ip
 800220e:	e7ff      	b.n	8002210 <__aeabi_cfcmpeq>

08002210 <__aeabi_cfcmpeq>:
 8002210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002212:	f000 f8bd 	bl	8002390 <__lesf2>
 8002216:	2800      	cmp	r0, #0
 8002218:	d401      	bmi.n	800221e <__aeabi_cfcmpeq+0xe>
 800221a:	2100      	movs	r1, #0
 800221c:	42c8      	cmn	r0, r1
 800221e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002220 <__aeabi_fcmpeq>:
 8002220:	b510      	push	{r4, lr}
 8002222:	f000 f849 	bl	80022b8 <__eqsf2>
 8002226:	4240      	negs	r0, r0
 8002228:	3001      	adds	r0, #1
 800222a:	bd10      	pop	{r4, pc}

0800222c <__aeabi_fcmplt>:
 800222c:	b510      	push	{r4, lr}
 800222e:	f000 f8af 	bl	8002390 <__lesf2>
 8002232:	2800      	cmp	r0, #0
 8002234:	db01      	blt.n	800223a <__aeabi_fcmplt+0xe>
 8002236:	2000      	movs	r0, #0
 8002238:	bd10      	pop	{r4, pc}
 800223a:	2001      	movs	r0, #1
 800223c:	bd10      	pop	{r4, pc}
 800223e:	46c0      	nop			; (mov r8, r8)

08002240 <__aeabi_fcmple>:
 8002240:	b510      	push	{r4, lr}
 8002242:	f000 f8a5 	bl	8002390 <__lesf2>
 8002246:	2800      	cmp	r0, #0
 8002248:	dd01      	ble.n	800224e <__aeabi_fcmple+0xe>
 800224a:	2000      	movs	r0, #0
 800224c:	bd10      	pop	{r4, pc}
 800224e:	2001      	movs	r0, #1
 8002250:	bd10      	pop	{r4, pc}
 8002252:	46c0      	nop			; (mov r8, r8)

08002254 <__aeabi_fcmpgt>:
 8002254:	b510      	push	{r4, lr}
 8002256:	f000 f855 	bl	8002304 <__gesf2>
 800225a:	2800      	cmp	r0, #0
 800225c:	dc01      	bgt.n	8002262 <__aeabi_fcmpgt+0xe>
 800225e:	2000      	movs	r0, #0
 8002260:	bd10      	pop	{r4, pc}
 8002262:	2001      	movs	r0, #1
 8002264:	bd10      	pop	{r4, pc}
 8002266:	46c0      	nop			; (mov r8, r8)

08002268 <__aeabi_fcmpge>:
 8002268:	b510      	push	{r4, lr}
 800226a:	f000 f84b 	bl	8002304 <__gesf2>
 800226e:	2800      	cmp	r0, #0
 8002270:	da01      	bge.n	8002276 <__aeabi_fcmpge+0xe>
 8002272:	2000      	movs	r0, #0
 8002274:	bd10      	pop	{r4, pc}
 8002276:	2001      	movs	r0, #1
 8002278:	bd10      	pop	{r4, pc}
 800227a:	46c0      	nop			; (mov r8, r8)

0800227c <__clzsi2>:
 800227c:	211c      	movs	r1, #28
 800227e:	2301      	movs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	4298      	cmp	r0, r3
 8002284:	d301      	bcc.n	800228a <__clzsi2+0xe>
 8002286:	0c00      	lsrs	r0, r0, #16
 8002288:	3910      	subs	r1, #16
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	4298      	cmp	r0, r3
 800228e:	d301      	bcc.n	8002294 <__clzsi2+0x18>
 8002290:	0a00      	lsrs	r0, r0, #8
 8002292:	3908      	subs	r1, #8
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	4298      	cmp	r0, r3
 8002298:	d301      	bcc.n	800229e <__clzsi2+0x22>
 800229a:	0900      	lsrs	r0, r0, #4
 800229c:	3904      	subs	r1, #4
 800229e:	a202      	add	r2, pc, #8	; (adr r2, 80022a8 <__clzsi2+0x2c>)
 80022a0:	5c10      	ldrb	r0, [r2, r0]
 80022a2:	1840      	adds	r0, r0, r1
 80022a4:	4770      	bx	lr
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	02020304 	.word	0x02020304
 80022ac:	01010101 	.word	0x01010101
	...

080022b8 <__eqsf2>:
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	0042      	lsls	r2, r0, #1
 80022bc:	0245      	lsls	r5, r0, #9
 80022be:	024e      	lsls	r6, r1, #9
 80022c0:	004c      	lsls	r4, r1, #1
 80022c2:	0fc3      	lsrs	r3, r0, #31
 80022c4:	0a6d      	lsrs	r5, r5, #9
 80022c6:	2001      	movs	r0, #1
 80022c8:	0e12      	lsrs	r2, r2, #24
 80022ca:	0a76      	lsrs	r6, r6, #9
 80022cc:	0e24      	lsrs	r4, r4, #24
 80022ce:	0fc9      	lsrs	r1, r1, #31
 80022d0:	2aff      	cmp	r2, #255	; 0xff
 80022d2:	d006      	beq.n	80022e2 <__eqsf2+0x2a>
 80022d4:	2cff      	cmp	r4, #255	; 0xff
 80022d6:	d003      	beq.n	80022e0 <__eqsf2+0x28>
 80022d8:	42a2      	cmp	r2, r4
 80022da:	d101      	bne.n	80022e0 <__eqsf2+0x28>
 80022dc:	42b5      	cmp	r5, r6
 80022de:	d006      	beq.n	80022ee <__eqsf2+0x36>
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	d1fc      	bne.n	80022e0 <__eqsf2+0x28>
 80022e6:	2cff      	cmp	r4, #255	; 0xff
 80022e8:	d1fa      	bne.n	80022e0 <__eqsf2+0x28>
 80022ea:	2e00      	cmp	r6, #0
 80022ec:	d1f8      	bne.n	80022e0 <__eqsf2+0x28>
 80022ee:	428b      	cmp	r3, r1
 80022f0:	d006      	beq.n	8002300 <__eqsf2+0x48>
 80022f2:	2001      	movs	r0, #1
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d1f3      	bne.n	80022e0 <__eqsf2+0x28>
 80022f8:	0028      	movs	r0, r5
 80022fa:	1e43      	subs	r3, r0, #1
 80022fc:	4198      	sbcs	r0, r3
 80022fe:	e7ef      	b.n	80022e0 <__eqsf2+0x28>
 8002300:	2000      	movs	r0, #0
 8002302:	e7ed      	b.n	80022e0 <__eqsf2+0x28>

08002304 <__gesf2>:
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	0042      	lsls	r2, r0, #1
 8002308:	0245      	lsls	r5, r0, #9
 800230a:	024e      	lsls	r6, r1, #9
 800230c:	004c      	lsls	r4, r1, #1
 800230e:	0fc3      	lsrs	r3, r0, #31
 8002310:	0a6d      	lsrs	r5, r5, #9
 8002312:	0e12      	lsrs	r2, r2, #24
 8002314:	0a76      	lsrs	r6, r6, #9
 8002316:	0e24      	lsrs	r4, r4, #24
 8002318:	0fc8      	lsrs	r0, r1, #31
 800231a:	2aff      	cmp	r2, #255	; 0xff
 800231c:	d01b      	beq.n	8002356 <__gesf2+0x52>
 800231e:	2cff      	cmp	r4, #255	; 0xff
 8002320:	d00e      	beq.n	8002340 <__gesf2+0x3c>
 8002322:	2a00      	cmp	r2, #0
 8002324:	d11b      	bne.n	800235e <__gesf2+0x5a>
 8002326:	2c00      	cmp	r4, #0
 8002328:	d101      	bne.n	800232e <__gesf2+0x2a>
 800232a:	2e00      	cmp	r6, #0
 800232c:	d01c      	beq.n	8002368 <__gesf2+0x64>
 800232e:	2d00      	cmp	r5, #0
 8002330:	d00c      	beq.n	800234c <__gesf2+0x48>
 8002332:	4283      	cmp	r3, r0
 8002334:	d01c      	beq.n	8002370 <__gesf2+0x6c>
 8002336:	2102      	movs	r1, #2
 8002338:	1e58      	subs	r0, r3, #1
 800233a:	4008      	ands	r0, r1
 800233c:	3801      	subs	r0, #1
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	2e00      	cmp	r6, #0
 8002342:	d122      	bne.n	800238a <__gesf2+0x86>
 8002344:	2a00      	cmp	r2, #0
 8002346:	d1f4      	bne.n	8002332 <__gesf2+0x2e>
 8002348:	2d00      	cmp	r5, #0
 800234a:	d1f2      	bne.n	8002332 <__gesf2+0x2e>
 800234c:	2800      	cmp	r0, #0
 800234e:	d1f6      	bne.n	800233e <__gesf2+0x3a>
 8002350:	2001      	movs	r0, #1
 8002352:	4240      	negs	r0, r0
 8002354:	e7f3      	b.n	800233e <__gesf2+0x3a>
 8002356:	2d00      	cmp	r5, #0
 8002358:	d117      	bne.n	800238a <__gesf2+0x86>
 800235a:	2cff      	cmp	r4, #255	; 0xff
 800235c:	d0f0      	beq.n	8002340 <__gesf2+0x3c>
 800235e:	2c00      	cmp	r4, #0
 8002360:	d1e7      	bne.n	8002332 <__gesf2+0x2e>
 8002362:	2e00      	cmp	r6, #0
 8002364:	d1e5      	bne.n	8002332 <__gesf2+0x2e>
 8002366:	e7e6      	b.n	8002336 <__gesf2+0x32>
 8002368:	2000      	movs	r0, #0
 800236a:	2d00      	cmp	r5, #0
 800236c:	d0e7      	beq.n	800233e <__gesf2+0x3a>
 800236e:	e7e2      	b.n	8002336 <__gesf2+0x32>
 8002370:	42a2      	cmp	r2, r4
 8002372:	dc05      	bgt.n	8002380 <__gesf2+0x7c>
 8002374:	dbea      	blt.n	800234c <__gesf2+0x48>
 8002376:	42b5      	cmp	r5, r6
 8002378:	d802      	bhi.n	8002380 <__gesf2+0x7c>
 800237a:	d3e7      	bcc.n	800234c <__gesf2+0x48>
 800237c:	2000      	movs	r0, #0
 800237e:	e7de      	b.n	800233e <__gesf2+0x3a>
 8002380:	4243      	negs	r3, r0
 8002382:	4158      	adcs	r0, r3
 8002384:	0040      	lsls	r0, r0, #1
 8002386:	3801      	subs	r0, #1
 8002388:	e7d9      	b.n	800233e <__gesf2+0x3a>
 800238a:	2002      	movs	r0, #2
 800238c:	4240      	negs	r0, r0
 800238e:	e7d6      	b.n	800233e <__gesf2+0x3a>

08002390 <__lesf2>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	0042      	lsls	r2, r0, #1
 8002394:	0245      	lsls	r5, r0, #9
 8002396:	024e      	lsls	r6, r1, #9
 8002398:	004c      	lsls	r4, r1, #1
 800239a:	0fc3      	lsrs	r3, r0, #31
 800239c:	0a6d      	lsrs	r5, r5, #9
 800239e:	0e12      	lsrs	r2, r2, #24
 80023a0:	0a76      	lsrs	r6, r6, #9
 80023a2:	0e24      	lsrs	r4, r4, #24
 80023a4:	0fc8      	lsrs	r0, r1, #31
 80023a6:	2aff      	cmp	r2, #255	; 0xff
 80023a8:	d00b      	beq.n	80023c2 <__lesf2+0x32>
 80023aa:	2cff      	cmp	r4, #255	; 0xff
 80023ac:	d00d      	beq.n	80023ca <__lesf2+0x3a>
 80023ae:	2a00      	cmp	r2, #0
 80023b0:	d11f      	bne.n	80023f2 <__lesf2+0x62>
 80023b2:	2c00      	cmp	r4, #0
 80023b4:	d116      	bne.n	80023e4 <__lesf2+0x54>
 80023b6:	2e00      	cmp	r6, #0
 80023b8:	d114      	bne.n	80023e4 <__lesf2+0x54>
 80023ba:	2000      	movs	r0, #0
 80023bc:	2d00      	cmp	r5, #0
 80023be:	d010      	beq.n	80023e2 <__lesf2+0x52>
 80023c0:	e009      	b.n	80023d6 <__lesf2+0x46>
 80023c2:	2d00      	cmp	r5, #0
 80023c4:	d10c      	bne.n	80023e0 <__lesf2+0x50>
 80023c6:	2cff      	cmp	r4, #255	; 0xff
 80023c8:	d113      	bne.n	80023f2 <__lesf2+0x62>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d108      	bne.n	80023e0 <__lesf2+0x50>
 80023ce:	2a00      	cmp	r2, #0
 80023d0:	d008      	beq.n	80023e4 <__lesf2+0x54>
 80023d2:	4283      	cmp	r3, r0
 80023d4:	d012      	beq.n	80023fc <__lesf2+0x6c>
 80023d6:	2102      	movs	r1, #2
 80023d8:	1e58      	subs	r0, r3, #1
 80023da:	4008      	ands	r0, r1
 80023dc:	3801      	subs	r0, #1
 80023de:	e000      	b.n	80023e2 <__lesf2+0x52>
 80023e0:	2002      	movs	r0, #2
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	d1f4      	bne.n	80023d2 <__lesf2+0x42>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d1fa      	bne.n	80023e2 <__lesf2+0x52>
 80023ec:	2001      	movs	r0, #1
 80023ee:	4240      	negs	r0, r0
 80023f0:	e7f7      	b.n	80023e2 <__lesf2+0x52>
 80023f2:	2c00      	cmp	r4, #0
 80023f4:	d1ed      	bne.n	80023d2 <__lesf2+0x42>
 80023f6:	2e00      	cmp	r6, #0
 80023f8:	d1eb      	bne.n	80023d2 <__lesf2+0x42>
 80023fa:	e7ec      	b.n	80023d6 <__lesf2+0x46>
 80023fc:	42a2      	cmp	r2, r4
 80023fe:	dc05      	bgt.n	800240c <__lesf2+0x7c>
 8002400:	dbf2      	blt.n	80023e8 <__lesf2+0x58>
 8002402:	42b5      	cmp	r5, r6
 8002404:	d802      	bhi.n	800240c <__lesf2+0x7c>
 8002406:	d3ef      	bcc.n	80023e8 <__lesf2+0x58>
 8002408:	2000      	movs	r0, #0
 800240a:	e7ea      	b.n	80023e2 <__lesf2+0x52>
 800240c:	4243      	negs	r3, r0
 800240e:	4158      	adcs	r0, r3
 8002410:	0040      	lsls	r0, r0, #1
 8002412:	3801      	subs	r0, #1
 8002414:	e7e5      	b.n	80023e2 <__lesf2+0x52>
 8002416:	46c0      	nop			; (mov r8, r8)

08002418 <__eqdf2>:
 8002418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241a:	464e      	mov	r6, r9
 800241c:	4645      	mov	r5, r8
 800241e:	46de      	mov	lr, fp
 8002420:	4657      	mov	r7, sl
 8002422:	4690      	mov	r8, r2
 8002424:	b5e0      	push	{r5, r6, r7, lr}
 8002426:	0017      	movs	r7, r2
 8002428:	031a      	lsls	r2, r3, #12
 800242a:	0b12      	lsrs	r2, r2, #12
 800242c:	0005      	movs	r5, r0
 800242e:	4684      	mov	ip, r0
 8002430:	4819      	ldr	r0, [pc, #100]	; (8002498 <__eqdf2+0x80>)
 8002432:	030e      	lsls	r6, r1, #12
 8002434:	004c      	lsls	r4, r1, #1
 8002436:	4691      	mov	r9, r2
 8002438:	005a      	lsls	r2, r3, #1
 800243a:	0fdb      	lsrs	r3, r3, #31
 800243c:	469b      	mov	fp, r3
 800243e:	0b36      	lsrs	r6, r6, #12
 8002440:	0d64      	lsrs	r4, r4, #21
 8002442:	0fc9      	lsrs	r1, r1, #31
 8002444:	0d52      	lsrs	r2, r2, #21
 8002446:	4284      	cmp	r4, r0
 8002448:	d019      	beq.n	800247e <__eqdf2+0x66>
 800244a:	4282      	cmp	r2, r0
 800244c:	d010      	beq.n	8002470 <__eqdf2+0x58>
 800244e:	2001      	movs	r0, #1
 8002450:	4294      	cmp	r4, r2
 8002452:	d10e      	bne.n	8002472 <__eqdf2+0x5a>
 8002454:	454e      	cmp	r6, r9
 8002456:	d10c      	bne.n	8002472 <__eqdf2+0x5a>
 8002458:	2001      	movs	r0, #1
 800245a:	45c4      	cmp	ip, r8
 800245c:	d109      	bne.n	8002472 <__eqdf2+0x5a>
 800245e:	4559      	cmp	r1, fp
 8002460:	d017      	beq.n	8002492 <__eqdf2+0x7a>
 8002462:	2c00      	cmp	r4, #0
 8002464:	d105      	bne.n	8002472 <__eqdf2+0x5a>
 8002466:	0030      	movs	r0, r6
 8002468:	4328      	orrs	r0, r5
 800246a:	1e43      	subs	r3, r0, #1
 800246c:	4198      	sbcs	r0, r3
 800246e:	e000      	b.n	8002472 <__eqdf2+0x5a>
 8002470:	2001      	movs	r0, #1
 8002472:	bcf0      	pop	{r4, r5, r6, r7}
 8002474:	46bb      	mov	fp, r7
 8002476:	46b2      	mov	sl, r6
 8002478:	46a9      	mov	r9, r5
 800247a:	46a0      	mov	r8, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	0033      	movs	r3, r6
 8002480:	2001      	movs	r0, #1
 8002482:	432b      	orrs	r3, r5
 8002484:	d1f5      	bne.n	8002472 <__eqdf2+0x5a>
 8002486:	42a2      	cmp	r2, r4
 8002488:	d1f3      	bne.n	8002472 <__eqdf2+0x5a>
 800248a:	464b      	mov	r3, r9
 800248c:	433b      	orrs	r3, r7
 800248e:	d1f0      	bne.n	8002472 <__eqdf2+0x5a>
 8002490:	e7e2      	b.n	8002458 <__eqdf2+0x40>
 8002492:	2000      	movs	r0, #0
 8002494:	e7ed      	b.n	8002472 <__eqdf2+0x5a>
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	000007ff 	.word	0x000007ff

0800249c <__gedf2>:
 800249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249e:	4647      	mov	r7, r8
 80024a0:	46ce      	mov	lr, r9
 80024a2:	0004      	movs	r4, r0
 80024a4:	0018      	movs	r0, r3
 80024a6:	0016      	movs	r6, r2
 80024a8:	031b      	lsls	r3, r3, #12
 80024aa:	0b1b      	lsrs	r3, r3, #12
 80024ac:	4d2d      	ldr	r5, [pc, #180]	; (8002564 <__gedf2+0xc8>)
 80024ae:	004a      	lsls	r2, r1, #1
 80024b0:	4699      	mov	r9, r3
 80024b2:	b580      	push	{r7, lr}
 80024b4:	0043      	lsls	r3, r0, #1
 80024b6:	030f      	lsls	r7, r1, #12
 80024b8:	46a4      	mov	ip, r4
 80024ba:	46b0      	mov	r8, r6
 80024bc:	0b3f      	lsrs	r7, r7, #12
 80024be:	0d52      	lsrs	r2, r2, #21
 80024c0:	0fc9      	lsrs	r1, r1, #31
 80024c2:	0d5b      	lsrs	r3, r3, #21
 80024c4:	0fc0      	lsrs	r0, r0, #31
 80024c6:	42aa      	cmp	r2, r5
 80024c8:	d021      	beq.n	800250e <__gedf2+0x72>
 80024ca:	42ab      	cmp	r3, r5
 80024cc:	d013      	beq.n	80024f6 <__gedf2+0x5a>
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	d122      	bne.n	8002518 <__gedf2+0x7c>
 80024d2:	433c      	orrs	r4, r7
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <__gedf2+0x42>
 80024d8:	464d      	mov	r5, r9
 80024da:	432e      	orrs	r6, r5
 80024dc:	d022      	beq.n	8002524 <__gedf2+0x88>
 80024de:	2c00      	cmp	r4, #0
 80024e0:	d010      	beq.n	8002504 <__gedf2+0x68>
 80024e2:	4281      	cmp	r1, r0
 80024e4:	d022      	beq.n	800252c <__gedf2+0x90>
 80024e6:	2002      	movs	r0, #2
 80024e8:	3901      	subs	r1, #1
 80024ea:	4008      	ands	r0, r1
 80024ec:	3801      	subs	r0, #1
 80024ee:	bcc0      	pop	{r6, r7}
 80024f0:	46b9      	mov	r9, r7
 80024f2:	46b0      	mov	r8, r6
 80024f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f6:	464d      	mov	r5, r9
 80024f8:	432e      	orrs	r6, r5
 80024fa:	d129      	bne.n	8002550 <__gedf2+0xb4>
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d1f0      	bne.n	80024e2 <__gedf2+0x46>
 8002500:	433c      	orrs	r4, r7
 8002502:	d1ee      	bne.n	80024e2 <__gedf2+0x46>
 8002504:	2800      	cmp	r0, #0
 8002506:	d1f2      	bne.n	80024ee <__gedf2+0x52>
 8002508:	2001      	movs	r0, #1
 800250a:	4240      	negs	r0, r0
 800250c:	e7ef      	b.n	80024ee <__gedf2+0x52>
 800250e:	003d      	movs	r5, r7
 8002510:	4325      	orrs	r5, r4
 8002512:	d11d      	bne.n	8002550 <__gedf2+0xb4>
 8002514:	4293      	cmp	r3, r2
 8002516:	d0ee      	beq.n	80024f6 <__gedf2+0x5a>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e2      	bne.n	80024e2 <__gedf2+0x46>
 800251c:	464c      	mov	r4, r9
 800251e:	4326      	orrs	r6, r4
 8002520:	d1df      	bne.n	80024e2 <__gedf2+0x46>
 8002522:	e7e0      	b.n	80024e6 <__gedf2+0x4a>
 8002524:	2000      	movs	r0, #0
 8002526:	2c00      	cmp	r4, #0
 8002528:	d0e1      	beq.n	80024ee <__gedf2+0x52>
 800252a:	e7dc      	b.n	80024e6 <__gedf2+0x4a>
 800252c:	429a      	cmp	r2, r3
 800252e:	dc0a      	bgt.n	8002546 <__gedf2+0xaa>
 8002530:	dbe8      	blt.n	8002504 <__gedf2+0x68>
 8002532:	454f      	cmp	r7, r9
 8002534:	d8d7      	bhi.n	80024e6 <__gedf2+0x4a>
 8002536:	d00e      	beq.n	8002556 <__gedf2+0xba>
 8002538:	2000      	movs	r0, #0
 800253a:	454f      	cmp	r7, r9
 800253c:	d2d7      	bcs.n	80024ee <__gedf2+0x52>
 800253e:	2900      	cmp	r1, #0
 8002540:	d0e2      	beq.n	8002508 <__gedf2+0x6c>
 8002542:	0008      	movs	r0, r1
 8002544:	e7d3      	b.n	80024ee <__gedf2+0x52>
 8002546:	4243      	negs	r3, r0
 8002548:	4158      	adcs	r0, r3
 800254a:	0040      	lsls	r0, r0, #1
 800254c:	3801      	subs	r0, #1
 800254e:	e7ce      	b.n	80024ee <__gedf2+0x52>
 8002550:	2002      	movs	r0, #2
 8002552:	4240      	negs	r0, r0
 8002554:	e7cb      	b.n	80024ee <__gedf2+0x52>
 8002556:	45c4      	cmp	ip, r8
 8002558:	d8c5      	bhi.n	80024e6 <__gedf2+0x4a>
 800255a:	2000      	movs	r0, #0
 800255c:	45c4      	cmp	ip, r8
 800255e:	d2c6      	bcs.n	80024ee <__gedf2+0x52>
 8002560:	e7ed      	b.n	800253e <__gedf2+0xa2>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	000007ff 	.word	0x000007ff

08002568 <__ledf2>:
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	4647      	mov	r7, r8
 800256c:	46ce      	mov	lr, r9
 800256e:	0004      	movs	r4, r0
 8002570:	0018      	movs	r0, r3
 8002572:	0016      	movs	r6, r2
 8002574:	031b      	lsls	r3, r3, #12
 8002576:	0b1b      	lsrs	r3, r3, #12
 8002578:	4d2c      	ldr	r5, [pc, #176]	; (800262c <__ledf2+0xc4>)
 800257a:	004a      	lsls	r2, r1, #1
 800257c:	4699      	mov	r9, r3
 800257e:	b580      	push	{r7, lr}
 8002580:	0043      	lsls	r3, r0, #1
 8002582:	030f      	lsls	r7, r1, #12
 8002584:	46a4      	mov	ip, r4
 8002586:	46b0      	mov	r8, r6
 8002588:	0b3f      	lsrs	r7, r7, #12
 800258a:	0d52      	lsrs	r2, r2, #21
 800258c:	0fc9      	lsrs	r1, r1, #31
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	0fc0      	lsrs	r0, r0, #31
 8002592:	42aa      	cmp	r2, r5
 8002594:	d00d      	beq.n	80025b2 <__ledf2+0x4a>
 8002596:	42ab      	cmp	r3, r5
 8002598:	d010      	beq.n	80025bc <__ledf2+0x54>
 800259a:	2a00      	cmp	r2, #0
 800259c:	d127      	bne.n	80025ee <__ledf2+0x86>
 800259e:	433c      	orrs	r4, r7
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d111      	bne.n	80025c8 <__ledf2+0x60>
 80025a4:	464d      	mov	r5, r9
 80025a6:	432e      	orrs	r6, r5
 80025a8:	d10e      	bne.n	80025c8 <__ledf2+0x60>
 80025aa:	2000      	movs	r0, #0
 80025ac:	2c00      	cmp	r4, #0
 80025ae:	d015      	beq.n	80025dc <__ledf2+0x74>
 80025b0:	e00e      	b.n	80025d0 <__ledf2+0x68>
 80025b2:	003d      	movs	r5, r7
 80025b4:	4325      	orrs	r5, r4
 80025b6:	d110      	bne.n	80025da <__ledf2+0x72>
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d118      	bne.n	80025ee <__ledf2+0x86>
 80025bc:	464d      	mov	r5, r9
 80025be:	432e      	orrs	r6, r5
 80025c0:	d10b      	bne.n	80025da <__ledf2+0x72>
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d102      	bne.n	80025cc <__ledf2+0x64>
 80025c6:	433c      	orrs	r4, r7
 80025c8:	2c00      	cmp	r4, #0
 80025ca:	d00b      	beq.n	80025e4 <__ledf2+0x7c>
 80025cc:	4281      	cmp	r1, r0
 80025ce:	d014      	beq.n	80025fa <__ledf2+0x92>
 80025d0:	2002      	movs	r0, #2
 80025d2:	3901      	subs	r1, #1
 80025d4:	4008      	ands	r0, r1
 80025d6:	3801      	subs	r0, #1
 80025d8:	e000      	b.n	80025dc <__ledf2+0x74>
 80025da:	2002      	movs	r0, #2
 80025dc:	bcc0      	pop	{r6, r7}
 80025de:	46b9      	mov	r9, r7
 80025e0:	46b0      	mov	r8, r6
 80025e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e4:	2800      	cmp	r0, #0
 80025e6:	d1f9      	bne.n	80025dc <__ledf2+0x74>
 80025e8:	2001      	movs	r0, #1
 80025ea:	4240      	negs	r0, r0
 80025ec:	e7f6      	b.n	80025dc <__ledf2+0x74>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ec      	bne.n	80025cc <__ledf2+0x64>
 80025f2:	464c      	mov	r4, r9
 80025f4:	4326      	orrs	r6, r4
 80025f6:	d1e9      	bne.n	80025cc <__ledf2+0x64>
 80025f8:	e7ea      	b.n	80025d0 <__ledf2+0x68>
 80025fa:	429a      	cmp	r2, r3
 80025fc:	dd04      	ble.n	8002608 <__ledf2+0xa0>
 80025fe:	4243      	negs	r3, r0
 8002600:	4158      	adcs	r0, r3
 8002602:	0040      	lsls	r0, r0, #1
 8002604:	3801      	subs	r0, #1
 8002606:	e7e9      	b.n	80025dc <__ledf2+0x74>
 8002608:	429a      	cmp	r2, r3
 800260a:	dbeb      	blt.n	80025e4 <__ledf2+0x7c>
 800260c:	454f      	cmp	r7, r9
 800260e:	d8df      	bhi.n	80025d0 <__ledf2+0x68>
 8002610:	d006      	beq.n	8002620 <__ledf2+0xb8>
 8002612:	2000      	movs	r0, #0
 8002614:	454f      	cmp	r7, r9
 8002616:	d2e1      	bcs.n	80025dc <__ledf2+0x74>
 8002618:	2900      	cmp	r1, #0
 800261a:	d0e5      	beq.n	80025e8 <__ledf2+0x80>
 800261c:	0008      	movs	r0, r1
 800261e:	e7dd      	b.n	80025dc <__ledf2+0x74>
 8002620:	45c4      	cmp	ip, r8
 8002622:	d8d5      	bhi.n	80025d0 <__ledf2+0x68>
 8002624:	2000      	movs	r0, #0
 8002626:	45c4      	cmp	ip, r8
 8002628:	d2d8      	bcs.n	80025dc <__ledf2+0x74>
 800262a:	e7f5      	b.n	8002618 <__ledf2+0xb0>
 800262c:	000007ff 	.word	0x000007ff

08002630 <HAL_ADC_ConvCpltCallback>:
 * @param:
 * 		hadc	ADC Peripheral
 * @retval None
**/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
	filter->y_value[0] = ((1 - filter->alpha) * x_value) + (filter->alpha * filter->y_value[1]);
 8002632:	20fe      	movs	r0, #254	; 0xfe
{
 8002634:	46c6      	mov	lr, r8
	filter->y_value[1] = filter->y_value[0];	// Shift output samples
 8002636:	4c91      	ldr	r4, [pc, #580]	; (800287c <HAL_ADC_ConvCpltCallback+0x24c>)
	tx_buffer[0] = ntc_temperature(RC_Filter(&ADC_LPF,adcValue[0]/8));
 8002638:	4b91      	ldr	r3, [pc, #580]	; (8002880 <HAL_ADC_ConvCpltCallback+0x250>)
	filter->y_value[1] = filter->y_value[0];	// Shift output samples
 800263a:	6867      	ldr	r7, [r4, #4]
	tx_buffer[0] = ntc_temperature(RC_Filter(&ADC_LPF,adcValue[0]/8));
 800263c:	681e      	ldr	r6, [r3, #0]
	filter->y_value[0] = ((1 - filter->alpha) * x_value) + (filter->alpha * filter->y_value[1]);
 800263e:	6823      	ldr	r3, [r4, #0]
{
 8002640:	b500      	push	{lr}
	filter->y_value[0] = ((1 - filter->alpha) * x_value) + (filter->alpha * filter->y_value[1]);
 8002642:	1c19      	adds	r1, r3, #0
	filter->y_value[1] = filter->y_value[0];	// Shift output samples
 8002644:	60a7      	str	r7, [r4, #8]
	filter->y_value[0] = ((1 - filter->alpha) * x_value) + (filter->alpha * filter->y_value[1]);
 8002646:	0580      	lsls	r0, r0, #22
 8002648:	4698      	mov	r8, r3
 800264a:	f7fe f9c9 	bl	80009e0 <__aeabi_fsub>
	tx_buffer[0] = ntc_temperature(RC_Filter(&ADC_LPF,adcValue[0]/8));
 800264e:	08f6      	lsrs	r6, r6, #3
	filter->y_value[0] = ((1 - filter->alpha) * x_value) + (filter->alpha * filter->y_value[1]);
 8002650:	1c05      	adds	r5, r0, #0
 8002652:	0030      	movs	r0, r6
 8002654:	f7fe fb92 	bl	8000d7c <__aeabi_ui2f>
 8002658:	1c01      	adds	r1, r0, #0
 800265a:	1c28      	adds	r0, r5, #0
 800265c:	f7fe f89a 	bl	8000794 <__aeabi_fmul>
 8002660:	4641      	mov	r1, r8
 8002662:	1c05      	adds	r5, r0, #0
 8002664:	1c38      	adds	r0, r7, #0
 8002666:	f7fe f895 	bl	8000794 <__aeabi_fmul>
 800266a:	1c01      	adds	r1, r0, #0
 800266c:	1c28      	adds	r0, r5, #0
 800266e:	f7fd fef3 	bl	8000458 <__aeabi_fadd>
 8002672:	6060      	str	r0, [r4, #4]
	return (uint16_t)filter->y_value[0];
 8002674:	f7fd feba 	bl	80003ec <__aeabi_f2uiz>
 8002678:	b287      	uxth	r7, r0
	if(dividedADC <= TOPNTC_PLUS1 && dividedADC >= TOPNTC_PLUS20)
 800267a:	003b      	movs	r3, r7
 800267c:	3bdd      	subs	r3, #221	; 0xdd
 800267e:	3bff      	subs	r3, #255	; 0xff
 8002680:	2b16      	cmp	r3, #22
 8002682:	d800      	bhi.n	8002686 <HAL_ADC_ConvCpltCallback+0x56>
 8002684:	e082      	b.n	800278c <HAL_ADC_ConvCpltCallback+0x15c>
	else if(dividedADC < TOPNTC_PLUS20 && dividedADC >= TOPNTC_PLUS40)
 8002686:	003b      	movs	r3, r7
 8002688:	3bb4      	subs	r3, #180	; 0xb4
 800268a:	3bff      	subs	r3, #255	; 0xff
 800268c:	2b28      	cmp	r3, #40	; 0x28
 800268e:	d931      	bls.n	80026f4 <HAL_ADC_ConvCpltCallback+0xc4>
	else if(dividedADC < TOPNTC_PLUS40 && dividedADC >= TOPNTC_PLUS60)
 8002690:	003b      	movs	r3, r7
 8002692:	3b74      	subs	r3, #116	; 0x74
 8002694:	3bff      	subs	r3, #255	; 0xff
 8002696:	2b3f      	cmp	r3, #63	; 0x3f
 8002698:	d800      	bhi.n	800269c <HAL_ADC_ConvCpltCallback+0x6c>
 800269a:	e0df      	b.n	800285c <HAL_ADC_ConvCpltCallback+0x22c>
	else if(dividedADC < TOPNTC_PLUS60 && dividedADC >= TOPNTC_PLUS100)
 800269c:	003b      	movs	r3, r7
 800269e:	3bd0      	subs	r3, #208	; 0xd0
 80026a0:	2ba2      	cmp	r3, #162	; 0xa2
 80026a2:	d800      	bhi.n	80026a6 <HAL_ADC_ConvCpltCallback+0x76>
 80026a4:	e0bb      	b.n	800281e <HAL_ADC_ConvCpltCallback+0x1ee>
	else if(dividedADC < TOPNTC_PLUS100 && dividedADC >= TOPNTC_PLUS150)
 80026a6:	003b      	movs	r3, r7
 80026a8:	3b4c      	subs	r3, #76	; 0x4c
	return 0;
 80026aa:	2000      	movs	r0, #0
	else if(dividedADC < TOPNTC_PLUS100 && dividedADC >= TOPNTC_PLUS150)
 80026ac:	2b83      	cmp	r3, #131	; 0x83
 80026ae:	d82f      	bhi.n	8002710 <HAL_ADC_ConvCpltCallback+0xe0>
		return 	((0.0012 * pow(dividedADC, 2)) - (0.7012 * dividedADC) + 195.54);
 80026b0:	0038      	movs	r0, r7
 80026b2:	f7ff fd45 	bl	8002140 <__aeabi_ui2d>
 80026b6:	0002      	movs	r2, r0
 80026b8:	000b      	movs	r3, r1
 80026ba:	f7fe fedd 	bl	8001478 <__aeabi_dmul>
 80026be:	4a71      	ldr	r2, [pc, #452]	; (8002884 <HAL_ADC_ConvCpltCallback+0x254>)
 80026c0:	4b71      	ldr	r3, [pc, #452]	; (8002888 <HAL_ADC_ConvCpltCallback+0x258>)
 80026c2:	f7fe fed9 	bl	8001478 <__aeabi_dmul>
 80026c6:	0004      	movs	r4, r0
 80026c8:	0038      	movs	r0, r7
 80026ca:	000d      	movs	r5, r1
 80026cc:	f7ff fd08 	bl	80020e0 <__aeabi_i2d>
 80026d0:	4a6e      	ldr	r2, [pc, #440]	; (800288c <HAL_ADC_ConvCpltCallback+0x25c>)
 80026d2:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_ADC_ConvCpltCallback+0x260>)
 80026d4:	f7fe fed0 	bl	8001478 <__aeabi_dmul>
 80026d8:	0002      	movs	r2, r0
 80026da:	000b      	movs	r3, r1
 80026dc:	0020      	movs	r0, r4
 80026de:	0029      	movs	r1, r5
 80026e0:	f7ff f936 	bl	8001950 <__aeabi_dsub>
 80026e4:	4a6b      	ldr	r2, [pc, #428]	; (8002894 <HAL_ADC_ConvCpltCallback+0x264>)
 80026e6:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <HAL_ADC_ConvCpltCallback+0x268>)
 80026e8:	f7fe fb8a 	bl	8000e00 <__aeabi_dadd>
 80026ec:	f7fd fe96 	bl	800041c <__aeabi_d2uiz>
 80026f0:	b2c0      	uxtb	r0, r0
 80026f2:	e00d      	b.n	8002710 <HAL_ADC_ConvCpltCallback+0xe0>
		return  ((-0.4833 * dividedADC) + 251.14);
 80026f4:	0038      	movs	r0, r7
 80026f6:	f7ff fcf3 	bl	80020e0 <__aeabi_i2d>
 80026fa:	4a68      	ldr	r2, [pc, #416]	; (800289c <HAL_ADC_ConvCpltCallback+0x26c>)
 80026fc:	4b68      	ldr	r3, [pc, #416]	; (80028a0 <HAL_ADC_ConvCpltCallback+0x270>)
 80026fe:	f7fe febb 	bl	8001478 <__aeabi_dmul>
 8002702:	4a68      	ldr	r2, [pc, #416]	; (80028a4 <HAL_ADC_ConvCpltCallback+0x274>)
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_ADC_ConvCpltCallback+0x278>)
 8002706:	f7fe fb7b 	bl	8000e00 <__aeabi_dadd>
 800270a:	f7fd fe87 	bl	800041c <__aeabi_d2uiz>
 800270e:	b2c0      	uxtb	r0, r0
	tx_buffer[0] = ntc_temperature(RC_Filter(&ADC_LPF,adcValue[0]/8));
 8002710:	4f66      	ldr	r7, [pc, #408]	; (80028ac <HAL_ADC_ConvCpltCallback+0x27c>)
 8002712:	7038      	strb	r0, [r7, #0]
	tx_buffer[1] = ntc_temperature(adcValue[0]/8);
 8002714:	b2b0      	uxth	r0, r6
	if(dividedADC <= TOPNTC_PLUS1 && dividedADC >= TOPNTC_PLUS20)
 8002716:	0003      	movs	r3, r0
 8002718:	3bdd      	subs	r3, #221	; 0xdd
 800271a:	3bff      	subs	r3, #255	; 0xff
 800271c:	2b16      	cmp	r3, #22
 800271e:	d94b      	bls.n	80027b8 <HAL_ADC_ConvCpltCallback+0x188>
	else if(dividedADC < TOPNTC_PLUS20 && dividedADC >= TOPNTC_PLUS40)
 8002720:	0003      	movs	r3, r0
 8002722:	3bb4      	subs	r3, #180	; 0xb4
 8002724:	3bff      	subs	r3, #255	; 0xff
 8002726:	2b28      	cmp	r3, #40	; 0x28
 8002728:	d959      	bls.n	80027de <HAL_ADC_ConvCpltCallback+0x1ae>
	else if(dividedADC < TOPNTC_PLUS40 && dividedADC >= TOPNTC_PLUS60)
 800272a:	0003      	movs	r3, r0
 800272c:	3b74      	subs	r3, #116	; 0x74
 800272e:	3bff      	subs	r3, #255	; 0xff
 8002730:	2b3f      	cmp	r3, #63	; 0x3f
 8002732:	d800      	bhi.n	8002736 <HAL_ADC_ConvCpltCallback+0x106>
 8002734:	e082      	b.n	800283c <HAL_ADC_ConvCpltCallback+0x20c>
	else if(dividedADC < TOPNTC_PLUS60 && dividedADC >= TOPNTC_PLUS100)
 8002736:	0003      	movs	r3, r0
 8002738:	3bd0      	subs	r3, #208	; 0xd0
 800273a:	2ba2      	cmp	r3, #162	; 0xa2
 800273c:	d95f      	bls.n	80027fe <HAL_ADC_ConvCpltCallback+0x1ce>
	else if(dividedADC < TOPNTC_PLUS100 && dividedADC >= TOPNTC_PLUS150)
 800273e:	0002      	movs	r2, r0
 8002740:	3a4c      	subs	r2, #76	; 0x4c
	return 0;
 8002742:	2300      	movs	r3, #0
	else if(dividedADC < TOPNTC_PLUS100 && dividedADC >= TOPNTC_PLUS150)
 8002744:	2a83      	cmp	r2, #131	; 0x83
 8002746:	d846      	bhi.n	80027d6 <HAL_ADC_ConvCpltCallback+0x1a6>
		return 	((0.0012 * pow(dividedADC, 2)) - (0.7012 * dividedADC) + 195.54);
 8002748:	f7ff fcfa 	bl	8002140 <__aeabi_ui2d>
 800274c:	0002      	movs	r2, r0
 800274e:	000b      	movs	r3, r1
 8002750:	f7fe fe92 	bl	8001478 <__aeabi_dmul>
 8002754:	4a4b      	ldr	r2, [pc, #300]	; (8002884 <HAL_ADC_ConvCpltCallback+0x254>)
 8002756:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_ADC_ConvCpltCallback+0x258>)
 8002758:	f7fe fe8e 	bl	8001478 <__aeabi_dmul>
 800275c:	0004      	movs	r4, r0
 800275e:	0430      	lsls	r0, r6, #16
 8002760:	0c00      	lsrs	r0, r0, #16
 8002762:	000d      	movs	r5, r1
 8002764:	f7ff fcbc 	bl	80020e0 <__aeabi_i2d>
 8002768:	4a48      	ldr	r2, [pc, #288]	; (800288c <HAL_ADC_ConvCpltCallback+0x25c>)
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_ADC_ConvCpltCallback+0x260>)
 800276c:	f7fe fe84 	bl	8001478 <__aeabi_dmul>
 8002770:	0002      	movs	r2, r0
 8002772:	000b      	movs	r3, r1
 8002774:	0020      	movs	r0, r4
 8002776:	0029      	movs	r1, r5
 8002778:	f7ff f8ea 	bl	8001950 <__aeabi_dsub>
 800277c:	4b46      	ldr	r3, [pc, #280]	; (8002898 <HAL_ADC_ConvCpltCallback+0x268>)
 800277e:	4a45      	ldr	r2, [pc, #276]	; (8002894 <HAL_ADC_ConvCpltCallback+0x264>)
 8002780:	f7fe fb3e 	bl	8000e00 <__aeabi_dadd>
 8002784:	f7fd fe4a 	bl	800041c <__aeabi_d2uiz>
 8002788:	b2c3      	uxtb	r3, r0
 800278a:	e024      	b.n	80027d6 <HAL_ADC_ConvCpltCallback+0x1a6>
		return  ((-0.9011 * dividedADC) + 449.86);
 800278c:	0038      	movs	r0, r7
 800278e:	f7ff fca7 	bl	80020e0 <__aeabi_i2d>
 8002792:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <HAL_ADC_ConvCpltCallback+0x280>)
 8002794:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_ADC_ConvCpltCallback+0x284>)
 8002796:	f7fe fe6f 	bl	8001478 <__aeabi_dmul>
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_ADC_ConvCpltCallback+0x288>)
 800279c:	4a47      	ldr	r2, [pc, #284]	; (80028bc <HAL_ADC_ConvCpltCallback+0x28c>)
 800279e:	f7fe fb2f 	bl	8000e00 <__aeabi_dadd>
 80027a2:	f7fd fe3b 	bl	800041c <__aeabi_d2uiz>
	tx_buffer[0] = ntc_temperature(RC_Filter(&ADC_LPF,adcValue[0]/8));
 80027a6:	4f41      	ldr	r7, [pc, #260]	; (80028ac <HAL_ADC_ConvCpltCallback+0x27c>)
		return  ((-0.9011 * dividedADC) + 449.86);
 80027a8:	b2c0      	uxtb	r0, r0
	tx_buffer[0] = ntc_temperature(RC_Filter(&ADC_LPF,adcValue[0]/8));
 80027aa:	7038      	strb	r0, [r7, #0]
	tx_buffer[1] = ntc_temperature(adcValue[0]/8);
 80027ac:	b2b0      	uxth	r0, r6
	if(dividedADC <= TOPNTC_PLUS1 && dividedADC >= TOPNTC_PLUS20)
 80027ae:	0003      	movs	r3, r0
 80027b0:	3bdd      	subs	r3, #221	; 0xdd
 80027b2:	3bff      	subs	r3, #255	; 0xff
 80027b4:	2b16      	cmp	r3, #22
 80027b6:	d8b3      	bhi.n	8002720 <HAL_ADC_ConvCpltCallback+0xf0>
		return  ((-0.9011 * dividedADC) + 449.86);
 80027b8:	0430      	lsls	r0, r6, #16
 80027ba:	0c00      	lsrs	r0, r0, #16
 80027bc:	f7ff fc90 	bl	80020e0 <__aeabi_i2d>
 80027c0:	4a3b      	ldr	r2, [pc, #236]	; (80028b0 <HAL_ADC_ConvCpltCallback+0x280>)
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <HAL_ADC_ConvCpltCallback+0x284>)
 80027c4:	f7fe fe58 	bl	8001478 <__aeabi_dmul>
 80027c8:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_ADC_ConvCpltCallback+0x288>)
 80027ca:	4a3c      	ldr	r2, [pc, #240]	; (80028bc <HAL_ADC_ConvCpltCallback+0x28c>)
 80027cc:	f7fe fb18 	bl	8000e00 <__aeabi_dadd>
 80027d0:	f7fd fe24 	bl	800041c <__aeabi_d2uiz>
 80027d4:	b2c3      	uxtb	r3, r0
	tx_buffer[1] = ntc_temperature(adcValue[0]/8);
 80027d6:	707b      	strb	r3, [r7, #1]
}
 80027d8:	bc80      	pop	{r7}
 80027da:	46b8      	mov	r8, r7
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return  ((-0.4833 * dividedADC) + 251.14);
 80027de:	0430      	lsls	r0, r6, #16
 80027e0:	0c00      	lsrs	r0, r0, #16
 80027e2:	f7ff fc7d 	bl	80020e0 <__aeabi_i2d>
 80027e6:	4a2d      	ldr	r2, [pc, #180]	; (800289c <HAL_ADC_ConvCpltCallback+0x26c>)
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_ADC_ConvCpltCallback+0x270>)
 80027ea:	f7fe fe45 	bl	8001478 <__aeabi_dmul>
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <HAL_ADC_ConvCpltCallback+0x278>)
 80027f0:	4a2c      	ldr	r2, [pc, #176]	; (80028a4 <HAL_ADC_ConvCpltCallback+0x274>)
 80027f2:	f7fe fb05 	bl	8000e00 <__aeabi_dadd>
 80027f6:	f7fd fe11 	bl	800041c <__aeabi_d2uiz>
 80027fa:	b2c3      	uxtb	r3, r0
 80027fc:	e7eb      	b.n	80027d6 <HAL_ADC_ConvCpltCallback+0x1a6>
		return 	((-0.2414 * dividedADC) + 149.79);
 80027fe:	0430      	lsls	r0, r6, #16
 8002800:	0c00      	lsrs	r0, r0, #16
 8002802:	f7ff fc6d 	bl	80020e0 <__aeabi_i2d>
 8002806:	4a2e      	ldr	r2, [pc, #184]	; (80028c0 <HAL_ADC_ConvCpltCallback+0x290>)
 8002808:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_ADC_ConvCpltCallback+0x294>)
 800280a:	f7fe fe35 	bl	8001478 <__aeabi_dmul>
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_ADC_ConvCpltCallback+0x298>)
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <HAL_ADC_ConvCpltCallback+0x264>)
 8002812:	f7fe faf5 	bl	8000e00 <__aeabi_dadd>
 8002816:	f7fd fe01 	bl	800041c <__aeabi_d2uiz>
 800281a:	b2c3      	uxtb	r3, r0
 800281c:	e7db      	b.n	80027d6 <HAL_ADC_ConvCpltCallback+0x1a6>
 800281e:	0038      	movs	r0, r7
 8002820:	f7ff fc5e 	bl	80020e0 <__aeabi_i2d>
 8002824:	4a26      	ldr	r2, [pc, #152]	; (80028c0 <HAL_ADC_ConvCpltCallback+0x290>)
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_ADC_ConvCpltCallback+0x294>)
 8002828:	f7fe fe26 	bl	8001478 <__aeabi_dmul>
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_ADC_ConvCpltCallback+0x264>)
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_ADC_ConvCpltCallback+0x298>)
 8002830:	f7fe fae6 	bl	8000e00 <__aeabi_dadd>
 8002834:	f7fd fdf2 	bl	800041c <__aeabi_d2uiz>
 8002838:	b2c0      	uxtb	r0, r0
 800283a:	e769      	b.n	8002710 <HAL_ADC_ConvCpltCallback+0xe0>
		return	((-0.3077 * dividedADC) + 174.59);
 800283c:	0430      	lsls	r0, r6, #16
 800283e:	0c00      	lsrs	r0, r0, #16
 8002840:	f7ff fc4e 	bl	80020e0 <__aeabi_i2d>
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_ADC_ConvCpltCallback+0x29c>)
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8002848:	f7fe fe16 	bl	8001478 <__aeabi_dmul>
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8002850:	f7fe fad6 	bl	8000e00 <__aeabi_dadd>
 8002854:	f7fd fde2 	bl	800041c <__aeabi_d2uiz>
 8002858:	b2c3      	uxtb	r3, r0
 800285a:	e7bc      	b.n	80027d6 <HAL_ADC_ConvCpltCallback+0x1a6>
 800285c:	0038      	movs	r0, r7
 800285e:	f7ff fc3f 	bl	80020e0 <__aeabi_i2d>
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_ADC_ConvCpltCallback+0x29c>)
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8002866:	f7fe fe07 	bl	8001478 <__aeabi_dmul>
 800286a:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_ADC_ConvCpltCallback+0x2a4>)
 800286e:	f7fe fac7 	bl	8000e00 <__aeabi_dadd>
 8002872:	f7fd fdd3 	bl	800041c <__aeabi_d2uiz>
 8002876:	b2c0      	uxtb	r0, r0
 8002878:	e74a      	b.n	8002710 <HAL_ADC_ConvCpltCallback+0xe0>
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	2000002c 	.word	0x2000002c
 8002880:	2000003c 	.word	0x2000003c
 8002884:	30553261 	.word	0x30553261
 8002888:	3f53a92a 	.word	0x3f53a92a
 800288c:	fb7e9100 	.word	0xfb7e9100
 8002890:	3fe6703a 	.word	0x3fe6703a
 8002894:	ae147ae1 	.word	0xae147ae1
 8002898:	40687147 	.word	0x40687147
 800289c:	1f8a0903 	.word	0x1f8a0903
 80028a0:	bfdeee63 	.word	0xbfdeee63
 80028a4:	e147ae14 	.word	0xe147ae14
 80028a8:	406f647a 	.word	0x406f647a
 80028ac:	20000194 	.word	0x20000194
 80028b0:	aacd9e84 	.word	0xaacd9e84
 80028b4:	bfecd5cf 	.word	0xbfecd5cf
 80028b8:	407c1dc2 	.word	0x407c1dc2
 80028bc:	8f5c28f6 	.word	0x8f5c28f6
 80028c0:	f8a0902e 	.word	0xf8a0902e
 80028c4:	bfcee631 	.word	0xbfcee631
 80028c8:	4062b947 	.word	0x4062b947
 80028cc:	573eab36 	.word	0x573eab36
 80028d0:	bfd3b15b 	.word	0xbfd3b15b
 80028d4:	4065d2e1 	.word	0x4065d2e1
 80028d8:	47ae147b 	.word	0x47ae147b

080028dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028dc:	b500      	push	{lr}
 80028de:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028e0:	2234      	movs	r2, #52	; 0x34
 80028e2:	2100      	movs	r1, #0
 80028e4:	a805      	add	r0, sp, #20
 80028e6:	f002 fa17 	bl	8004d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ea:	2210      	movs	r2, #16
 80028ec:	2100      	movs	r1, #0
 80028ee:	4668      	mov	r0, sp
 80028f0:	f002 fa12 	bl	8004d18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f4:	2080      	movs	r0, #128	; 0x80
 80028f6:	0080      	lsls	r0, r0, #2
 80028f8:	f001 f8b8 	bl	8003a6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028fc:	2302      	movs	r3, #2
 80028fe:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002900:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002902:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002904:	3306      	adds	r3, #6
 8002906:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002908:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800290a:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800290c:	029b      	lsls	r3, r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800290e:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002910:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002912:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002914:	2140      	movs	r1, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002916:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002918:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800291a:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800291c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800291e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002920:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002922:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002924:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002926:	f001 f8d1 	bl	8003acc <HAL_RCC_OscConfig>
 800292a:	2800      	cmp	r0, #0
 800292c:	d001      	beq.n	8002932 <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800292e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002930:	e7fe      	b.n	8002930 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002932:	2207      	movs	r2, #7
 8002934:	2302      	movs	r3, #2
 8002936:	9200      	str	r2, [sp, #0]
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800293e:	2102      	movs	r1, #2
 8002940:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002942:	9202      	str	r2, [sp, #8]
 8002944:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002946:	f001 fb71 	bl	800402c <HAL_RCC_ClockConfig>
 800294a:	2800      	cmp	r0, #0
 800294c:	d001      	beq.n	8002952 <SystemClock_Config+0x76>
 800294e:	b672      	cpsid	i
  while (1)
 8002950:	e7fe      	b.n	8002950 <SystemClock_Config+0x74>
}
 8002952:	b013      	add	sp, #76	; 0x4c
 8002954:	bd00      	pop	{pc}
 8002956:	46c0      	nop			; (mov r8, r8)

08002958 <main>:
{
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2501      	movs	r5, #1
{
 800295c:	b087      	sub	sp, #28
  HAL_Init();
 800295e:	f000 f9cd 	bl	8002cfc <HAL_Init>
  SystemClock_Config();
 8002962:	f7ff ffbb 	bl	80028dc <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <main+0x138>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002968:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800296c:	2009      	movs	r0, #9
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	432a      	orrs	r2, r5
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
 8002972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002974:	402a      	ands	r2, r5
 8002976:	9200      	str	r2, [sp, #0]
 8002978:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800297a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297c:	432a      	orrs	r2, r5
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002984:	402b      	ands	r3, r5
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800298a:	f000 fd51 	bl	8003430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800298e:	2009      	movs	r0, #9
 8002990:	f000 fd80 	bl	8003494 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002994:	220c      	movs	r2, #12
 8002996:	2100      	movs	r1, #0
 8002998:	a802      	add	r0, sp, #8
 800299a:	f002 f9bd 	bl	8004d18 <memset>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800299e:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 80029a0:	4c3c      	ldr	r4, [pc, #240]	; (8002a94 <main+0x13c>)
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029a2:	212c      	movs	r1, #44	; 0x2c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029a4:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80029a6:	2200      	movs	r2, #0
  hadc1.Instance = ADC1;
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <main+0x140>)
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029aa:	2000      	movs	r0, #0
  hadc1.Instance = ADC1;
 80029ac:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029ae:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029b0:	5462      	strb	r2, [r4, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029b2:	2101      	movs	r1, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029b8:	2300      	movs	r3, #0
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029ba:	6320      	str	r0, [r4, #48]	; 0x30
 80029bc:	6361      	str	r1, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80029be:	213c      	movs	r1, #60	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029c0:	0020      	movs	r0, r4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80029c2:	8323      	strh	r3, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029c4:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029c6:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029c8:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029ca:	76a5      	strb	r5, [r4, #26]
  hadc1.Init.NbrOfConversion = 1;
 80029cc:	61e5      	str	r5, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ce:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029d0:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_3CYCLES_5;
 80029d2:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80029d4:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80029d6:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029d8:	f000 f9b6 	bl	8002d48 <HAL_ADC_Init>
 80029dc:	2800      	cmp	r0, #0
 80029de:	d001      	beq.n	80029e4 <main+0x8c>
 80029e0:	b672      	cpsid	i
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <main+0x8a>
  sConfig.Channel = ADC_CHANNEL_0;
 80029e4:	2201      	movs	r2, #1
 80029e6:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80029e8:	9004      	str	r0, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029ea:	a902      	add	r1, sp, #8
 80029ec:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80029ee:	9202      	str	r2, [sp, #8]
 80029f0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f2:	f000 fb23 	bl	800303c <HAL_ADC_ConfigChannel>
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d116      	bne.n	8002a28 <main+0xd0>
  huart1.Instance = USART1;
 80029fa:	4d28      	ldr	r5, [pc, #160]	; (8002a9c <main+0x144>)
 80029fc:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <main+0x148>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	60a8      	str	r0, [r5, #8]
  huart1.Instance = USART1;
 8002a00:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 9600;
 8002a02:	2396      	movs	r3, #150	; 0x96
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a08:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a0a:	60e8      	str	r0, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a0c:	6128      	str	r0, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0e:	61a8      	str	r0, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a10:	61e8      	str	r0, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a12:	6228      	str	r0, [r5, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a14:	6268      	str	r0, [r5, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a16:	62a8      	str	r0, [r5, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a18:	0028      	movs	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a1a:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a1c:	f001 ff7a 	bl	8004914 <HAL_UART_Init>
 8002a20:	1e01      	subs	r1, r0, #0
 8002a22:	d003      	beq.n	8002a2c <main+0xd4>
 8002a24:	b672      	cpsid	i
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <main+0xce>
 8002a28:	b672      	cpsid	i
 8002a2a:	e7fe      	b.n	8002a2a <main+0xd2>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a2c:	0028      	movs	r0, r5
 8002a2e:	f002 f8ad 	bl	8004b8c <HAL_UARTEx_SetTxFifoThreshold>
 8002a32:	1e01      	subs	r1, r0, #0
 8002a34:	d001      	beq.n	8002a3a <main+0xe2>
 8002a36:	b672      	cpsid	i
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <main+0xe0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a3a:	0028      	movs	r0, r5
 8002a3c:	f002 f8f6 	bl	8004c2c <HAL_UARTEx_SetRxFifoThreshold>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d001      	beq.n	8002a48 <main+0xf0>
 8002a44:	b672      	cpsid	i
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <main+0xee>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a48:	0028      	movs	r0, r5
 8002a4a:	f002 f883 	bl	8004b54 <HAL_UARTEx_DisableFifoMode>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d001      	beq.n	8002a56 <main+0xfe>
 8002a52:	b672      	cpsid	i
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <main+0xfc>
  ADC_LPF.alpha = LPF_ALPHA_COEF;
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <main+0x14c>)
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <main+0x150>)
		  HAL_ADC_Start_DMA(&hadc1, adcValue, 1);
 8002a5a:	2701      	movs	r7, #1
  ADC_LPF.alpha = LPF_ALPHA_COEF;
 8002a5c:	601a      	str	r2, [r3, #0]
  ADC_LPF.y_value[0] = 0.0f;
 8002a5e:	2200      	movs	r2, #0
  HAL_ADC_Start_DMA(&hadc1, adcValue, 1);
 8002a60:	4e12      	ldr	r6, [pc, #72]	; (8002aac <main+0x154>)
  ADC_LPF.y_value[0] = 0.0f;
 8002a62:	605a      	str	r2, [r3, #4]
  ADC_LPF.y_value[1] = 0.0f;
 8002a64:	609a      	str	r2, [r3, #8]
  HAL_ADC_Start_DMA(&hadc1, adcValue, 1);
 8002a66:	0031      	movs	r1, r6
 8002a68:	2201      	movs	r2, #1
 8002a6a:	0020      	movs	r0, r4
 8002a6c:	f000 fc86 	bl	800337c <HAL_ADC_Start_DMA>
 8002a70:	4d0f      	ldr	r5, [pc, #60]	; (8002ab0 <main+0x158>)
	  if(HAL_GetTick() - RCfilter_lastTime > LPF_TIME_SAMPLING){
 8002a72:	f000 f963 	bl	8002d3c <HAL_GetTick>
 8002a76:	682b      	ldr	r3, [r5, #0]
 8002a78:	1ac0      	subs	r0, r0, r3
 8002a7a:	2814      	cmp	r0, #20
 8002a7c:	d9f9      	bls.n	8002a72 <main+0x11a>
		  RCfilter_lastTime = HAL_GetTick();
 8002a7e:	f000 f95d 	bl	8002d3c <HAL_GetTick>
		  HAL_ADC_Start_DMA(&hadc1, adcValue, 1);
 8002a82:	003a      	movs	r2, r7
		  RCfilter_lastTime = HAL_GetTick();
 8002a84:	6028      	str	r0, [r5, #0]
		  HAL_ADC_Start_DMA(&hadc1, adcValue, 1);
 8002a86:	0031      	movs	r1, r6
 8002a88:	0020      	movs	r0, r4
 8002a8a:	f000 fc77 	bl	800337c <HAL_ADC_Start_DMA>
 8002a8e:	e7f0      	b.n	8002a72 <main+0x11a>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	20000040 	.word	0x20000040
 8002a98:	40012400 	.word	0x40012400
 8002a9c:	20000100 	.word	0x20000100
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	2000002c 	.word	0x2000002c
 8002aa8:	3f7ae148 	.word	0x3f7ae148
 8002aac:	2000003c 	.word	0x2000003c
 8002ab0:	20000038 	.word	0x20000038

08002ab4 <Error_Handler>:
 8002ab4:	b672      	cpsid	i
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <Error_Handler+0x2>

08002ab8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_MspInit+0x2c>)
{
 8002abc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ac0:	4311      	orrs	r1, r2
 8002ac2:	6419      	str	r1, [r3, #64]	; 0x40
 8002ac4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ac6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	9200      	str	r2, [sp, #0]
 8002acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ad0:	0549      	lsls	r1, r1, #21
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	400b      	ands	r3, r1
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ade:	b002      	add	sp, #8
 8002ae0:	4770      	bx	lr
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ae8:	b530      	push	{r4, r5, lr}
 8002aea:	0004      	movs	r4, r0
 8002aec:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aee:	2214      	movs	r2, #20
 8002af0:	2100      	movs	r1, #0
 8002af2:	a802      	add	r0, sp, #8
 8002af4:	f002 f910 	bl	8004d18 <memset>
  if(hadc->Instance==ADC1)
 8002af8:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <HAL_ADC_MspInit+0x90>)
 8002afa:	6822      	ldr	r2, [r4, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b00:	b009      	add	sp, #36	; 0x24
 8002b02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b04:	2080      	movs	r0, #128	; 0x80
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_ADC_MspInit+0x94>)
 8002b08:	0340      	lsls	r0, r0, #13
 8002b0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b0c:	4301      	orrs	r1, r0
 8002b0e:	6419      	str	r1, [r3, #64]	; 0x40
 8002b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b12:	4002      	ands	r2, r0
 8002b14:	9200      	str	r2, [sp, #0]
 8002b16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b18:	2201      	movs	r2, #1
 8002b1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	6359      	str	r1, [r3, #52]	; 0x34
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	401a      	ands	r2, r3
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b32:	9202      	str	r2, [sp, #8]
 8002b34:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f000 fe8b 	bl	8003850 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b3a:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8002b3c:	4d10      	ldr	r5, [pc, #64]	; (8002b80 <HAL_ADC_MspInit+0x98>)
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b40:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b42:	3281      	adds	r2, #129	; 0x81
 8002b44:	32ff      	adds	r2, #255	; 0xff
 8002b46:	616a      	str	r2, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b48:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8002b4a:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b4c:	2305      	movs	r3, #5
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b4e:	0112      	lsls	r2, r2, #4
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b50:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b52:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b54:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b56:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b58:	0028      	movs	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b5a:	60ab      	str	r3, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b5c:	60eb      	str	r3, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b5e:	61ea      	str	r2, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b60:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b62:	f000 fcbd 	bl	80034e0 <HAL_DMA_Init>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b6a:	6525      	str	r5, [r4, #80]	; 0x50
 8002b6c:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8002b6e:	e7c7      	b.n	8002b00 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002b70:	f7ff ffa0 	bl	8002ab4 <Error_Handler>
 8002b74:	e7f9      	b.n	8002b6a <HAL_ADC_MspInit+0x82>
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	40012400 	.word	0x40012400
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	200000a4 	.word	0x200000a4
 8002b84:	40020008 	.word	0x40020008

08002b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	0004      	movs	r4, r0
 8002b8c:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8e:	2214      	movs	r2, #20
 8002b90:	2100      	movs	r1, #0
 8002b92:	a802      	add	r0, sp, #8
 8002b94:	f002 f8c0 	bl	8004d18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b98:	2218      	movs	r2, #24
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	a808      	add	r0, sp, #32
 8002b9e:	f002 f8bb 	bl	8004d18 <memset>
  if(huart->Instance==USART1)
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_UART_MspInit+0x90>)
 8002ba4:	6822      	ldr	r2, [r4, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d001      	beq.n	8002bae <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002baa:	b00e      	add	sp, #56	; 0x38
 8002bac:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bae:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bb2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb4:	f001 fb16 	bl	80041e4 <HAL_RCCEx_PeriphCLKConfig>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d129      	bne.n	8002c10 <HAL_UART_MspInit+0x88>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bbc:	2080      	movs	r0, #128	; 0x80
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_UART_MspInit+0x94>)
 8002bc0:	01c0      	lsls	r0, r0, #7
 8002bc2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bc4:	4301      	orrs	r1, r0
 8002bc6:	6419      	str	r1, [r3, #64]	; 0x40
 8002bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bca:	4002      	ands	r2, r0
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bd4:	20c0      	movs	r0, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	6359      	str	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bda:	2102      	movs	r1, #2
 8002bdc:	00c0      	lsls	r0, r0, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002be0:	9002      	str	r0, [sp, #8]
 8002be2:	9103      	str	r1, [sp, #12]
 8002be4:	2001      	movs	r0, #1
 8002be6:	2100      	movs	r1, #0
 8002be8:	9004      	str	r0, [sp, #16]
 8002bea:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4013      	ands	r3, r2
 8002bf0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	a902      	add	r1, sp, #8
 8002bf4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002bf8:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f000 fe29 	bl	8003850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	201b      	movs	r0, #27
 8002c04:	f000 fc14 	bl	8003430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c08:	201b      	movs	r0, #27
 8002c0a:	f000 fc43 	bl	8003494 <HAL_NVIC_EnableIRQ>
}
 8002c0e:	e7cc      	b.n	8002baa <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002c10:	f7ff ff50 	bl	8002ab4 <Error_Handler>
 8002c14:	e7d2      	b.n	8002bbc <HAL_UART_MspInit+0x34>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40021000 	.word	0x40021000

08002c20 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <NMI_Handler>
 8002c22:	46c0      	nop			; (mov r8, r8)

08002c24 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <HardFault_Handler>
 8002c26:	46c0      	nop			; (mov r8, r8)

08002c28 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c28:	4770      	bx	lr
 8002c2a:	46c0      	nop			; (mov r8, r8)

08002c2c <PendSV_Handler>:
 8002c2c:	4770      	bx	lr
 8002c2e:	46c0      	nop			; (mov r8, r8)

08002c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c32:	f000 f877 	bl	8002d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c36:	bd10      	pop	{r4, pc}

08002c38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c3a:	4802      	ldr	r0, [pc, #8]	; (8002c44 <DMA1_Channel1_IRQHandler+0xc>)
 8002c3c:	f000 fdac 	bl	8003798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c40:	bd10      	pop	{r4, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	200000a4 	.word	0x200000a4

08002c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002c48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c4a:	4802      	ldr	r0, [pc, #8]	; (8002c54 <USART1_IRQHandler+0xc>)
 8002c4c:	f001 fb98 	bl	8004380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	20000100 	.word	0x20000100

08002c58 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c58:	4770      	bx	lr
 8002c5a:	46c0      	nop			; (mov r8, r8)

08002c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c5c:	480d      	ldr	r0, [pc, #52]	; (8002c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c60:	f7ff fffa 	bl	8002c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c64:	480c      	ldr	r0, [pc, #48]	; (8002c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c66:	490d      	ldr	r1, [pc, #52]	; (8002c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <LoopForever+0xe>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c6c:	e002      	b.n	8002c74 <LoopCopyDataInit>

08002c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c72:	3304      	adds	r3, #4

08002c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c78:	d3f9      	bcc.n	8002c6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ca8 <LoopForever+0x16>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c80:	e001      	b.n	8002c86 <LoopFillZerobss>

08002c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c84:	3204      	adds	r2, #4

08002c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c88:	d3fb      	bcc.n	8002c82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c8a:	f002 f821 	bl	8004cd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c8e:	f7ff fe63 	bl	8002958 <main>

08002c92 <LoopForever>:

LoopForever:
  b LoopForever
 8002c92:	e7fe      	b.n	8002c92 <LoopForever>
  ldr   r0, =_estack
 8002c94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002ca0:	08004e54 	.word	0x08004e54
  ldr r2, =_sbss
 8002ca4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002ca8:	200001a0 	.word	0x200001a0

08002cac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cac:	e7fe      	b.n	8002cac <ADC1_IRQHandler>
	...

08002cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_InitTick+0x40>)
{
 8002cb4:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8002cb6:	7819      	ldrb	r1, [r3, #0]
 8002cb8:	2900      	cmp	r1, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cbc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002cbe:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002cc0:	20fa      	movs	r0, #250	; 0xfa
 8002cc2:	0080      	lsls	r0, r0, #2
 8002cc4:	f7fd fa1c 	bl	8000100 <__udivsi3>
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_InitTick+0x44>)
 8002cca:	0001      	movs	r1, r0
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f7fd fa17 	bl	8000100 <__udivsi3>
 8002cd2:	f000 fbeb 	bl	80034ac <HAL_SYSTICK_Config>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cda:	2c03      	cmp	r4, #3
 8002cdc:	d8ee      	bhi.n	8002cbc <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cde:	3801      	subs	r0, #1
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	0021      	movs	r1, r4
 8002ce4:	f000 fba4 	bl	8003430 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_InitTick+0x48>)
 8002cea:	2000      	movs	r0, #0
 8002cec:	601c      	str	r4, [r3, #0]
  return status;
 8002cee:	e7e6      	b.n	8002cbe <HAL_InitTick+0xe>
 8002cf0:	20000004 	.word	0x20000004
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	20000008 	.word	0x20000008

08002cfc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_Init+0x24>)
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	6811      	ldr	r1, [r2, #0]
{
 8002d04:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d06:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d08:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d0a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0c:	f7ff ffd0 	bl	8002cb0 <HAL_InitTick>
 8002d10:	1e04      	subs	r4, r0, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8002d14:	2401      	movs	r4, #1
}
 8002d16:	0020      	movs	r0, r4
 8002d18:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8002d1a:	f7ff fecd 	bl	8002ab8 <HAL_MspInit>
 8002d1e:	e7fa      	b.n	8002d16 <HAL_Init+0x1a>
 8002d20:	40022000 	.word	0x40022000

08002d24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <HAL_IncTick+0x10>)
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <HAL_IncTick+0x14>)
 8002d28:	6811      	ldr	r1, [r2, #0]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	185b      	adds	r3, r3, r1
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	4770      	bx	lr
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	2000019c 	.word	0x2000019c
 8002d38:	20000004 	.word	0x20000004

08002d3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <HAL_GetTick+0x8>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
}
 8002d40:	4770      	bx	lr
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	2000019c 	.word	0x2000019c

08002d48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	46c6      	mov	lr, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d4c:	2300      	movs	r3, #0
{
 8002d4e:	b500      	push	{lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8002d54:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d56:	d100      	bne.n	8002d5a <HAL_ADC_Init+0x12>
 8002d58:	e0db      	b.n	8002f12 <HAL_ADC_Init+0x1ca>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d5a:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8002d5c:	2d00      	cmp	r5, #0
 8002d5e:	d100      	bne.n	8002d62 <HAL_ADC_Init+0x1a>
 8002d60:	e0ab      	b.n	8002eba <HAL_ADC_Init+0x172>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d62:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d64:	6825      	ldr	r5, [r4, #0]
 8002d66:	055b      	lsls	r3, r3, #21
 8002d68:	68aa      	ldr	r2, [r5, #8]
 8002d6a:	421a      	tst	r2, r3
 8002d6c:	d115      	bne.n	8002d9a <HAL_ADC_Init+0x52>
  MODIFY_REG(ADCx->CR,
 8002d6e:	68aa      	ldr	r2, [r5, #8]
 8002d70:	497e      	ldr	r1, [pc, #504]	; (8002f6c <HAL_ADC_Init+0x224>)
 8002d72:	400a      	ands	r2, r1
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d78:	4b7d      	ldr	r3, [pc, #500]	; (8002f70 <HAL_ADC_Init+0x228>)
 8002d7a:	497e      	ldr	r1, [pc, #504]	; (8002f74 <HAL_ADC_Init+0x22c>)
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	f7fd f9bf 	bl	8000100 <__udivsi3>
 8002d82:	3001      	adds	r0, #1
 8002d84:	0040      	lsls	r0, r0, #1
 8002d86:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d88:	9b01      	ldr	r3, [sp, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_ADC_Init+0x52>
    {
      wait_loop_index--;
 8002d8e:	9b01      	ldr	r3, [sp, #4]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002d94:	9b01      	ldr	r3, [sp, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f9      	bne.n	8002d8e <HAL_ADC_Init+0x46>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d9a:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	d400      	bmi.n	8002da4 <HAL_ADC_Init+0x5c>
 8002da2:	e07d      	b.n	8002ea0 <HAL_ADC_Init+0x158>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da4:	68ab      	ldr	r3, [r5, #8]
 8002da6:	075b      	lsls	r3, r3, #29
 8002da8:	d509      	bpl.n	8002dbe <HAL_ADC_Init+0x76>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002daa:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dac:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8002dae:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002db2:	4313      	orrs	r3, r2
 8002db4:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8002db6:	b002      	add	sp, #8
 8002db8:	bc80      	pop	{r7}
 8002dba:	46b8      	mov	r8, r7
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dc0:	06db      	lsls	r3, r3, #27
 8002dc2:	d4f3      	bmi.n	8002dac <HAL_ADC_Init+0x64>
    ADC_STATE_CLR_SET(hadc->State,
 8002dc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dc6:	4a6c      	ldr	r2, [pc, #432]	; (8002f78 <HAL_ADC_Init+0x230>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	3206      	adds	r2, #6
 8002dcc:	32ff      	adds	r2, #255	; 0xff
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd2:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd4:	07db      	lsls	r3, r3, #31
 8002dd6:	d476      	bmi.n	8002ec6 <HAL_ADC_Init+0x17e>
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002dd8:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002dda:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ddc:	0377      	lsls	r7, r6, #13
 8002dde:	46bc      	mov	ip, r7
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002de0:	7e21      	ldrb	r1, [r4, #24]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002de2:	6b27      	ldr	r7, [r4, #48]	; 0x30
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002de4:	03db      	lsls	r3, r3, #15
 8002de6:	4698      	mov	r8, r3
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002de8:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002dea:	0389      	lsls	r1, r1, #14
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002dec:	2f00      	cmp	r7, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_ADC_Init+0xac>
 8002df0:	2780      	movs	r7, #128	; 0x80
 8002df2:	017f      	lsls	r7, r7, #5
 8002df4:	68e3      	ldr	r3, [r4, #12]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	4643      	mov	r3, r8
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	4663      	mov	r3, ip
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e00:	6921      	ldr	r1, [r4, #16]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	2900      	cmp	r1, #0
 8002e06:	da00      	bge.n	8002e0a <HAL_ADC_Init+0xc2>
 8002e08:	e09f      	b.n	8002f4a <HAL_ADC_Init+0x202>
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	039b      	lsls	r3, r3, #14
 8002e0e:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e10:	232c      	movs	r3, #44	; 0x2c
 8002e12:	5ce3      	ldrb	r3, [r4, r3]
 8002e14:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e16:	4313      	orrs	r3, r2
 8002e18:	433b      	orrs	r3, r7
 8002e1a:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e1c:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e1e:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e20:	5de2      	ldrb	r2, [r4, r7]
 8002e22:	2a01      	cmp	r2, #1
 8002e24:	d100      	bne.n	8002e28 <HAL_ADC_Init+0xe0>
 8002e26:	e094      	b.n	8002f52 <HAL_ADC_Init+0x20a>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e2a:	2a00      	cmp	r2, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002e2e:	26e0      	movs	r6, #224	; 0xe0
 8002e30:	0076      	lsls	r6, r6, #1
 8002e32:	4032      	ands	r2, r6
 8002e34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e36:	4332      	orrs	r2, r6
 8002e38:	4313      	orrs	r3, r2
      MODIFY_REG(hadc->Instance->CFGR1,
 8002e3a:	68ea      	ldr	r2, [r5, #12]
 8002e3c:	4e4f      	ldr	r6, [pc, #316]	; (8002f7c <HAL_ADC_Init+0x234>)
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e3e:	6867      	ldr	r7, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8002e40:	4032      	ands	r2, r6
 8002e42:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e44:	0fbe      	lsrs	r6, r7, #30
 8002e46:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 8002e48:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e4a:	07b3      	lsls	r3, r6, #30
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8002e50:	233c      	movs	r3, #60	; 0x3c
 8002e52:	5ce3      	ldrb	r3, [r4, r3]
 8002e54:	469c      	mov	ip, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d109      	bne.n	8002e6e <HAL_ADC_Init+0x126>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e5c:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002e5e:	4333      	orrs	r3, r6
 8002e60:	4313      	orrs	r3, r2
 8002e62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e64:	4313      	orrs	r3, r2
 8002e66:	4642      	mov	r2, r8
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	4662      	mov	r2, ip
 8002e6c:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e6e:	692b      	ldr	r3, [r5, #16]
 8002e70:	4e43      	ldr	r6, [pc, #268]	; (8002f80 <HAL_ADC_Init+0x238>)
 8002e72:	4033      	ands	r3, r6
 8002e74:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e76:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e78:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e7a:	007b      	lsls	r3, r7, #1
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	05d2      	lsls	r2, r2, #23
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d021      	beq.n	8002ec8 <HAL_ADC_Init+0x180>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	429f      	cmp	r7, r3
 8002e8a:	d01d      	beq.n	8002ec8 <HAL_ADC_Init+0x180>
        MODIFY_REG(ADC1_COMMON->CCR,
 8002e8c:	4a3d      	ldr	r2, [pc, #244]	; (8002f84 <HAL_ADC_Init+0x23c>)
 8002e8e:	4e3e      	ldr	r6, [pc, #248]	; (8002f88 <HAL_ADC_Init+0x240>)
 8002e90:	6813      	ldr	r3, [r2, #0]
 8002e92:	4033      	ands	r3, r6
 8002e94:	26f0      	movs	r6, #240	; 0xf0
 8002e96:	03b6      	lsls	r6, r6, #14
 8002e98:	4037      	ands	r7, r6
 8002e9a:	431f      	orrs	r7, r3
 8002e9c:	6017      	str	r7, [r2, #0]
 8002e9e:	e013      	b.n	8002ec8 <HAL_ADC_Init+0x180>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8002ea4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eaa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002eac:	3a0f      	subs	r2, #15
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb2:	68ab      	ldr	r3, [r5, #8]
 8002eb4:	075b      	lsls	r3, r3, #29
 8002eb6:	d582      	bpl.n	8002dbe <HAL_ADC_Init+0x76>
 8002eb8:	e777      	b.n	8002daa <HAL_ADC_Init+0x62>
    HAL_ADC_MspInit(hadc);
 8002eba:	f7ff fe15 	bl	8002ae8 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8002ebe:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec0:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002ec2:	54e5      	strb	r5, [r4, r3]
 8002ec4:	e74d      	b.n	8002d62 <HAL_ADC_Init+0x1a>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ec6:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8002ec8:	2207      	movs	r2, #7
 8002eca:	2770      	movs	r7, #112	; 0x70
 8002ecc:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002ece:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	4333      	orrs	r3, r6
 8002ed4:	616b      	str	r3, [r5, #20]
 8002ed6:	696a      	ldr	r2, [r5, #20]
 8002ed8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002eda:	43ba      	bics	r2, r7
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002ee2:	2900      	cmp	r1, #0
 8002ee4:	d117      	bne.n	8002f16 <HAL_ADC_Init+0x1ce>
      SET_BIT(hadc->Instance->CHSELR,
 8002ee6:	2310      	movs	r3, #16
 8002ee8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002eea:	425b      	negs	r3, r3
 8002eec:	4313      	orrs	r3, r2
 8002eee:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ef0:	2307      	movs	r3, #7
 8002ef2:	696a      	ldr	r2, [r5, #20]
 8002ef4:	4013      	ands	r3, r2
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ef6:	429e      	cmp	r6, r3
 8002ef8:	d01e      	beq.n	8002f38 <HAL_ADC_Init+0x1f0>
      ADC_STATE_CLR_SET(hadc->State,
 8002efa:	2212      	movs	r2, #18
 8002efc:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8002efe:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002f00:	4393      	bics	r3, r2
 8002f02:	3a02      	subs	r2, #2
 8002f04:	4313      	orrs	r3, r2
 8002f06:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002f0a:	3a0f      	subs	r2, #15
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8002f10:	e751      	b.n	8002db6 <HAL_ADC_Init+0x6e>
    return HAL_ERROR;
 8002f12:	2001      	movs	r0, #1
 8002f14:	e74f      	b.n	8002db6 <HAL_ADC_Init+0x6e>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	039b      	lsls	r3, r3, #14
 8002f1a:	4299      	cmp	r1, r3
 8002f1c:	d1e8      	bne.n	8002ef0 <HAL_ADC_Init+0x1a8>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002f1e:	221c      	movs	r2, #28
 8002f20:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002f22:	69e3      	ldr	r3, [r4, #28]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	401a      	ands	r2, r3
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	4093      	lsls	r3, r2
 8002f30:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002f32:	4313      	orrs	r3, r2
 8002f34:	62ab      	str	r3, [r5, #40]	; 0x28
 8002f36:	e7db      	b.n	8002ef0 <HAL_ADC_Init+0x1a8>
      ADC_CLEAR_ERRORCODE(hadc);
 8002f38:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002f3c:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f40:	4393      	bics	r3, r2
 8002f42:	3a02      	subs	r2, #2
 8002f44:	4313      	orrs	r3, r2
 8002f46:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f48:	e735      	b.n	8002db6 <HAL_ADC_Init+0x6e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f4a:	004b      	lsls	r3, r1, #1
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	469c      	mov	ip, r3
 8002f50:	e75e      	b.n	8002e10 <HAL_ADC_Init+0xc8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f52:	2e00      	cmp	r6, #0
 8002f54:	d103      	bne.n	8002f5e <HAL_ADC_Init+0x216>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	0252      	lsls	r2, r2, #9
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	e764      	b.n	8002e28 <HAL_ADC_Init+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5e:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8002f60:	4337      	orrs	r7, r6
 8002f62:	65a7      	str	r7, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f64:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8002f66:	4332      	orrs	r2, r6
 8002f68:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002f6a:	e75d      	b.n	8002e28 <HAL_ADC_Init+0xe0>
 8002f6c:	6fffffe8 	.word	0x6fffffe8
 8002f70:	20000000 	.word	0x20000000
 8002f74:	00030d40 	.word	0x00030d40
 8002f78:	fffffefd 	.word	0xfffffefd
 8002f7c:	fffe0201 	.word	0xfffe0201
 8002f80:	1ffffc02 	.word	0x1ffffc02
 8002f84:	40012708 	.word	0x40012708
 8002f88:	ffc3ffff 	.word	0xffc3ffff

08002f8c <HAL_ADC_ConvHalfCpltCallback>:
 8002f8c:	4770      	bx	lr
 8002f8e:	46c0      	nop			; (mov r8, r8)

08002f90 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f90:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f92:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002f94:	f7ff fffa 	bl	8002f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f98:	bd10      	pop	{r4, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)

08002f9c <HAL_ADC_ErrorCallback>:
 8002f9c:	4770      	bx	lr
 8002f9e:	46c0      	nop			; (mov r8, r8)

08002fa0 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fa0:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa2:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002fa4:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fa6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002fae:	3a3c      	subs	r2, #60	; 0x3c
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fb4:	f7ff fff2 	bl	8002f9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)

08002fbc <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fbc:	2150      	movs	r1, #80	; 0x50
{
 8002fbe:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002fc2:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fc4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002fc6:	4211      	tst	r1, r2
 8002fc8:	d10d      	bne.n	8002fe6 <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002fd2:	22c0      	movs	r2, #192	; 0xc0
 8002fd4:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fd6:	6803      	ldr	r3, [r0, #0]
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	68d9      	ldr	r1, [r3, #12]
 8002fdc:	4211      	tst	r1, r2
 8002fde:	d00a      	beq.n	8002ff6 <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8002fe0:	f7ff fb26 	bl	8002630 <HAL_ADC_ConvCpltCallback>
}
 8002fe4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fe6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002fe8:	06d2      	lsls	r2, r2, #27
 8002fea:	d416      	bmi.n	800301a <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002fee:	0018      	movs	r0, r3
 8002ff0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ff2:	4790      	blx	r2
}
 8002ff4:	e7f6      	b.n	8002fe4 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ff6:	7e82      	ldrb	r2, [r0, #26]
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d1f1      	bne.n	8002fe0 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	0712      	lsls	r2, r2, #28
 8003000:	d5ee      	bpl.n	8002fe0 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	0752      	lsls	r2, r2, #29
 8003006:	d50b      	bpl.n	8003020 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003008:	2220      	movs	r2, #32
 800300a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800300c:	4313      	orrs	r3, r2
 800300e:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003010:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003012:	3a1f      	subs	r2, #31
 8003014:	4313      	orrs	r3, r2
 8003016:	65c3      	str	r3, [r0, #92]	; 0x5c
 8003018:	e7e2      	b.n	8002fe0 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 800301a:	f7ff ffbf 	bl	8002f9c <HAL_ADC_ErrorCallback>
 800301e:	e7e1      	b.n	8002fe4 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003020:	210c      	movs	r1, #12
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	438a      	bics	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003028:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800302a:	4a03      	ldr	r2, [pc, #12]	; (8003038 <ADC_DMAConvCplt+0x7c>)
 800302c:	4013      	ands	r3, r2
 800302e:	3204      	adds	r2, #4
 8003030:	32ff      	adds	r2, #255	; 0xff
 8003032:	4313      	orrs	r3, r2
 8003034:	6583      	str	r3, [r0, #88]	; 0x58
 8003036:	e7d3      	b.n	8002fe0 <ADC_DMAConvCplt+0x24>
 8003038:	fffffefe 	.word	0xfffffefe

0800303c <HAL_ADC_ConfigChannel>:
{
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	4645      	mov	r5, r8
 8003040:	46de      	mov	lr, fp
 8003042:	4657      	mov	r7, sl
 8003044:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 8003046:	2300      	movs	r3, #0
{
 8003048:	b5e0      	push	{r5, r6, r7, lr}
 800304a:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800304c:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 800304e:	3354      	adds	r3, #84	; 0x54
 8003050:	5cc2      	ldrb	r2, [r0, r3]
{
 8003052:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003054:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8003056:	2a01      	cmp	r2, #1
 8003058:	d100      	bne.n	800305c <HAL_ADC_ConfigChannel+0x20>
 800305a:	e091      	b.n	8003180 <HAL_ADC_ConfigChannel+0x144>
 800305c:	2001      	movs	r0, #1
 800305e:	2204      	movs	r2, #4
 8003060:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	689e      	ldr	r6, [r3, #8]
 8003066:	4232      	tst	r2, r6
 8003068:	d00d      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800306c:	321c      	adds	r2, #28
 800306e:	4313      	orrs	r3, r2
 8003070:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003072:	2354      	movs	r3, #84	; 0x54
 8003074:	2200      	movs	r2, #0
 8003076:	54e2      	strb	r2, [r4, r3]
}
 8003078:	b005      	add	sp, #20
 800307a:	bcf0      	pop	{r4, r5, r6, r7}
 800307c:	46bb      	mov	fp, r7
 800307e:	46b2      	mov	sl, r6
 8003080:	46a9      	mov	r9, r5
 8003082:	46a0      	mov	r8, r4
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8003086:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003088:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 800308a:	2e02      	cmp	r6, #2
 800308c:	d05c      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800308e:	2780      	movs	r7, #128	; 0x80
 8003090:	063f      	lsls	r7, r7, #24
 8003092:	42bd      	cmp	r5, r7
 8003094:	d051      	beq.n	800313a <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003096:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003098:	270f      	movs	r7, #15
 800309a:	46aa      	mov	sl, r5
 800309c:	251f      	movs	r5, #31
 800309e:	46ac      	mov	ip, r5
 80030a0:	4035      	ands	r5, r6
 80030a2:	40af      	lsls	r7, r5
 80030a4:	46a9      	mov	r9, r5
 80030a6:	43fd      	mvns	r5, r7
 80030a8:	9500      	str	r5, [sp, #0]
 80030aa:	4655      	mov	r5, sl
 80030ac:	43bd      	bics	r5, r7
 80030ae:	46a8      	mov	r8, r5
 80030b0:	680d      	ldr	r5, [r1, #0]
 80030b2:	9701      	str	r7, [sp, #4]
 80030b4:	036f      	lsls	r7, r5, #13
 80030b6:	d16c      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x156>
 80030b8:	4660      	mov	r0, ip
 80030ba:	0eaa      	lsrs	r2, r5, #26
 80030bc:	4010      	ands	r0, r2
 80030be:	0002      	movs	r2, r0
 80030c0:	4648      	mov	r0, r9
 80030c2:	4082      	lsls	r2, r0
 80030c4:	4640      	mov	r0, r8
 80030c6:	4310      	orrs	r0, r2
 80030c8:	4680      	mov	r8, r0
 80030ca:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80030cc:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80030ce:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80030d0:	69e2      	ldr	r2, [r4, #28]
 80030d2:	3601      	adds	r6, #1
 80030d4:	4296      	cmp	r6, r2
 80030d6:	d808      	bhi.n	80030ea <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 80030d8:	464e      	mov	r6, r9
 80030da:	00aa      	lsls	r2, r5, #2
 80030dc:	0f12      	lsrs	r2, r2, #28
 80030de:	40b2      	lsls	r2, r6
 80030e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80030e2:	9e00      	ldr	r6, [sp, #0]
 80030e4:	4030      	ands	r0, r6
 80030e6:	4302      	orrs	r2, r0
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 80030ea:	0228      	lsls	r0, r5, #8
 80030ec:	688a      	ldr	r2, [r1, #8]
 80030ee:	0001      	movs	r1, r0
 80030f0:	695e      	ldr	r6, [r3, #20]
 80030f2:	4002      	ands	r2, r0
 80030f4:	4866      	ldr	r0, [pc, #408]	; (8003290 <HAL_ADC_ConfigChannel+0x254>)
 80030f6:	438e      	bics	r6, r1
 80030f8:	4002      	ands	r2, r0
 80030fa:	4332      	orrs	r2, r6
 80030fc:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030fe:	2d00      	cmp	r5, #0
 8003100:	db01      	blt.n	8003106 <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003102:	2000      	movs	r0, #0
}
 8003104:	e7b5      	b.n	8003072 <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003106:	21e0      	movs	r1, #224	; 0xe0
 8003108:	4862      	ldr	r0, [pc, #392]	; (8003294 <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800310a:	4a63      	ldr	r2, [pc, #396]	; (8003298 <HAL_ADC_ConfigChannel+0x25c>)
 800310c:	6803      	ldr	r3, [r0, #0]
 800310e:	0449      	lsls	r1, r1, #17
 8003110:	4019      	ands	r1, r3
 8003112:	4295      	cmp	r5, r2
 8003114:	d051      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003116:	4a61      	ldr	r2, [pc, #388]	; (800329c <HAL_ADC_ConfigChannel+0x260>)
 8003118:	4295      	cmp	r5, r2
 800311a:	d045      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800311c:	4a60      	ldr	r2, [pc, #384]	; (80032a0 <HAL_ADC_ConfigChannel+0x264>)
 800311e:	4295      	cmp	r5, r2
 8003120:	d1ef      	bne.n	8003102 <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003122:	2580      	movs	r5, #128	; 0x80
 8003124:	03ed      	lsls	r5, r5, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003126:	422b      	tst	r3, r5
 8003128:	d1eb      	bne.n	8003102 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800312a:	6802      	ldr	r2, [r0, #0]
 800312c:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <HAL_ADC_ConfigChannel+0x268>)
 800312e:	401a      	ands	r2, r3
 8003130:	430a      	orrs	r2, r1
 8003132:	4315      	orrs	r5, r2
 8003134:	6005      	str	r5, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003136:	2000      	movs	r0, #0
}
 8003138:	e79b      	b.n	8003072 <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800313a:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800313c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800313e:	036a      	lsls	r2, r5, #13
 8003140:	0b52      	lsrs	r2, r2, #13
 8003142:	4302      	orrs	r2, r0
 8003144:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003146:	e7d0      	b.n	80030ea <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	0612      	lsls	r2, r2, #24
 800314c:	4295      	cmp	r5, r2
 800314e:	d019      	beq.n	8003184 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003150:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003152:	2a00      	cmp	r2, #0
 8003154:	dad5      	bge.n	8003102 <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003156:	494f      	ldr	r1, [pc, #316]	; (8003294 <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003158:	484f      	ldr	r0, [pc, #316]	; (8003298 <HAL_ADC_ConfigChannel+0x25c>)
 800315a:	680b      	ldr	r3, [r1, #0]
 800315c:	4282      	cmp	r2, r0
 800315e:	d029      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003160:	484e      	ldr	r0, [pc, #312]	; (800329c <HAL_ADC_ConfigChannel+0x260>)
 8003162:	4282      	cmp	r2, r0
 8003164:	d04c      	beq.n	8003200 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003166:	484e      	ldr	r0, [pc, #312]	; (80032a0 <HAL_ADC_ConfigChannel+0x264>)
 8003168:	4282      	cmp	r2, r0
 800316a:	d1ca      	bne.n	8003102 <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800316c:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800316e:	680a      	ldr	r2, [r1, #0]
 8003170:	0440      	lsls	r0, r0, #17
 8003172:	4003      	ands	r3, r0
 8003174:	484b      	ldr	r0, [pc, #300]	; (80032a4 <HAL_ADC_ConfigChannel+0x268>)
 8003176:	4002      	ands	r2, r0
 8003178:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317a:	2000      	movs	r0, #0
 800317c:	600b      	str	r3, [r1, #0]
 800317e:	e778      	b.n	8003072 <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8003180:	2002      	movs	r0, #2
 8003182:	e779      	b.n	8003078 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003184:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003186:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003188:	0350      	lsls	r0, r2, #13
 800318a:	0b40      	lsrs	r0, r0, #13
 800318c:	4381      	bics	r1, r0
 800318e:	6299      	str	r1, [r3, #40]	; 0x28
}
 8003190:	e7df      	b.n	8003152 <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003192:	4228      	tst	r0, r5
 8003194:	d199      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x8e>
 8003196:	2702      	movs	r7, #2
 8003198:	422f      	tst	r7, r5
 800319a:	d02d      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x1bc>
 800319c:	464a      	mov	r2, r9
 800319e:	4090      	lsls	r0, r2
 80031a0:	4642      	mov	r2, r8
 80031a2:	4302      	orrs	r2, r0
 80031a4:	4690      	mov	r8, r2
 80031a6:	e790      	b.n	80030ca <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031a8:	2580      	movs	r5, #128	; 0x80
 80031aa:	046d      	lsls	r5, r5, #17
 80031ac:	422b      	tst	r3, r5
 80031ae:	d0bc      	beq.n	800312a <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b0:	2000      	movs	r0, #0
 80031b2:	e75e      	b.n	8003072 <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031b4:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031b6:	680a      	ldr	r2, [r1, #0]
 80031b8:	e7da      	b.n	8003170 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031ba:	2580      	movs	r5, #128	; 0x80
 80031bc:	042d      	lsls	r5, r5, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031be:	422b      	tst	r3, r5
 80031c0:	d19f      	bne.n	8003102 <HAL_ADC_ConfigChannel+0xc6>
 80031c2:	6802      	ldr	r2, [r0, #0]
 80031c4:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_ADC_ConfigChannel+0x268>)
 80031c6:	401a      	ands	r2, r3
 80031c8:	430a      	orrs	r2, r1
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ca:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <HAL_ADC_ConfigChannel+0x26c>)
 80031cc:	4315      	orrs	r5, r2
 80031ce:	6005      	str	r5, [r0, #0]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	4936      	ldr	r1, [pc, #216]	; (80032ac <HAL_ADC_ConfigChannel+0x270>)
 80031d4:	f7fc ff94 	bl	8000100 <__udivsi3>
 80031d8:	3001      	adds	r0, #1
 80031da:	0043      	lsls	r3, r0, #1
 80031dc:	181b      	adds	r3, r3, r0
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80031e2:	9b03      	ldr	r3, [sp, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d08c      	beq.n	8003102 <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 80031e8:	9b03      	ldr	r3, [sp, #12]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80031ee:	9b03      	ldr	r3, [sp, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2000      	movs	r0, #0
 80031f6:	e73c      	b.n	8003072 <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80031f8:	422a      	tst	r2, r5
 80031fa:	d005      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x1cc>
 80031fc:	003a      	movs	r2, r7
 80031fe:	e75f      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003200:	20c0      	movs	r0, #192	; 0xc0
 8003202:	680a      	ldr	r2, [r1, #0]
 8003204:	0400      	lsls	r0, r0, #16
 8003206:	e7b4      	b.n	8003172 <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003208:	072a      	lsls	r2, r5, #28
 800320a:	d501      	bpl.n	8003210 <HAL_ADC_ConfigChannel+0x1d4>
 800320c:	2203      	movs	r2, #3
 800320e:	e757      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003210:	06ea      	lsls	r2, r5, #27
 8003212:	d501      	bpl.n	8003218 <HAL_ADC_ConfigChannel+0x1dc>
 8003214:	2204      	movs	r2, #4
 8003216:	e753      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003218:	06aa      	lsls	r2, r5, #26
 800321a:	d501      	bpl.n	8003220 <HAL_ADC_ConfigChannel+0x1e4>
 800321c:	2205      	movs	r2, #5
 800321e:	e74f      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003220:	066a      	lsls	r2, r5, #25
 8003222:	d501      	bpl.n	8003228 <HAL_ADC_ConfigChannel+0x1ec>
 8003224:	2206      	movs	r2, #6
 8003226:	e74b      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003228:	062a      	lsls	r2, r5, #24
 800322a:	d501      	bpl.n	8003230 <HAL_ADC_ConfigChannel+0x1f4>
 800322c:	2207      	movs	r2, #7
 800322e:	e747      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003230:	05ea      	lsls	r2, r5, #23
 8003232:	d501      	bpl.n	8003238 <HAL_ADC_ConfigChannel+0x1fc>
 8003234:	2208      	movs	r2, #8
 8003236:	e743      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003238:	05aa      	lsls	r2, r5, #22
 800323a:	d501      	bpl.n	8003240 <HAL_ADC_ConfigChannel+0x204>
 800323c:	2209      	movs	r2, #9
 800323e:	e73f      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003240:	056a      	lsls	r2, r5, #21
 8003242:	d501      	bpl.n	8003248 <HAL_ADC_ConfigChannel+0x20c>
 8003244:	220a      	movs	r2, #10
 8003246:	e73b      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003248:	052a      	lsls	r2, r5, #20
 800324a:	d501      	bpl.n	8003250 <HAL_ADC_ConfigChannel+0x214>
 800324c:	220b      	movs	r2, #11
 800324e:	e737      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003250:	04ea      	lsls	r2, r5, #19
 8003252:	d501      	bpl.n	8003258 <HAL_ADC_ConfigChannel+0x21c>
 8003254:	220c      	movs	r2, #12
 8003256:	e733      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003258:	04aa      	lsls	r2, r5, #18
 800325a:	d501      	bpl.n	8003260 <HAL_ADC_ConfigChannel+0x224>
 800325c:	220d      	movs	r2, #13
 800325e:	e72f      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003260:	046a      	lsls	r2, r5, #17
 8003262:	d501      	bpl.n	8003268 <HAL_ADC_ConfigChannel+0x22c>
 8003264:	220e      	movs	r2, #14
 8003266:	e72b      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003268:	042a      	lsls	r2, r5, #16
 800326a:	d504      	bpl.n	8003276 <HAL_ADC_ConfigChannel+0x23a>
 800326c:	4652      	mov	r2, sl
 800326e:	9801      	ldr	r0, [sp, #4]
 8003270:	4302      	orrs	r2, r0
 8003272:	4690      	mov	r8, r2
 8003274:	e729      	b.n	80030ca <HAL_ADC_ConfigChannel+0x8e>
 8003276:	03ea      	lsls	r2, r5, #15
 8003278:	d501      	bpl.n	800327e <HAL_ADC_ConfigChannel+0x242>
 800327a:	2210      	movs	r2, #16
 800327c:	e720      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 800327e:	03aa      	lsls	r2, r5, #14
 8003280:	d501      	bpl.n	8003286 <HAL_ADC_ConfigChannel+0x24a>
 8003282:	2211      	movs	r2, #17
 8003284:	e71c      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003286:	036a      	lsls	r2, r5, #13
 8003288:	d400      	bmi.n	800328c <HAL_ADC_ConfigChannel+0x250>
 800328a:	e71e      	b.n	80030ca <HAL_ADC_ConfigChannel+0x8e>
 800328c:	2212      	movs	r2, #18
 800328e:	e717      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x84>
 8003290:	07ffff00 	.word	0x07ffff00
 8003294:	40012708 	.word	0x40012708
 8003298:	b0001000 	.word	0xb0001000
 800329c:	b8004000 	.word	0xb8004000
 80032a0:	b4002000 	.word	0xb4002000
 80032a4:	fe3fffff 	.word	0xfe3fffff
 80032a8:	20000000 	.word	0x20000000
 80032ac:	00030d40 	.word	0x00030d40

080032b0 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 80032b0:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032b2:	2201      	movs	r2, #1
{
 80032b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80032b8:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ba:	6803      	ldr	r3, [r0, #0]
{
 80032bc:	0004      	movs	r4, r0
 80032be:	6899      	ldr	r1, [r3, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c0:	420a      	tst	r2, r1
 80032c2:	d11f      	bne.n	8003304 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80032c4:	6898      	ldr	r0, [r3, #8]
 80032c6:	4928      	ldr	r1, [pc, #160]	; (8003368 <ADC_Enable+0xb8>)
 80032c8:	4208      	tst	r0, r1
 80032ca:	d11e      	bne.n	800330a <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 80032cc:	6899      	ldr	r1, [r3, #8]
 80032ce:	4827      	ldr	r0, [pc, #156]	; (800336c <ADC_Enable+0xbc>)
 80032d0:	4001      	ands	r1, r0
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <ADC_Enable+0xc0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	d50f      	bpl.n	80032fe <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <ADC_Enable+0xc4>)
 80032e0:	4925      	ldr	r1, [pc, #148]	; (8003378 <ADC_Enable+0xc8>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	f7fc ff0c 	bl	8000100 <__udivsi3>
 80032e8:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80032ea:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80032ec:	9b01      	ldr	r3, [sp, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <ADC_Enable+0x4e>
        wait_loop_index--;
 80032f2:	9b01      	ldr	r3, [sp, #4]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80032f8:	9b01      	ldr	r3, [sp, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f9      	bne.n	80032f2 <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032fe:	7e63      	ldrb	r3, [r4, #25]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10b      	bne.n	800331c <ADC_Enable+0x6c>
  return HAL_OK;
 8003304:	2000      	movs	r0, #0
}
 8003306:	b003      	add	sp, #12
 8003308:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330a:	2110      	movs	r1, #16
 800330c:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800330e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	430b      	orrs	r3, r1
 8003312:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003314:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003316:	431a      	orrs	r2, r3
 8003318:	65e2      	str	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800331a:	e7f4      	b.n	8003306 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 800331c:	f7ff fd0e 	bl	8002d3c <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003320:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003322:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	07d2      	lsls	r2, r2, #31
 8003328:	d4ec      	bmi.n	8003304 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800332a:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 800332c:	4f0f      	ldr	r7, [pc, #60]	; (800336c <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800332e:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003330:	4215      	tst	r5, r2
 8003332:	d103      	bne.n	800333c <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	403a      	ands	r2, r7
 8003338:	432a      	orrs	r2, r5
 800333a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800333c:	f7ff fcfe 	bl	8002d3c <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003340:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003342:	1b80      	subs	r0, r0, r6
 8003344:	2802      	cmp	r0, #2
 8003346:	d902      	bls.n	800334e <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4215      	tst	r5, r2
 800334c:	d003      	beq.n	8003356 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4215      	tst	r5, r2
 8003352:	d0ec      	beq.n	800332e <ADC_Enable+0x7e>
 8003354:	e7d6      	b.n	8003304 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	2210      	movs	r2, #16
 8003358:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335c:	4313      	orrs	r3, r2
 800335e:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003360:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003362:	431d      	orrs	r5, r3
 8003364:	65e5      	str	r5, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003366:	e7ce      	b.n	8003306 <ADC_Enable+0x56>
 8003368:	80000017 	.word	0x80000017
 800336c:	7fffffe8 	.word	0x7fffffe8
 8003370:	40012708 	.word	0x40012708
 8003374:	20000000 	.word	0x20000000
 8003378:	00030d40 	.word	0x00030d40

0800337c <HAL_ADC_Start_DMA>:
{
 800337c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337e:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003380:	6805      	ldr	r5, [r0, #0]
{
 8003382:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003384:	68ae      	ldr	r6, [r5, #8]
 8003386:	4688      	mov	r8, r1
 8003388:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 800338a:	2002      	movs	r0, #2
{
 800338c:	b500      	push	{lr}
 800338e:	0773      	lsls	r3, r6, #29
 8003390:	d414      	bmi.n	80033bc <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8003392:	2254      	movs	r2, #84	; 0x54
 8003394:	5ca3      	ldrb	r3, [r4, r2]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d010      	beq.n	80033bc <HAL_ADC_Start_DMA+0x40>
 800339a:	2301      	movs	r3, #1
 800339c:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800339e:	68ea      	ldr	r2, [r5, #12]
 80033a0:	4213      	tst	r3, r2
 80033a2:	d106      	bne.n	80033b2 <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a4:	68aa      	ldr	r2, [r5, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033a6:	4213      	tst	r3, r2
 80033a8:	d131      	bne.n	800340e <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80033aa:	2201      	movs	r2, #1
 80033ac:	68eb      	ldr	r3, [r5, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80033b2:	0020      	movs	r0, r4
 80033b4:	f7ff ff7c 	bl	80032b0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_ADC_Start_DMA+0x46>
}
 80033bc:	bc80      	pop	{r7}
 80033be:	46b8      	mov	r8, r7
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80033c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033c6:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80033c8:	401a      	ands	r2, r3
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4313      	orrs	r3, r2
 80033d0:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 80033d4:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033d6:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033da:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033dc:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e0:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033e2:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e4:	231c      	movs	r3, #28
 80033e6:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 80033e8:	3338      	adds	r3, #56	; 0x38
 80033ea:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033ec:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033ee:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033f4:	4642      	mov	r2, r8
 80033f6:	003b      	movs	r3, r7
 80033f8:	3140      	adds	r1, #64	; 0x40
 80033fa:	f000 f8e9 	bl	80035d0 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80033fe:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003400:	490a      	ldr	r1, [pc, #40]	; (800342c <HAL_ADC_Start_DMA+0xb0>)
 8003402:	6893      	ldr	r3, [r2, #8]
 8003404:	400b      	ands	r3, r1
 8003406:	2104      	movs	r1, #4
 8003408:	430b      	orrs	r3, r1
 800340a:	6093      	str	r3, [r2, #8]
}
 800340c:	e7d6      	b.n	80033bc <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 800340e:	68ab      	ldr	r3, [r5, #8]
 8003410:	4a06      	ldr	r2, [pc, #24]	; (800342c <HAL_ADC_Start_DMA+0xb0>)
 8003412:	4013      	ands	r3, r2
 8003414:	4318      	orrs	r0, r3
 8003416:	60a8      	str	r0, [r5, #8]
}
 8003418:	e7c7      	b.n	80033aa <HAL_ADC_Start_DMA+0x2e>
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	fffff0fe 	.word	0xfffff0fe
 8003420:	08002fbd 	.word	0x08002fbd
 8003424:	08002f91 	.word	0x08002f91
 8003428:	08002fa1 	.word	0x08002fa1
 800342c:	7fffffe8 	.word	0x7fffffe8

08003430 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003432:	2800      	cmp	r0, #0
 8003434:	db14      	blt.n	8003460 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_NVIC_SetPriority+0x5c>)
 8003438:	2203      	movs	r2, #3
 800343a:	469c      	mov	ip, r3
 800343c:	23ff      	movs	r3, #255	; 0xff
 800343e:	0884      	lsrs	r4, r0, #2
 8003440:	4010      	ands	r0, r2
 8003442:	001a      	movs	r2, r3
 8003444:	26c0      	movs	r6, #192	; 0xc0
 8003446:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003448:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800344a:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800344c:	400b      	ands	r3, r1
 800344e:	4083      	lsls	r3, r0
 8003450:	00a4      	lsls	r4, r4, #2
 8003452:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003454:	00b6      	lsls	r6, r6, #2
 8003456:	59a5      	ldr	r5, [r4, r6]
 8003458:	4395      	bics	r5, r2
 800345a:	432b      	orrs	r3, r5
 800345c:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800345e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003460:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <HAL_NVIC_SetPriority+0x60>)
 8003462:	230f      	movs	r3, #15
 8003464:	4694      	mov	ip, r2
 8003466:	2203      	movs	r2, #3
 8003468:	4003      	ands	r3, r0
 800346a:	4010      	ands	r0, r2
 800346c:	32fc      	adds	r2, #252	; 0xfc
 800346e:	0015      	movs	r5, r2
 8003470:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003472:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003474:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003476:	400a      	ands	r2, r1
 8003478:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800347a:	3b08      	subs	r3, #8
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4463      	add	r3, ip
 8003482:	69dc      	ldr	r4, [r3, #28]
 8003484:	43ac      	bics	r4, r5
 8003486:	4322      	orrs	r2, r4
 8003488:	61da      	str	r2, [r3, #28]
 800348a:	e7e8      	b.n	800345e <HAL_NVIC_SetPriority+0x2e>
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003494:	2800      	cmp	r0, #0
 8003496:	db05      	blt.n	80034a4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003498:	231f      	movs	r3, #31
 800349a:	4018      	ands	r0, r3
 800349c:	3b1e      	subs	r3, #30
 800349e:	4083      	lsls	r3, r0
 80034a0:	4a01      	ldr	r2, [pc, #4]	; (80034a8 <HAL_NVIC_EnableIRQ+0x14>)
 80034a2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80034a4:	4770      	bx	lr
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	e000e100 	.word	0xe000e100

080034ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	1e43      	subs	r3, r0, #1
 80034b0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d20e      	bcs.n	80034d6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034bc:	4807      	ldr	r0, [pc, #28]	; (80034dc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034be:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c0:	6a03      	ldr	r3, [r0, #32]
 80034c2:	0609      	lsls	r1, r1, #24
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034cc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034ce:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d2:	3307      	adds	r3, #7
 80034d4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80034d6:	4770      	bx	lr
 80034d8:	e000e010 	.word	0xe000e010
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	46c6      	mov	lr, r8
 80034e4:	0004      	movs	r4, r0
 80034e6:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d062      	beq.n	80035b2 <HAL_DMA_Init+0xd2>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034ec:	6805      	ldr	r5, [r0, #0]
 80034ee:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <HAL_DMA_Init+0xd8>)
 80034f0:	2114      	movs	r1, #20
 80034f2:	18e8      	adds	r0, r5, r3
 80034f4:	f7fc fe04 	bl	8000100 <__udivsi3>
 80034f8:	0083      	lsls	r3, r0, #2
 80034fa:	6423      	str	r3, [r4, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034fc:	2202      	movs	r2, #2
 80034fe:	2325      	movs	r3, #37	; 0x25
 8003500:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003502:	682b      	ldr	r3, [r5, #0]
 8003504:	4a2d      	ldr	r2, [pc, #180]	; (80035bc <HAL_DMA_Init+0xdc>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003506:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003508:	4013      	ands	r3, r2
 800350a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800350c:	68e3      	ldr	r3, [r4, #12]
 800350e:	6921      	ldr	r1, [r4, #16]
 8003510:	4333      	orrs	r3, r6
 8003512:	430b      	orrs	r3, r1
 8003514:	6961      	ldr	r1, [r4, #20]
 8003516:	682a      	ldr	r2, [r5, #0]
 8003518:	430b      	orrs	r3, r1
 800351a:	69a1      	ldr	r1, [r4, #24]
 800351c:	430b      	orrs	r3, r1
 800351e:	69e1      	ldr	r1, [r4, #28]
 8003520:	430b      	orrs	r3, r1
 8003522:	6a21      	ldr	r1, [r4, #32]
 8003524:	430b      	orrs	r3, r1
 8003526:	4313      	orrs	r3, r2
 8003528:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800352c:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800352e:	469c      	mov	ip, r3
 8003530:	4460      	add	r0, ip
 8003532:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003534:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003536:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003538:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800353a:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800353c:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800353e:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003540:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003542:	f7fc fddd 	bl	8000100 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003546:	231f      	movs	r3, #31
 8003548:	2201      	movs	r2, #1
 800354a:	4003      	ands	r3, r0
 800354c:	0010      	movs	r0, r2
 800354e:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003550:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003552:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003554:	01db      	lsls	r3, r3, #7
 8003556:	429e      	cmp	r6, r3
 8003558:	d021      	beq.n	800359e <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800355a:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800355c:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800355e:	6861      	ldr	r1, [r4, #4]
 8003560:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003562:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003564:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003566:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003568:	2903      	cmp	r1, #3
 800356a:	d81d      	bhi.n	80035a8 <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800356c:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800356e:	4916      	ldr	r1, [pc, #88]	; (80035c8 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003570:	4d16      	ldr	r5, [pc, #88]	; (80035cc <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003572:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003574:	3b01      	subs	r3, #1
 8003576:	4003      	ands	r3, r0
 8003578:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800357a:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800357c:	0089      	lsls	r1, r1, #2
 800357e:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003580:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003582:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003584:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003586:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003588:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800358a:	2225      	movs	r2, #37	; 0x25
 800358c:	2101      	movs	r1, #1
  return HAL_OK;
 800358e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003590:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003592:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8003594:	3a01      	subs	r2, #1
 8003596:	54a3      	strb	r3, [r4, r2]
}
 8003598:	bc80      	pop	{r7}
 800359a:	46b8      	mov	r8, r7
 800359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800359e:	2300      	movs	r3, #0
 80035a0:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035a2:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035a4:	4643      	mov	r3, r8
 80035a6:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80035ac:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80035b0:	e7ea      	b.n	8003588 <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 80035b2:	2001      	movs	r0, #1
 80035b4:	e7f0      	b.n	8003598 <HAL_DMA_Init+0xb8>
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	bffdfff8 	.word	0xbffdfff8
 80035bc:	ffff800f 	.word	0xffff800f
 80035c0:	10008200 	.word	0x10008200
 80035c4:	40020880 	.word	0x40020880
 80035c8:	1000823f 	.word	0x1000823f
 80035cc:	40020940 	.word	0x40020940

080035d0 <HAL_DMA_Start_IT>:
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 80035d4:	2424      	movs	r4, #36	; 0x24
{
 80035d6:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 80035d8:	5d05      	ldrb	r5, [r0, r4]
 80035da:	2d01      	cmp	r5, #1
 80035dc:	d04f      	beq.n	800367e <HAL_DMA_Start_IT+0xae>
 80035de:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80035e0:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 80035e2:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 80035e4:	5d85      	ldrb	r5, [r0, r6]
 80035e6:	b2ef      	uxtb	r7, r5
 80035e8:	2d01      	cmp	r5, #1
 80035ea:	d007      	beq.n	80035fc <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80035f0:	2300      	movs	r3, #0
 80035f2:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 80035f4:	2001      	movs	r0, #1
}
 80035f6:	bc80      	pop	{r7}
 80035f8:	46b8      	mov	r8, r7
 80035fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fc:	3c22      	subs	r4, #34	; 0x22
 80035fe:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003600:	2400      	movs	r4, #0
 8003602:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003604:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003606:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8003608:	6825      	ldr	r5, [r4, #0]
 800360a:	43bd      	bics	r5, r7
 800360c:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800360e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8003610:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8003612:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8003614:	2e00      	cmp	r6, #0
 8003616:	d002      	beq.n	800361e <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003618:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800361a:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800361c:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800361e:	271c      	movs	r7, #28
 8003620:	4d1e      	ldr	r5, [pc, #120]	; (800369c <HAL_DMA_Start_IT+0xcc>)
 8003622:	46ac      	mov	ip, r5
 8003624:	686d      	ldr	r5, [r5, #4]
 8003626:	46a8      	mov	r8, r5
 8003628:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800362a:	402f      	ands	r7, r5
 800362c:	2501      	movs	r5, #1
 800362e:	40bd      	lsls	r5, r7
 8003630:	4647      	mov	r7, r8
 8003632:	433d      	orrs	r5, r7
 8003634:	4667      	mov	r7, ip
 8003636:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003638:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363a:	6883      	ldr	r3, [r0, #8]
 800363c:	2b10      	cmp	r3, #16
 800363e:	d020      	beq.n	8003682 <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 8003640:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8003642:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003644:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01e      	beq.n	8003688 <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	220e      	movs	r2, #14
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003652:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	03d2      	lsls	r2, r2, #15
 8003658:	d504      	bpl.n	8003664 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	0052      	lsls	r2, r2, #1
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003664:	2e00      	cmp	r6, #0
 8003666:	d004      	beq.n	8003672 <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	6832      	ldr	r2, [r6, #0]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4313      	orrs	r3, r2
 8003670:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8003672:	2201      	movs	r2, #1
 8003674:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003678:	4313      	orrs	r3, r2
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	e7bb      	b.n	80035f6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800367e:	2002      	movs	r0, #2
 8003680:	e7b9      	b.n	80035f6 <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8003682:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003684:	60e1      	str	r1, [r4, #12]
 8003686:	e7dd      	b.n	8003644 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003688:	2204      	movs	r2, #4
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	4393      	bics	r3, r2
 800368e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	3206      	adds	r2, #6
 8003694:	4313      	orrs	r3, r2
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	e7db      	b.n	8003652 <HAL_DMA_Start_IT+0x82>
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	40020000 	.word	0x40020000

080036a0 <HAL_DMA_Abort>:
{
 80036a0:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d034      	beq.n	8003710 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036a6:	2325      	movs	r3, #37	; 0x25
 80036a8:	5cc3      	ldrb	r3, [r0, r3]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d129      	bne.n	8003702 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	210e      	movs	r1, #14
 80036b0:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036b2:	4c18      	ldr	r4, [pc, #96]	; (8003714 <HAL_DMA_Abort+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b4:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80036b6:	6c06      	ldr	r6, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b8:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036ba:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036bc:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036be:	680b      	ldr	r3, [r1, #0]
 80036c0:	4023      	ands	r3, r4
 80036c2:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80036c4:	2301      	movs	r3, #1
 80036c6:	6811      	ldr	r1, [r2, #0]
 80036c8:	4399      	bics	r1, r3
 80036ca:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80036cc:	221c      	movs	r2, #28
 80036ce:	4032      	ands	r2, r6
 80036d0:	4093      	lsls	r3, r2
 80036d2:	4911      	ldr	r1, [pc, #68]	; (8003718 <HAL_DMA_Abort+0x78>)
 80036d4:	684d      	ldr	r5, [r1, #4]
 80036d6:	432b      	orrs	r3, r5
 80036d8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80036dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80036de:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80036e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4014      	ands	r4, r2
 80036ea:	601c      	str	r4, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ec:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80036ee:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80036f0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80036f2:	2325      	movs	r3, #37	; 0x25
 80036f4:	2201      	movs	r2, #1
 80036f6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80036f8:	2200      	movs	r2, #0
 80036fa:	3b01      	subs	r3, #1
 80036fc:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80036fe:	2000      	movs	r0, #0
}
 8003700:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003702:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8003704:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003706:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003708:	3320      	adds	r3, #32
 800370a:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800370c:	2001      	movs	r0, #1
 800370e:	e7f7      	b.n	8003700 <HAL_DMA_Abort+0x60>
    return HAL_ERROR;
 8003710:	2001      	movs	r0, #1
 8003712:	e7f5      	b.n	8003700 <HAL_DMA_Abort+0x60>
 8003714:	fffffeff 	.word	0xfffffeff
 8003718:	40020000 	.word	0x40020000

0800371c <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800371c:	2325      	movs	r3, #37	; 0x25
{
 800371e:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003720:	5cc3      	ldrb	r3, [r0, r3]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d003      	beq.n	800372e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003726:	2304      	movs	r3, #4
 8003728:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800372a:	2001      	movs	r0, #1
}
 800372c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372e:	210e      	movs	r1, #14
 8003730:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003732:	4c17      	ldr	r4, [pc, #92]	; (8003790 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003734:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003736:	6c06      	ldr	r6, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003738:	438b      	bics	r3, r1
 800373a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800373c:	2301      	movs	r3, #1
 800373e:	6811      	ldr	r1, [r2, #0]
 8003740:	4399      	bics	r1, r3
 8003742:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003744:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003746:	680a      	ldr	r2, [r1, #0]
 8003748:	4022      	ands	r2, r4
 800374a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800374c:	221c      	movs	r2, #28
 800374e:	4032      	ands	r2, r6
 8003750:	4093      	lsls	r3, r2
 8003752:	4910      	ldr	r1, [pc, #64]	; (8003794 <HAL_DMA_Abort_IT+0x78>)
 8003754:	684d      	ldr	r5, [r1, #4]
 8003756:	432b      	orrs	r3, r5
 8003758:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800375a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800375c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800375e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003760:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4022      	ands	r2, r4
 800376a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800376c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800376e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003770:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003772:	2325      	movs	r3, #37	; 0x25
 8003774:	2201      	movs	r2, #1
 8003776:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003778:	2200      	movs	r2, #0
 800377a:	3b01      	subs	r3, #1
 800377c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800377e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003784:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2000      	movs	r0, #0
 8003788:	e7d0      	b.n	800372c <HAL_DMA_Abort_IT+0x10>
 800378a:	2000      	movs	r0, #0
 800378c:	e7ce      	b.n	800372c <HAL_DMA_Abort_IT+0x10>
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fffffeff 	.word	0xfffffeff
 8003794:	40020000 	.word	0x40020000

08003798 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = DMA1->ISR;
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_DMA_IRQHandler+0xb4>)
{
 800379a:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800379c:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800379e:	2504      	movs	r5, #4
 80037a0:	231c      	movs	r3, #28
 80037a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80037a4:	6801      	ldr	r1, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037a6:	4023      	ands	r3, r4
 80037a8:	002c      	movs	r4, r5
 80037aa:	409c      	lsls	r4, r3
  uint32_t source_it = hdma->Instance->CCR;
 80037ac:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037ae:	4222      	tst	r2, r4
 80037b0:	d010      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x3c>
 80037b2:	4235      	tst	r5, r6
 80037b4:	d00e      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037b6:	680b      	ldr	r3, [r1, #0]
 80037b8:	069b      	lsls	r3, r3, #26
 80037ba:	d402      	bmi.n	80037c2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037bc:	680b      	ldr	r3, [r1, #0]
 80037be:	43ab      	bics	r3, r5
 80037c0:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80037c2:	4b22      	ldr	r3, [pc, #136]	; (800384c <HAL_DMA_IRQHandler+0xb4>)
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4314      	orrs	r4, r2
 80037c8:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80037ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d000      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80037d0:	4798      	blx	r3
}
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80037d4:	2502      	movs	r5, #2
 80037d6:	002c      	movs	r4, r5
 80037d8:	409c      	lsls	r4, r3
 80037da:	4222      	tst	r2, r4
 80037dc:	d017      	beq.n	800380e <HAL_DMA_IRQHandler+0x76>
 80037de:	4235      	tst	r5, r6
 80037e0:	d015      	beq.n	800380e <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e2:	680b      	ldr	r3, [r1, #0]
 80037e4:	069b      	lsls	r3, r3, #26
 80037e6:	d406      	bmi.n	80037f6 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037e8:	220a      	movs	r2, #10
 80037ea:	680b      	ldr	r3, [r1, #0]
 80037ec:	4393      	bics	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80037f0:	2325      	movs	r3, #37	; 0x25
 80037f2:	3a09      	subs	r2, #9
 80037f4:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_DMA_IRQHandler+0xb4>)
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	4314      	orrs	r4, r2
 80037fc:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 80037fe:	2200      	movs	r2, #0
 8003800:	2324      	movs	r3, #36	; 0x24
 8003802:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8003804:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0e3      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800380a:	4798      	blx	r3
  return;
 800380c:	e7e1      	b.n	80037d2 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800380e:	2408      	movs	r4, #8
 8003810:	0025      	movs	r5, r4
 8003812:	409d      	lsls	r5, r3
 8003814:	422a      	tst	r2, r5
 8003816:	d0dc      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x3a>
 8003818:	4234      	tst	r4, r6
 800381a:	d0da      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800381c:	680a      	ldr	r2, [r1, #0]
 800381e:	3406      	adds	r4, #6
 8003820:	43a2      	bics	r2, r4
 8003822:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003824:	2201      	movs	r2, #1
 8003826:	0015      	movs	r5, r2
 8003828:	409d      	lsls	r5, r3
 800382a:	002b      	movs	r3, r5
 800382c:	4907      	ldr	r1, [pc, #28]	; (800384c <HAL_DMA_IRQHandler+0xb4>)
 800382e:	684c      	ldr	r4, [r1, #4]
 8003830:	4323      	orrs	r3, r4
 8003832:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003834:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003836:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003838:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800383a:	2200      	movs	r2, #0
 800383c:	3b01      	subs	r3, #1
 800383e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003840:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0c5      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8003846:	4798      	blx	r3
  return;
 8003848:	e7c3      	b.n	80037d2 <HAL_DMA_IRQHandler+0x3a>
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	40020000 	.word	0x40020000

08003850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	46de      	mov	lr, fp
 8003854:	4657      	mov	r7, sl
 8003856:	464e      	mov	r6, r9
 8003858:	4645      	mov	r5, r8
 800385a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800385c:	680c      	ldr	r4, [r1, #0]
{
 800385e:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003860:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003862:	2300      	movs	r3, #0
{
 8003864:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003866:	2c00      	cmp	r4, #0
 8003868:	d100      	bne.n	800386c <HAL_GPIO_Init+0x1c>
 800386a:	e080      	b.n	800396e <HAL_GPIO_Init+0x11e>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800386c:	497b      	ldr	r1, [pc, #492]	; (8003a5c <HAL_GPIO_Init+0x20c>)
 800386e:	468b      	mov	fp, r1
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003870:	4661      	mov	r1, ip
 8003872:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003874:	2601      	movs	r6, #1
 8003876:	0021      	movs	r1, r4
 8003878:	409e      	lsls	r6, r3
 800387a:	4031      	ands	r1, r6
 800387c:	468a      	mov	sl, r1
    if (iocurrent != 0x00u)
 800387e:	4234      	tst	r4, r6
 8003880:	d06f      	beq.n	8003962 <HAL_GPIO_Init+0x112>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003882:	9d01      	ldr	r5, [sp, #4]
 8003884:	6869      	ldr	r1, [r5, #4]
 8003886:	2503      	movs	r5, #3
 8003888:	400d      	ands	r5, r1
 800388a:	46ac      	mov	ip, r5
 800388c:	3d01      	subs	r5, #1
 800388e:	2d01      	cmp	r5, #1
 8003890:	d800      	bhi.n	8003894 <HAL_GPIO_Init+0x44>
 8003892:	e073      	b.n	800397c <HAL_GPIO_Init+0x12c>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003894:	4665      	mov	r5, ip
 8003896:	2d03      	cmp	r5, #3
 8003898:	d000      	beq.n	800389c <HAL_GPIO_Init+0x4c>
 800389a:	e0b7      	b.n	8003a0c <HAL_GPIO_Init+0x1bc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800389c:	4666      	mov	r6, ip
 800389e:	4096      	lsls	r6, r2
 80038a0:	43f5      	mvns	r5, r6
 80038a2:	9500      	str	r5, [sp, #0]
      temp = GPIOx->MODER;
 80038a4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038a6:	9d00      	ldr	r5, [sp, #0]
 80038a8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038aa:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80038ac:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ae:	25c0      	movs	r5, #192	; 0xc0
 80038b0:	02ad      	lsls	r5, r5, #10
 80038b2:	4229      	tst	r1, r5
 80038b4:	d055      	beq.n	8003962 <HAL_GPIO_Init+0x112>
        temp = EXTI->EXTICR[position >> 2u];
 80038b6:	4e69      	ldr	r6, [pc, #420]	; (8003a5c <HAL_GPIO_Init+0x20c>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80038b8:	2703      	movs	r7, #3
 80038ba:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 80038bc:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80038be:	401f      	ands	r7, r3
 80038c0:	00ff      	lsls	r7, r7, #3
 80038c2:	00ad      	lsls	r5, r5, #2
 80038c4:	4465      	add	r5, ip
 80038c6:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 80038c8:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80038ca:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 80038cc:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80038ce:	4666      	mov	r6, ip
 80038d0:	40b7      	lsls	r7, r6
 80038d2:	003e      	movs	r6, r7
 80038d4:	464f      	mov	r7, r9
 80038d6:	43b7      	bics	r7, r6
 80038d8:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80038da:	27a0      	movs	r7, #160	; 0xa0
 80038dc:	05ff      	lsls	r7, r7, #23
 80038de:	42b8      	cmp	r0, r7
 80038e0:	d012      	beq.n	8003908 <HAL_GPIO_Init+0xb8>
 80038e2:	4f5f      	ldr	r7, [pc, #380]	; (8003a60 <HAL_GPIO_Init+0x210>)
 80038e4:	42b8      	cmp	r0, r7
 80038e6:	d100      	bne.n	80038ea <HAL_GPIO_Init+0x9a>
 80038e8:	e0a8      	b.n	8003a3c <HAL_GPIO_Init+0x1ec>
 80038ea:	4f5e      	ldr	r7, [pc, #376]	; (8003a64 <HAL_GPIO_Init+0x214>)
 80038ec:	42b8      	cmp	r0, r7
 80038ee:	d100      	bne.n	80038f2 <HAL_GPIO_Init+0xa2>
 80038f0:	e0ac      	b.n	8003a4c <HAL_GPIO_Init+0x1fc>
 80038f2:	4f5d      	ldr	r7, [pc, #372]	; (8003a68 <HAL_GPIO_Init+0x218>)
 80038f4:	42b8      	cmp	r0, r7
 80038f6:	d100      	bne.n	80038fa <HAL_GPIO_Init+0xaa>
 80038f8:	e099      	b.n	8003a2e <HAL_GPIO_Init+0x1de>
 80038fa:	4666      	mov	r6, ip
 80038fc:	2705      	movs	r7, #5
 80038fe:	40b7      	lsls	r7, r6
 8003900:	003e      	movs	r6, r7
 8003902:	464f      	mov	r7, r9
 8003904:	4337      	orrs	r7, r6
 8003906:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8003908:	464e      	mov	r6, r9
 800390a:	662e      	str	r6, [r5, #96]	; 0x60
        temp &= ~(iocurrent);
 800390c:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800390e:	2780      	movs	r7, #128	; 0x80
        temp = EXTI->RTSR1;
 8003910:	465d      	mov	r5, fp
        temp &= ~(iocurrent);
 8003912:	43f6      	mvns	r6, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003914:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8003916:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 8003918:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800391a:	4239      	tst	r1, r7
 800391c:	d000      	beq.n	8003920 <HAL_GPIO_Init+0xd0>
 800391e:	e083      	b.n	8003a28 <HAL_GPIO_Init+0x1d8>
        temp &= ~(iocurrent);
 8003920:	4035      	ands	r5, r6
        EXTI->RTSR1 = temp;
 8003922:	465f      	mov	r7, fp
 8003924:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 8003926:	687d      	ldr	r5, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003928:	2780      	movs	r7, #128	; 0x80
 800392a:	03bf      	lsls	r7, r7, #14
 800392c:	4239      	tst	r1, r7
 800392e:	d000      	beq.n	8003932 <HAL_GPIO_Init+0xe2>
 8003930:	e077      	b.n	8003a22 <HAL_GPIO_Init+0x1d2>
        temp &= ~(iocurrent);
 8003932:	4646      	mov	r6, r8
 8003934:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003936:	465f      	mov	r7, fp
 8003938:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800393a:	2584      	movs	r5, #132	; 0x84
 800393c:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800393e:	038e      	lsls	r6, r1, #14
 8003940:	d46c      	bmi.n	8003a1c <HAL_GPIO_Init+0x1cc>
        temp &= ~(iocurrent);
 8003942:	4646      	mov	r6, r8
 8003944:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8003946:	2784      	movs	r7, #132	; 0x84
 8003948:	46bc      	mov	ip, r7
 800394a:	465f      	mov	r7, fp
 800394c:	4666      	mov	r6, ip
 800394e:	51bd      	str	r5, [r7, r6]

        temp = EXTI->IMR1;
 8003950:	2580      	movs	r5, #128	; 0x80
 8003952:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003954:	03c9      	lsls	r1, r1, #15
 8003956:	d45e      	bmi.n	8003a16 <HAL_GPIO_Init+0x1c6>
        temp &= ~(iocurrent);
 8003958:	4646      	mov	r6, r8
 800395a:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800395c:	2580      	movs	r5, #128	; 0x80
 800395e:	4659      	mov	r1, fp
 8003960:	514e      	str	r6, [r1, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003962:	0021      	movs	r1, r4
      }
    }

    position++;
 8003964:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003966:	40d9      	lsrs	r1, r3
 8003968:	3202      	adds	r2, #2
 800396a:	2900      	cmp	r1, #0
 800396c:	d182      	bne.n	8003874 <HAL_GPIO_Init+0x24>
  }
}
 800396e:	b003      	add	sp, #12
 8003970:	bcf0      	pop	{r4, r5, r6, r7}
 8003972:	46bb      	mov	fp, r7
 8003974:	46b2      	mov	sl, r6
 8003976:	46a9      	mov	r9, r5
 8003978:	46a0      	mov	r8, r4
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 800397c:	6885      	ldr	r5, [r0, #8]
 800397e:	46a8      	mov	r8, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003980:	2503      	movs	r5, #3
 8003982:	4095      	lsls	r5, r2
 8003984:	43ef      	mvns	r7, r5
 8003986:	9700      	str	r7, [sp, #0]
 8003988:	4647      	mov	r7, r8
 800398a:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800398c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800398e:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003990:	68ef      	ldr	r7, [r5, #12]
 8003992:	4097      	lsls	r7, r2
 8003994:	46b8      	mov	r8, r7
 8003996:	464f      	mov	r7, r9
 8003998:	4645      	mov	r5, r8
 800399a:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800399c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800399e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a0:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a2:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a4:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a6:	090e      	lsrs	r6, r1, #4
 80039a8:	402e      	ands	r6, r5
 80039aa:	409e      	lsls	r6, r3
 80039ac:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80039ae:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80039b0:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039b2:	9d00      	ldr	r5, [sp, #0]
 80039b4:	402e      	ands	r6, r5
 80039b6:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039b8:	9d01      	ldr	r5, [sp, #4]
 80039ba:	4647      	mov	r7, r8
 80039bc:	68ae      	ldr	r6, [r5, #8]
 80039be:	4096      	lsls	r6, r2
 80039c0:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80039c2:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c4:	4667      	mov	r7, ip
 80039c6:	4666      	mov	r6, ip
 80039c8:	4096      	lsls	r6, r2
 80039ca:	2f02      	cmp	r7, #2
 80039cc:	d000      	beq.n	80039d0 <HAL_GPIO_Init+0x180>
 80039ce:	e769      	b.n	80038a4 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3u];
 80039d0:	08dd      	lsrs	r5, r3, #3
 80039d2:	00ad      	lsls	r5, r5, #2
 80039d4:	46ac      	mov	ip, r5
 80039d6:	4484      	add	ip, r0
 80039d8:	4665      	mov	r5, ip
 80039da:	6a2d      	ldr	r5, [r5, #32]
 80039dc:	46a9      	mov	r9, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039de:	2507      	movs	r5, #7
 80039e0:	002f      	movs	r7, r5
 80039e2:	401f      	ands	r7, r3
 80039e4:	00bd      	lsls	r5, r7, #2
 80039e6:	270f      	movs	r7, #15
 80039e8:	46a8      	mov	r8, r5
 80039ea:	40af      	lsls	r7, r5
 80039ec:	464d      	mov	r5, r9
 80039ee:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039f0:	4647      	mov	r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039f2:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039f4:	9d01      	ldr	r5, [sp, #4]
 80039f6:	692d      	ldr	r5, [r5, #16]
 80039f8:	40bd      	lsls	r5, r7
 80039fa:	46a8      	mov	r8, r5
 80039fc:	464d      	mov	r5, r9
 80039fe:	4647      	mov	r7, r8
 8003a00:	433d      	orrs	r5, r7
 8003a02:	46a9      	mov	r9, r5
        GPIOx->AFR[position >> 3u] = temp;
 8003a04:	4665      	mov	r5, ip
 8003a06:	464f      	mov	r7, r9
 8003a08:	622f      	str	r7, [r5, #32]
 8003a0a:	e74b      	b.n	80038a4 <HAL_GPIO_Init+0x54>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a0c:	2503      	movs	r5, #3
 8003a0e:	4095      	lsls	r5, r2
 8003a10:	43ed      	mvns	r5, r5
 8003a12:	9500      	str	r5, [sp, #0]
 8003a14:	e7cc      	b.n	80039b0 <HAL_GPIO_Init+0x160>
          temp |= iocurrent;
 8003a16:	4656      	mov	r6, sl
 8003a18:	432e      	orrs	r6, r5
 8003a1a:	e79f      	b.n	800395c <HAL_GPIO_Init+0x10c>
          temp |= iocurrent;
 8003a1c:	4656      	mov	r6, sl
 8003a1e:	4335      	orrs	r5, r6
 8003a20:	e791      	b.n	8003946 <HAL_GPIO_Init+0xf6>
          temp |= iocurrent;
 8003a22:	4656      	mov	r6, sl
 8003a24:	4335      	orrs	r5, r6
 8003a26:	e786      	b.n	8003936 <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 8003a28:	4656      	mov	r6, sl
 8003a2a:	4335      	orrs	r5, r6
 8003a2c:	e779      	b.n	8003922 <HAL_GPIO_Init+0xd2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a2e:	4667      	mov	r7, ip
 8003a30:	2603      	movs	r6, #3
 8003a32:	40be      	lsls	r6, r7
 8003a34:	464f      	mov	r7, r9
 8003a36:	4337      	orrs	r7, r6
 8003a38:	46b9      	mov	r9, r7
 8003a3a:	e765      	b.n	8003908 <HAL_GPIO_Init+0xb8>
 8003a3c:	4666      	mov	r6, ip
 8003a3e:	2701      	movs	r7, #1
 8003a40:	40b7      	lsls	r7, r6
 8003a42:	003e      	movs	r6, r7
 8003a44:	464f      	mov	r7, r9
 8003a46:	4337      	orrs	r7, r6
 8003a48:	46b9      	mov	r9, r7
 8003a4a:	e75d      	b.n	8003908 <HAL_GPIO_Init+0xb8>
 8003a4c:	4667      	mov	r7, ip
 8003a4e:	2602      	movs	r6, #2
 8003a50:	40be      	lsls	r6, r7
 8003a52:	464f      	mov	r7, r9
 8003a54:	4337      	orrs	r7, r6
 8003a56:	46b9      	mov	r9, r7
 8003a58:	e756      	b.n	8003908 <HAL_GPIO_Init+0xb8>
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	40021800 	.word	0x40021800
 8003a60:	50000400 	.word	0x50000400
 8003a64:	50000800 	.word	0x50000800
 8003a68:	50000c00 	.word	0x50000c00

08003a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a6c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a6e:	4c13      	ldr	r4, [pc, #76]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8003a70:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8003a72:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003a74:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a76:	4013      	ands	r3, r2
 8003a78:	4303      	orrs	r3, r0
 8003a7a:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4298      	cmp	r0, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8003a84:	0028      	movs	r0, r5
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8003a8a:	490f      	ldr	r1, [pc, #60]	; (8003ac8 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	0058      	lsls	r0, r3, #1
 8003a90:	18c0      	adds	r0, r0, r3
 8003a92:	0040      	lsls	r0, r0, #1
 8003a94:	f7fc fb34 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	6963      	ldr	r3, [r4, #20]
 8003a9c:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a9e:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa0:	4213      	tst	r3, r2
 8003aa2:	d102      	bne.n	8003aaa <HAL_PWREx_ControlVoltageScaling+0x3e>
 8003aa4:	e7ee      	b.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aaa:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8003aac:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aae:	4213      	tst	r3, r2
 8003ab0:	d1f9      	bne.n	8003aa6 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	e7e6      	b.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8003ab6:	2503      	movs	r5, #3
 8003ab8:	e7e4      	b.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x18>
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	fffff9ff 	.word	0xfffff9ff
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	000f4240 	.word	0x000f4240

08003acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ace:	46ce      	mov	lr, r9
 8003ad0:	4647      	mov	r7, r8
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	0004      	movs	r4, r0
 8003ad6:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d100      	bne.n	8003ade <HAL_RCC_OscConfig+0x12>
 8003adc:	e0f5      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ade:	6803      	ldr	r3, [r0, #0]
 8003ae0:	07da      	lsls	r2, r3, #31
 8003ae2:	d531      	bpl.n	8003b48 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae4:	2238      	movs	r2, #56	; 0x38
 8003ae6:	49c8      	ldr	r1, [pc, #800]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003ae8:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aea:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aec:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003aee:	2a10      	cmp	r2, #16
 8003af0:	d100      	bne.n	8003af4 <HAL_RCC_OscConfig+0x28>
 8003af2:	e0f0      	b.n	8003cd6 <HAL_RCC_OscConfig+0x20a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003af4:	2a08      	cmp	r2, #8
 8003af6:	d100      	bne.n	8003afa <HAL_RCC_OscConfig+0x2e>
 8003af8:	e0f1      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	0252      	lsls	r2, r2, #9
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d100      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3a>
 8003b04:	e0fe      	b.n	8003d04 <HAL_RCC_OscConfig+0x238>
 8003b06:	21a0      	movs	r1, #160	; 0xa0
 8003b08:	02c9      	lsls	r1, r1, #11
 8003b0a:	428b      	cmp	r3, r1
 8003b0c:	d100      	bne.n	8003b10 <HAL_RCC_OscConfig+0x44>
 8003b0e:	e1d2      	b.n	8003eb6 <HAL_RCC_OscConfig+0x3ea>
 8003b10:	4dbd      	ldr	r5, [pc, #756]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003b12:	49be      	ldr	r1, [pc, #760]	; (8003e0c <HAL_RCC_OscConfig+0x340>)
 8003b14:	682a      	ldr	r2, [r5, #0]
 8003b16:	400a      	ands	r2, r1
 8003b18:	602a      	str	r2, [r5, #0]
 8003b1a:	682a      	ldr	r2, [r5, #0]
 8003b1c:	49bc      	ldr	r1, [pc, #752]	; (8003e10 <HAL_RCC_OscConfig+0x344>)
 8003b1e:	400a      	ands	r2, r1
 8003b20:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d000      	beq.n	8003b28 <HAL_RCC_OscConfig+0x5c>
 8003b26:	e0f1      	b.n	8003d0c <HAL_RCC_OscConfig+0x240>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7ff f908 	bl	8002d3c <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003b2e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b30:	02bf      	lsls	r7, r7, #10
 8003b32:	e005      	b.n	8003b40 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7ff f902 	bl	8002d3c <HAL_GetTick>
 8003b38:	1b80      	subs	r0, r0, r6
 8003b3a:	2864      	cmp	r0, #100	; 0x64
 8003b3c:	d900      	bls.n	8003b40 <HAL_RCC_OscConfig+0x74>
 8003b3e:	e139      	b.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	423b      	tst	r3, r7
 8003b44:	d1f6      	bne.n	8003b34 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	079a      	lsls	r2, r3, #30
 8003b4a:	d52c      	bpl.n	8003ba6 <HAL_RCC_OscConfig+0xda>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4c:	2338      	movs	r3, #56	; 0x38
 8003b4e:	4aae      	ldr	r2, [pc, #696]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003b50:	6891      	ldr	r1, [r2, #8]
 8003b52:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b54:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d100      	bne.n	8003b5c <HAL_RCC_OscConfig+0x90>
 8003b5a:	e0e8      	b.n	8003d2e <HAL_RCC_OscConfig+0x262>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d000      	beq.n	8003b62 <HAL_RCC_OscConfig+0x96>
 8003b60:	e0ea      	b.n	8003d38 <HAL_RCC_OscConfig+0x26c>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	055b      	lsls	r3, r3, #21
 8003b66:	d500      	bpl.n	8003b6a <HAL_RCC_OscConfig+0x9e>
 8003b68:	e0ab      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1f6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	6851      	ldr	r1, [r2, #4]
 8003b6c:	6963      	ldr	r3, [r4, #20]
 8003b6e:	48a9      	ldr	r0, [pc, #676]	; (8003e14 <HAL_RCC_OscConfig+0x348>)
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	4001      	ands	r1, r0
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b78:	4aa3      	ldr	r2, [pc, #652]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003b7a:	49a7      	ldr	r1, [pc, #668]	; (8003e18 <HAL_RCC_OscConfig+0x34c>)
 8003b7c:	6813      	ldr	r3, [r2, #0]
 8003b7e:	400b      	ands	r3, r1
 8003b80:	6921      	ldr	r1, [r4, #16]
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b86:	6813      	ldr	r3, [r2, #0]
 8003b88:	4aa4      	ldr	r2, [pc, #656]	; (8003e1c <HAL_RCC_OscConfig+0x350>)
 8003b8a:	049b      	lsls	r3, r3, #18
 8003b8c:	0f5b      	lsrs	r3, r3, #29
 8003b8e:	40da      	lsrs	r2, r3
 8003b90:	0013      	movs	r3, r2
 8003b92:	4aa3      	ldr	r2, [pc, #652]	; (8003e20 <HAL_RCC_OscConfig+0x354>)
 8003b94:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b96:	4ba3      	ldr	r3, [pc, #652]	; (8003e24 <HAL_RCC_OscConfig+0x358>)
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	f7ff f889 	bl	8002cb0 <HAL_InitTick>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d000      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003ba2:	e092      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	071a      	lsls	r2, r3, #28
 8003ba8:	d46d      	bmi.n	8003c86 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003baa:	075b      	lsls	r3, r3, #29
 8003bac:	d545      	bpl.n	8003c3a <HAL_RCC_OscConfig+0x16e>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003bae:	2338      	movs	r3, #56	; 0x38
 8003bb0:	4a95      	ldr	r2, [pc, #596]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003bb2:	6891      	ldr	r1, [r2, #8]
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d100      	bne.n	8003bbc <HAL_RCC_OscConfig+0xf0>
 8003bba:	e0e3      	b.n	8003d84 <HAL_RCC_OscConfig+0x2b8>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bbc:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003bbe:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003bc2:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003bc4:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc6:	4219      	tst	r1, r3
 8003bc8:	d108      	bne.n	8003bdc <HAL_RCC_OscConfig+0x110>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003bcc:	4319      	orrs	r1, r3
 8003bce:	63d1      	str	r1, [r2, #60]	; 0x3c
 8003bd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bdc:	2780      	movs	r7, #128	; 0x80
 8003bde:	4e92      	ldr	r6, [pc, #584]	; (8003e28 <HAL_RCC_OscConfig+0x35c>)
 8003be0:	007f      	lsls	r7, r7, #1
 8003be2:	6833      	ldr	r3, [r6, #0]
 8003be4:	423b      	tst	r3, r7
 8003be6:	d100      	bne.n	8003bea <HAL_RCC_OscConfig+0x11e>
 8003be8:	e0d5      	b.n	8003d96 <HAL_RCC_OscConfig+0x2ca>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bea:	68a3      	ldr	r3, [r4, #8]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d100      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x126>
 8003bf0:	e124      	b.n	8003e3c <HAL_RCC_OscConfig+0x370>
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	d100      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x12c>
 8003bf6:	e1bb      	b.n	8003f70 <HAL_RCC_OscConfig+0x4a4>
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	4e83      	ldr	r6, [pc, #524]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003bfc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8003bfe:	438a      	bics	r2, r1
 8003c00:	65f2      	str	r2, [r6, #92]	; 0x5c
 8003c02:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8003c04:	3103      	adds	r1, #3
 8003c06:	438a      	bics	r2, r1
 8003c08:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d000      	beq.n	8003c10 <HAL_RCC_OscConfig+0x144>
 8003c0e:	e119      	b.n	8003e44 <HAL_RCC_OscConfig+0x378>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7ff f894 	bl	8002d3c <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c14:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8003c16:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c18:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	4d84      	ldr	r5, [pc, #528]	; (8003e2c <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c1c:	e005      	b.n	8003c2a <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7ff f88d 	bl	8002d3c <HAL_GetTick>
 8003c22:	1bc0      	subs	r0, r0, r7
 8003c24:	42a8      	cmp	r0, r5
 8003c26:	d900      	bls.n	8003c2a <HAL_RCC_OscConfig+0x15e>
 8003c28:	e0c4      	b.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c2a:	4642      	mov	r2, r8
 8003c2c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8003c2e:	421a      	tst	r2, r3
 8003c30:	d1f5      	bne.n	8003c1e <HAL_RCC_OscConfig+0x152>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c32:	464b      	mov	r3, r9
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d100      	bne.n	8003c3a <HAL_RCC_OscConfig+0x16e>
 8003c38:	e156      	b.n	8003ee8 <HAL_RCC_OscConfig+0x41c>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c3a:	69e3      	ldr	r3, [r4, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c40:	2238      	movs	r2, #56	; 0x38
 8003c42:	4d71      	ldr	r5, [pc, #452]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003c44:	68a9      	ldr	r1, [r5, #8]
 8003c46:	400a      	ands	r2, r1
 8003c48:	2a10      	cmp	r2, #16
 8003c4a:	d100      	bne.n	8003c4e <HAL_RCC_OscConfig+0x182>
 8003c4c:	e10c      	b.n	8003e68 <HAL_RCC_OscConfig+0x39c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d100      	bne.n	8003c54 <HAL_RCC_OscConfig+0x188>
 8003c52:	e14f      	b.n	8003ef4 <HAL_RCC_OscConfig+0x428>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	4a76      	ldr	r2, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x364>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c58:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c5e:	f7ff f86d 	bl	8002d3c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c62:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003c64:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c66:	e005      	b.n	8003c74 <HAL_RCC_OscConfig+0x1a8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7ff f868 	bl	8002d3c <HAL_GetTick>
 8003c6c:	1b00      	subs	r0, r0, r4
 8003c6e:	2802      	cmp	r0, #2
 8003c70:	d900      	bls.n	8003c74 <HAL_RCC_OscConfig+0x1a8>
 8003c72:	e09f      	b.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	4233      	tst	r3, r6
 8003c78:	d1f6      	bne.n	8003c68 <HAL_RCC_OscConfig+0x19c>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003c7a:	68eb      	ldr	r3, [r5, #12]
 8003c7c:	4a6d      	ldr	r2, [pc, #436]	; (8003e34 <HAL_RCC_OscConfig+0x368>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	60eb      	str	r3, [r5, #12]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003c82:	2000      	movs	r0, #0
 8003c84:	e022      	b.n	8003ccc <HAL_RCC_OscConfig+0x200>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c86:	2238      	movs	r2, #56	; 0x38
 8003c88:	4d5f      	ldr	r5, [pc, #380]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003c8a:	68a9      	ldr	r1, [r5, #8]
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	2a18      	cmp	r2, #24
 8003c90:	d02f      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x226>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c92:	69a3      	ldr	r3, [r4, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d100      	bne.n	8003c9a <HAL_RCC_OscConfig+0x1ce>
 8003c98:	e08e      	b.n	8003db8 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_LSI_ENABLE();
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003ca4:	f7ff f84a 	bl	8002d3c <HAL_GetTick>
 8003ca8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003caa:	e005      	b.n	8003cb8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cac:	f7ff f846 	bl	8002d3c <HAL_GetTick>
 8003cb0:	1b80      	subs	r0, r0, r6
 8003cb2:	2802      	cmp	r0, #2
 8003cb4:	d900      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x1ec>
 8003cb6:	e07d      	b.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003cba:	421f      	tst	r7, r3
 8003cbc:	d0f6      	beq.n	8003cac <HAL_RCC_OscConfig+0x1e0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	e773      	b.n	8003baa <HAL_RCC_OscConfig+0xde>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc2:	68e3      	ldr	r3, [r4, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d000      	beq.n	8003cca <HAL_RCC_OscConfig+0x1fe>
 8003cc8:	e74f      	b.n	8003b6a <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 8003cca:	2001      	movs	r0, #1
}
 8003ccc:	b003      	add	sp, #12
 8003cce:	bcc0      	pop	{r6, r7}
 8003cd0:	46b9      	mov	r9, r7
 8003cd2:	46b0      	mov	r8, r6
 8003cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd6:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003cd8:	078a      	lsls	r2, r1, #30
 8003cda:	d000      	beq.n	8003cde <HAL_RCC_OscConfig+0x212>
 8003cdc:	e70d      	b.n	8003afa <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cde:	4a4a      	ldr	r2, [pc, #296]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	0392      	lsls	r2, r2, #14
 8003ce4:	d400      	bmi.n	8003ce8 <HAL_RCC_OscConfig+0x21c>
 8003ce6:	e72f      	b.n	8003b48 <HAL_RCC_OscConfig+0x7c>
 8003ce8:	6862      	ldr	r2, [r4, #4]
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d000      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x224>
 8003cee:	e72b      	b.n	8003b48 <HAL_RCC_OscConfig+0x7c>
 8003cf0:	e7eb      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003cf2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003cf4:	0792      	lsls	r2, r2, #30
 8003cf6:	d400      	bmi.n	8003cfa <HAL_RCC_OscConfig+0x22e>
 8003cf8:	e757      	b.n	8003baa <HAL_RCC_OscConfig+0xde>
 8003cfa:	69a2      	ldr	r2, [r4, #24]
 8003cfc:	2a00      	cmp	r2, #0
 8003cfe:	d000      	beq.n	8003d02 <HAL_RCC_OscConfig+0x236>
 8003d00:	e753      	b.n	8003baa <HAL_RCC_OscConfig+0xde>
 8003d02:	e7e2      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d04:	4a40      	ldr	r2, [pc, #256]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003d06:	6811      	ldr	r1, [r2, #0]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003d0c:	f7ff f816 	bl	8002d3c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d10:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003d12:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d14:	4f3c      	ldr	r7, [pc, #240]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
 8003d16:	02b6      	lsls	r6, r6, #10
 8003d18:	e004      	b.n	8003d24 <HAL_RCC_OscConfig+0x258>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d1a:	f7ff f80f 	bl	8002d3c <HAL_GetTick>
 8003d1e:	1b40      	subs	r0, r0, r5
 8003d20:	2864      	cmp	r0, #100	; 0x64
 8003d22:	d847      	bhi.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4233      	tst	r3, r6
 8003d28:	d0f7      	beq.n	8003d1a <HAL_RCC_OscConfig+0x24e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	e70c      	b.n	8003b48 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2e:	3b0d      	subs	r3, #13
 8003d30:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d100      	bne.n	8003d38 <HAL_RCC_OscConfig+0x26c>
 8003d36:	e0c8      	b.n	8003eca <HAL_RCC_OscConfig+0x3fe>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d38:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d3a:	4d33      	ldr	r5, [pc, #204]	; (8003e08 <HAL_RCC_OscConfig+0x33c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d04e      	beq.n	8003dde <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <HAL_RCC_OscConfig+0x34c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d44:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d46:	4013      	ands	r3, r2
 8003d48:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d4a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	682a      	ldr	r2, [r5, #0]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d5a:	f7fe ffef 	bl	8002d3c <HAL_GetTick>
 8003d5e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d60:	e004      	b.n	8003d6c <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fe ffeb 	bl	8002d3c <HAL_GetTick>
 8003d66:	1b80      	subs	r0, r0, r6
 8003d68:	2802      	cmp	r0, #2
 8003d6a:	d823      	bhi.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	423b      	tst	r3, r7
 8003d70:	d0f7      	beq.n	8003d62 <HAL_RCC_OscConfig+0x296>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d72:	686a      	ldr	r2, [r5, #4]
 8003d74:	6963      	ldr	r3, [r4, #20]
 8003d76:	4927      	ldr	r1, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x348>)
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	e710      	b.n	8003ba6 <HAL_RCC_OscConfig+0xda>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d84:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003d86:	079b      	lsls	r3, r3, #30
 8003d88:	d400      	bmi.n	8003d8c <HAL_RCC_OscConfig+0x2c0>
 8003d8a:	e756      	b.n	8003c3a <HAL_RCC_OscConfig+0x16e>
 8003d8c:	68a3      	ldr	r3, [r4, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d000      	beq.n	8003d94 <HAL_RCC_OscConfig+0x2c8>
 8003d92:	e752      	b.n	8003c3a <HAL_RCC_OscConfig+0x16e>
 8003d94:	e799      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d96:	6833      	ldr	r3, [r6, #0]
 8003d98:	433b      	orrs	r3, r7
 8003d9a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003d9c:	f7fe ffce 	bl	8002d3c <HAL_GetTick>
 8003da0:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da2:	6833      	ldr	r3, [r6, #0]
 8003da4:	423b      	tst	r3, r7
 8003da6:	d000      	beq.n	8003daa <HAL_RCC_OscConfig+0x2de>
 8003da8:	e71f      	b.n	8003bea <HAL_RCC_OscConfig+0x11e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fe ffc7 	bl	8002d3c <HAL_GetTick>
 8003dae:	1b40      	subs	r0, r0, r5
 8003db0:	2802      	cmp	r0, #2
 8003db2:	d9f6      	bls.n	8003da2 <HAL_RCC_OscConfig+0x2d6>
            return HAL_TIMEOUT;
 8003db4:	2003      	movs	r0, #3
 8003db6:	e789      	b.n	8003ccc <HAL_RCC_OscConfig+0x200>
        __HAL_RCC_LSI_DISABLE();
 8003db8:	2201      	movs	r2, #1
 8003dba:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dbc:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8003dbe:	4393      	bics	r3, r2
 8003dc0:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003dc2:	f7fe ffbb 	bl	8002d3c <HAL_GetTick>
 8003dc6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCC_OscConfig+0x308>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fe ffb7 	bl	8002d3c <HAL_GetTick>
 8003dce:	1b80      	subs	r0, r0, r6
 8003dd0:	2802      	cmp	r0, #2
 8003dd2:	d8ef      	bhi.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003dd6:	421f      	tst	r7, r3
 8003dd8:	d1f7      	bne.n	8003dca <HAL_RCC_OscConfig+0x2fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	e6e5      	b.n	8003baa <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8003dde:	682b      	ldr	r3, [r5, #0]
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <HAL_RCC_OscConfig+0x36c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003de2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8003de4:	4013      	ands	r3, r2
 8003de6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003de8:	f7fe ffa8 	bl	8002d3c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dec:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8003dee:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df0:	e004      	b.n	8003dfc <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fe ffa3 	bl	8002d3c <HAL_GetTick>
 8003df6:	1b80      	subs	r0, r0, r6
 8003df8:	2802      	cmp	r0, #2
 8003dfa:	d8db      	bhi.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	423b      	tst	r3, r7
 8003e00:	d1f7      	bne.n	8003df2 <HAL_RCC_OscConfig+0x326>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	e6cf      	b.n	8003ba6 <HAL_RCC_OscConfig+0xda>
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	fffeffff 	.word	0xfffeffff
 8003e10:	fffbffff 	.word	0xfffbffff
 8003e14:	ffff80ff 	.word	0xffff80ff
 8003e18:	ffffc7ff 	.word	0xffffc7ff
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000008 	.word	0x20000008
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	00001388 	.word	0x00001388
 8003e30:	feffffff 	.word	0xfeffffff
 8003e34:	effefffc 	.word	0xeffefffc
 8003e38:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	4951      	ldr	r1, [pc, #324]	; (8003f84 <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8003e40:	4313      	orrs	r3, r2
 8003e42:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8003e44:	f7fe ff7a 	bl	8002d3c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e48:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8003e4a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4c:	4698      	mov	r8, r3
 8003e4e:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	4d4d      	ldr	r5, [pc, #308]	; (8003f88 <HAL_RCC_OscConfig+0x4bc>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	e004      	b.n	8003e5e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe ff72 	bl	8002d3c <HAL_GetTick>
 8003e58:	1b80      	subs	r0, r0, r6
 8003e5a:	42a8      	cmp	r0, r5
 8003e5c:	d8aa      	bhi.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5e:	4643      	mov	r3, r8
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	421f      	tst	r7, r3
 8003e64:	d0f6      	beq.n	8003e54 <HAL_RCC_OscConfig+0x388>
 8003e66:	e6e4      	b.n	8003c32 <HAL_RCC_OscConfig+0x166>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d100      	bne.n	8003e6e <HAL_RCC_OscConfig+0x3a2>
 8003e6c:	e72d      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8003e70:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	6a21      	ldr	r1, [r4, #32]
 8003e74:	4013      	ands	r3, r2
 8003e76:	428b      	cmp	r3, r1
 8003e78:	d000      	beq.n	8003e7c <HAL_RCC_OscConfig+0x3b0>
 8003e7a:	e726      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e7c:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e80:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d000      	beq.n	8003e88 <HAL_RCC_OscConfig+0x3bc>
 8003e86:	e720      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e88:	21fe      	movs	r1, #254	; 0xfe
 8003e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e8c:	01c9      	lsls	r1, r1, #7
 8003e8e:	4011      	ands	r1, r2
 8003e90:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e92:	4299      	cmp	r1, r3
 8003e94:	d000      	beq.n	8003e98 <HAL_RCC_OscConfig+0x3cc>
 8003e96:	e718      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e98:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e9c:	039b      	lsls	r3, r3, #14
 8003e9e:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea0:	428b      	cmp	r3, r1
 8003ea2:	d000      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x3da>
 8003ea4:	e711      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ea8:	0f52      	lsrs	r2, r2, #29
 8003eaa:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d000      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x3e6>
 8003eb0:	e70b      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
  return HAL_OK;
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e70a      	b.n	8003ccc <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb6:	2180      	movs	r1, #128	; 0x80
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	02c9      	lsls	r1, r1, #11
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	4301      	orrs	r1, r0
 8003ec0:	6019      	str	r1, [r3, #0]
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec8:	e720      	b.n	8003d0c <HAL_RCC_OscConfig+0x240>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eca:	6813      	ldr	r3, [r2, #0]
 8003ecc:	055b      	lsls	r3, r3, #21
 8003ece:	d503      	bpl.n	8003ed8 <HAL_RCC_OscConfig+0x40c>
 8003ed0:	68e3      	ldr	r3, [r4, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d100      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x40c>
 8003ed6:	e6f8      	b.n	8003cca <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	6851      	ldr	r1, [r2, #4]
 8003eda:	6963      	ldr	r3, [r4, #20]
 8003edc:	482b      	ldr	r0, [pc, #172]	; (8003f8c <HAL_RCC_OscConfig+0x4c0>)
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	4001      	ands	r1, r0
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ee6:	e656      	b.n	8003b96 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ee8:	4a26      	ldr	r2, [pc, #152]	; (8003f84 <HAL_RCC_OscConfig+0x4b8>)
 8003eea:	4929      	ldr	r1, [pc, #164]	; (8003f90 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003eee:	400b      	ands	r3, r1
 8003ef0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003ef2:	e6a2      	b.n	8003c3a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4013      	ands	r3, r2
 8003efc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003efe:	f7fe ff1d 	bl	8002d3c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f02:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003f04:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f06:	e005      	b.n	8003f14 <HAL_RCC_OscConfig+0x448>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe ff18 	bl	8002d3c <HAL_GetTick>
 8003f0c:	1b80      	subs	r0, r0, r6
 8003f0e:	2802      	cmp	r0, #2
 8003f10:	d900      	bls.n	8003f14 <HAL_RCC_OscConfig+0x448>
 8003f12:	e74f      	b.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	423b      	tst	r3, r7
 8003f18:	d1f6      	bne.n	8003f08 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f1c:	6a23      	ldr	r3, [r4, #32]
 8003f1e:	68ea      	ldr	r2, [r5, #12]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	491d      	ldr	r1, [pc, #116]	; (8003f98 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f24:	4e17      	ldr	r6, [pc, #92]	; (8003f84 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f26:	400a      	ands	r2, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003f30:	4313      	orrs	r3, r2
 8003f32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003f34:	0212      	lsls	r2, r2, #8
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	682a      	ldr	r2, [r5, #0]
 8003f3e:	045b      	lsls	r3, r3, #17
 8003f40:	4313      	orrs	r3, r2
 8003f42:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	68ea      	ldr	r2, [r5, #12]
 8003f48:	055b      	lsls	r3, r3, #21
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fef5 	bl	8002d3c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8003f54:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f56:	04ad      	lsls	r5, r5, #18
 8003f58:	e005      	b.n	8003f66 <HAL_RCC_OscConfig+0x49a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe feef 	bl	8002d3c <HAL_GetTick>
 8003f5e:	1b00      	subs	r0, r0, r4
 8003f60:	2802      	cmp	r0, #2
 8003f62:	d900      	bls.n	8003f66 <HAL_RCC_OscConfig+0x49a>
 8003f64:	e726      	b.n	8003db4 <HAL_RCC_OscConfig+0x2e8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	6833      	ldr	r3, [r6, #0]
 8003f68:	422b      	tst	r3, r5
 8003f6a:	d0f6      	beq.n	8003f5a <HAL_RCC_OscConfig+0x48e>
  return HAL_OK;
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e6ad      	b.n	8003ccc <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f70:	2104      	movs	r1, #4
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_RCC_OscConfig+0x4b8>)
 8003f74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f76:	430a      	orrs	r2, r1
 8003f78:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f7c:	3903      	subs	r1, #3
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f82:	e75f      	b.n	8003e44 <HAL_RCC_OscConfig+0x378>
 8003f84:	40021000 	.word	0x40021000
 8003f88:	00001388 	.word	0x00001388
 8003f8c:	ffff80ff 	.word	0xffff80ff
 8003f90:	efffffff 	.word	0xefffffff
 8003f94:	feffffff 	.word	0xfeffffff
 8003f98:	1fc1808c 	.word	0x1fc1808c

08003f9c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9c:	2338      	movs	r3, #56	; 0x38
 8003f9e:	4a20      	ldr	r2, [pc, #128]	; (8004020 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8003fa0:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fa2:	6891      	ldr	r1, [r2, #8]
 8003fa4:	420b      	tst	r3, r1
 8003fa6:	d105      	bne.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003fa8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003faa:	481e      	ldr	r0, [pc, #120]	; (8004024 <HAL_RCC_GetSysClockFreq+0x88>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003fac:	049b      	lsls	r3, r3, #18
 8003fae:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003fb0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8003fb2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb4:	6891      	ldr	r1, [r2, #8]
 8003fb6:	4019      	ands	r1, r3
 8003fb8:	2908      	cmp	r1, #8
 8003fba:	d011      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbc:	6891      	ldr	r1, [r2, #8]
 8003fbe:	4019      	ands	r1, r3
 8003fc0:	2910      	cmp	r1, #16
 8003fc2:	d00f      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003fc4:	6891      	ldr	r1, [r2, #8]
 8003fc6:	4019      	ands	r1, r3
 8003fc8:	2920      	cmp	r1, #32
 8003fca:	d021      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003fcc:	6890      	ldr	r0, [r2, #8]
 8003fce:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 8003fd0:	3818      	subs	r0, #24
 8003fd2:	4243      	negs	r3, r0
 8003fd4:	4158      	adcs	r0, r3
 8003fd6:	23fa      	movs	r3, #250	; 0xfa
 8003fd8:	4240      	negs	r0, r0
 8003fda:	01db      	lsls	r3, r3, #7
 8003fdc:	4018      	ands	r0, r3
 8003fde:	e7e8      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003fe0:	4811      	ldr	r0, [pc, #68]	; (8004028 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003fe2:	e7e6      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003fe4:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fe6:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003fe8:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003fea:	68d0      	ldr	r0, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fec:	0649      	lsls	r1, r1, #25
 8003fee:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ff0:	0440      	lsls	r0, r0, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ff2:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ff4:	0e44      	lsrs	r4, r0, #25
    switch (pllsource)
 8003ff6:	079b      	lsls	r3, r3, #30
 8003ff8:	d00d      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ffa:	480a      	ldr	r0, [pc, #40]	; (8004024 <HAL_RCC_GetSysClockFreq+0x88>)
 8003ffc:	f7fc f880 	bl	8000100 <__udivsi3>
 8004000:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <HAL_RCC_GetSysClockFreq+0x84>)
 8004004:	68d9      	ldr	r1, [r3, #12]
 8004006:	0f49      	lsrs	r1, r1, #29
 8004008:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800400a:	f7fc f879 	bl	8000100 <__udivsi3>
  return sysclockfreq;
 800400e:	e7d0      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8004010:	2080      	movs	r0, #128	; 0x80
 8004012:	0200      	lsls	r0, r0, #8
 8004014:	e7cd      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004016:	4804      	ldr	r0, [pc, #16]	; (8004028 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004018:	f7fc f872 	bl	8000100 <__udivsi3>
 800401c:	4360      	muls	r0, r4
        break;
 800401e:	e7f0      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x66>
 8004020:	40021000 	.word	0x40021000
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <HAL_RCC_ClockConfig>:
{
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	46ce      	mov	lr, r9
 8004030:	4647      	mov	r7, r8
 8004032:	0005      	movs	r5, r0
 8004034:	000c      	movs	r4, r1
 8004036:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8004038:	2800      	cmp	r0, #0
 800403a:	d026      	beq.n	800408a <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	2207      	movs	r2, #7
 800403e:	4e57      	ldr	r6, [pc, #348]	; (800419c <HAL_RCC_ClockConfig+0x170>)
 8004040:	6833      	ldr	r3, [r6, #0]
 8004042:	4013      	ands	r3, r2
 8004044:	428b      	cmp	r3, r1
 8004046:	d35e      	bcc.n	8004106 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	079a      	lsls	r2, r3, #30
 800404c:	d50e      	bpl.n	800406c <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404e:	075a      	lsls	r2, r3, #29
 8004050:	d505      	bpl.n	800405e <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004052:	22e0      	movs	r2, #224	; 0xe0
 8004054:	4952      	ldr	r1, [pc, #328]	; (80041a0 <HAL_RCC_ClockConfig+0x174>)
 8004056:	01d2      	lsls	r2, r2, #7
 8004058:	6888      	ldr	r0, [r1, #8]
 800405a:	4302      	orrs	r2, r0
 800405c:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405e:	4950      	ldr	r1, [pc, #320]	; (80041a0 <HAL_RCC_ClockConfig+0x174>)
 8004060:	4850      	ldr	r0, [pc, #320]	; (80041a4 <HAL_RCC_ClockConfig+0x178>)
 8004062:	688a      	ldr	r2, [r1, #8]
 8004064:	4002      	ands	r2, r0
 8004066:	68a8      	ldr	r0, [r5, #8]
 8004068:	4302      	orrs	r2, r0
 800406a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406c:	07db      	lsls	r3, r3, #31
 800406e:	d52b      	bpl.n	80040c8 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004070:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004072:	4a4b      	ldr	r2, [pc, #300]	; (80041a0 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004074:	2b01      	cmp	r3, #1
 8004076:	d100      	bne.n	800407a <HAL_RCC_ClockConfig+0x4e>
 8004078:	e07c      	b.n	8004174 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800407a:	2b02      	cmp	r3, #2
 800407c:	d007      	beq.n	800408e <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800407e:	2b00      	cmp	r3, #0
 8004080:	d000      	beq.n	8004084 <HAL_RCC_ClockConfig+0x58>
 8004082:	e07d      	b.n	8004180 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	0552      	lsls	r2, r2, #21
 8004088:	d404      	bmi.n	8004094 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800408a:	2001      	movs	r0, #1
 800408c:	e037      	b.n	80040fe <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	0192      	lsls	r2, r2, #6
 8004092:	d5fa      	bpl.n	800408a <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004094:	2107      	movs	r1, #7
 8004096:	4e42      	ldr	r6, [pc, #264]	; (80041a0 <HAL_RCC_ClockConfig+0x174>)
 8004098:	68b2      	ldr	r2, [r6, #8]
 800409a:	438a      	bics	r2, r1
 800409c:	4313      	orrs	r3, r2
 800409e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80040a0:	f7fe fe4c 	bl	8002d3c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a4:	2338      	movs	r3, #56	; 0x38
 80040a6:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a8:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80040aa:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e004      	b.n	80040ba <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fe fe44 	bl	8002d3c <HAL_GetTick>
 80040b4:	1bc0      	subs	r0, r0, r7
 80040b6:	4548      	cmp	r0, r9
 80040b8:	d83b      	bhi.n	8004132 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4643      	mov	r3, r8
 80040bc:	68b2      	ldr	r2, [r6, #8]
 80040be:	401a      	ands	r2, r3
 80040c0:	686b      	ldr	r3, [r5, #4]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d1f3      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c8:	2207      	movs	r2, #7
 80040ca:	4e34      	ldr	r6, [pc, #208]	; (800419c <HAL_RCC_ClockConfig+0x170>)
 80040cc:	6833      	ldr	r3, [r6, #0]
 80040ce:	4013      	ands	r3, r2
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	d838      	bhi.n	8004146 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	075b      	lsls	r3, r3, #29
 80040d8:	d42d      	bmi.n	8004136 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80040da:	f7ff ff5f 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 80040de:	4b30      	ldr	r3, [pc, #192]	; (80041a0 <HAL_RCC_ClockConfig+0x174>)
 80040e0:	4a32      	ldr	r2, [pc, #200]	; (80041ac <HAL_RCC_ClockConfig+0x180>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	051b      	lsls	r3, r3, #20
 80040e6:	0f1b      	lsrs	r3, r3, #28
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	589b      	ldr	r3, [r3, r2]
 80040ec:	221f      	movs	r2, #31
 80040ee:	4013      	ands	r3, r2
 80040f0:	40d8      	lsrs	r0, r3
 80040f2:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <HAL_RCC_ClockConfig+0x184>)
 80040f4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <HAL_RCC_ClockConfig+0x188>)
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f7fe fdd9 	bl	8002cb0 <HAL_InitTick>
}
 80040fe:	bcc0      	pop	{r6, r7}
 8004100:	46b9      	mov	r9, r7
 8004102:	46b0      	mov	r8, r6
 8004104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	6833      	ldr	r3, [r6, #0]
 8004108:	4393      	bics	r3, r2
 800410a:	430b      	orrs	r3, r1
 800410c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800410e:	f7fe fe15 	bl	8002d3c <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004112:	2307      	movs	r3, #7
 8004114:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8004118:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800411a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800411c:	4642      	mov	r2, r8
 800411e:	6833      	ldr	r3, [r6, #0]
 8004120:	4013      	ands	r3, r2
 8004122:	42a3      	cmp	r3, r4
 8004124:	d100      	bne.n	8004128 <HAL_RCC_ClockConfig+0xfc>
 8004126:	e78f      	b.n	8004048 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fe fe08 	bl	8002d3c <HAL_GetTick>
 800412c:	1bc0      	subs	r0, r0, r7
 800412e:	4548      	cmp	r0, r9
 8004130:	d9f4      	bls.n	800411c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8004132:	2003      	movs	r0, #3
 8004134:	e7e3      	b.n	80040fe <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004136:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_RCC_ClockConfig+0x174>)
 8004138:	491f      	ldr	r1, [pc, #124]	; (80041b8 <HAL_RCC_ClockConfig+0x18c>)
 800413a:	6893      	ldr	r3, [r2, #8]
 800413c:	400b      	ands	r3, r1
 800413e:	68e9      	ldr	r1, [r5, #12]
 8004140:	430b      	orrs	r3, r1
 8004142:	6093      	str	r3, [r2, #8]
 8004144:	e7c9      	b.n	80040da <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	6833      	ldr	r3, [r6, #0]
 8004148:	4393      	bics	r3, r2
 800414a:	4323      	orrs	r3, r4
 800414c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800414e:	f7fe fdf5 	bl	8002d3c <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004152:	2307      	movs	r3, #7
 8004154:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8004158:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800415c:	4642      	mov	r2, r8
 800415e:	6833      	ldr	r3, [r6, #0]
 8004160:	4013      	ands	r3, r2
 8004162:	42a3      	cmp	r3, r4
 8004164:	d0b6      	beq.n	80040d4 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004166:	f7fe fde9 	bl	8002d3c <HAL_GetTick>
 800416a:	1bc0      	subs	r0, r0, r7
 800416c:	4548      	cmp	r0, r9
 800416e:	d9f5      	bls.n	800415c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8004170:	2003      	movs	r0, #3
 8004172:	e7c4      	b.n	80040fe <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	0392      	lsls	r2, r2, #14
 8004178:	d500      	bpl.n	800417c <HAL_RCC_ClockConfig+0x150>
 800417a:	e78b      	b.n	8004094 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800417c:	2001      	movs	r0, #1
 800417e:	e7be      	b.n	80040fe <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004180:	2b03      	cmp	r3, #3
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004184:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004186:	0792      	lsls	r2, r2, #30
 8004188:	d500      	bpl.n	800418c <HAL_RCC_ClockConfig+0x160>
 800418a:	e783      	b.n	8004094 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800418c:	2001      	movs	r0, #1
 800418e:	e7b6      	b.n	80040fe <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004190:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004192:	0792      	lsls	r2, r2, #30
 8004194:	d500      	bpl.n	8004198 <HAL_RCC_ClockConfig+0x16c>
 8004196:	e77d      	b.n	8004094 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8004198:	2001      	movs	r0, #1
 800419a:	e7b0      	b.n	80040fe <HAL_RCC_ClockConfig+0xd2>
 800419c:	40022000 	.word	0x40022000
 80041a0:	40021000 	.word	0x40021000
 80041a4:	fffff0ff 	.word	0xfffff0ff
 80041a8:	00001388 	.word	0x00001388
 80041ac:	08004dc0 	.word	0x08004dc0
 80041b0:	20000000 	.word	0x20000000
 80041b4:	20000008 	.word	0x20000008
 80041b8:	ffff8fff 	.word	0xffff8fff

080041bc <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041be:	4a07      	ldr	r2, [pc, #28]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	045b      	lsls	r3, r3, #17
 80041c4:	0f5b      	lsrs	r3, r3, #29
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	589b      	ldr	r3, [r3, r2]
 80041ca:	221f      	movs	r2, #31
 80041cc:	4013      	ands	r3, r2
 80041ce:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d0:	6810      	ldr	r0, [r2, #0]
 80041d2:	40d8      	lsrs	r0, r3
}
 80041d4:	4770      	bx	lr
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	40021000 	.word	0x40021000
 80041dc:	08004e00 	.word	0x08004e00
 80041e0:	20000000 	.word	0x20000000

080041e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e6:	46ce      	mov	lr, r9
 80041e8:	4647      	mov	r7, r8
 80041ea:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041ec:	6803      	ldr	r3, [r0, #0]
{
 80041ee:	0004      	movs	r4, r0
 80041f0:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041f2:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041f4:	039a      	lsls	r2, r3, #14
 80041f6:	d54f      	bpl.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xb4>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	4b51      	ldr	r3, [pc, #324]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80041fc:	0552      	lsls	r2, r2, #21
 80041fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004200:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004202:	4211      	tst	r1, r2
 8004204:	d100      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004206:	e078      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004208:	2780      	movs	r7, #128	; 0x80
 800420a:	4d4e      	ldr	r5, [pc, #312]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420c:	007f      	lsls	r7, r7, #1
 800420e:	682b      	ldr	r3, [r5, #0]
 8004210:	433b      	orrs	r3, r7
 8004212:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004214:	f7fe fd92 	bl	8002d3c <HAL_GetTick>
 8004218:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800421a:	e005      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fe fd8e 	bl	8002d3c <HAL_GetTick>
 8004220:	1b80      	subs	r0, r0, r6
 8004222:	2802      	cmp	r0, #2
 8004224:	d900      	bls.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004226:	e072      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	423b      	tst	r3, r7
 800422c:	d0f6      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800422e:	4d44      	ldr	r5, [pc, #272]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004230:	23c0      	movs	r3, #192	; 0xc0
 8004232:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	0011      	movs	r1, r2
 8004238:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800423a:	421a      	tst	r2, r3
 800423c:	d020      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800423e:	6960      	ldr	r0, [r4, #20]
 8004240:	4288      	cmp	r0, r1
 8004242:	d01e      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004244:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004246:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8004248:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 800424a:	0252      	lsls	r2, r2, #9
 800424c:	4332      	orrs	r2, r6
 800424e:	65ea      	str	r2, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004250:	6dea      	ldr	r2, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004252:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004254:	4e3d      	ldr	r6, [pc, #244]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x168>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004256:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004258:	4032      	ands	r2, r6
 800425a:	65ea      	str	r2, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800425c:	65eb      	str	r3, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800425e:	07cb      	lsls	r3, r1, #31
 8004260:	d56c      	bpl.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004262:	f7fe fd6b 	bl	8002d3c <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
        tickstart = HAL_GetTick();
 8004268:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426a:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426e:	e004      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x96>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f7fe fd64 	bl	8002d3c <HAL_GetTick>
 8004274:	1b80      	subs	r0, r0, r6
 8004276:	4548      	cmp	r0, r9
 8004278:	d849      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800427c:	421f      	tst	r7, r3
 800427e:	d0f7      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004280:	6961      	ldr	r1, [r4, #20]
 8004282:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004284:	4830      	ldr	r0, [pc, #192]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004286:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004288:	4003      	ands	r3, r0
 800428a:	430b      	orrs	r3, r1
 800428c:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800428e:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004290:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 8004292:	2b01      	cmp	r3, #1
 8004294:	d03f      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	07da      	lsls	r2, r3, #31
 800429a:	d506      	bpl.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800429c:	2503      	movs	r5, #3
 800429e:	4928      	ldr	r1, [pc, #160]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042a0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80042a2:	43aa      	bics	r2, r5
 80042a4:	6865      	ldr	r5, [r4, #4]
 80042a6:	432a      	orrs	r2, r5
 80042a8:	654a      	str	r2, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042aa:	069a      	lsls	r2, r3, #26
 80042ac:	d506      	bpl.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ae:	4924      	ldr	r1, [pc, #144]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042b0:	4d28      	ldr	r5, [pc, #160]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80042b2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80042b4:	402a      	ands	r2, r5
 80042b6:	68a5      	ldr	r5, [r4, #8]
 80042b8:	432a      	orrs	r2, r5
 80042ba:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042bc:	045a      	lsls	r2, r3, #17
 80042be:	d50a      	bpl.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c0:	491f      	ldr	r1, [pc, #124]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042c2:	6925      	ldr	r5, [r4, #16]
 80042c4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80042c6:	0092      	lsls	r2, r2, #2
 80042c8:	0892      	lsrs	r2, r2, #2
 80042ca:	432a      	orrs	r2, r5
 80042cc:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	05d2      	lsls	r2, r2, #23
 80042d2:	4295      	cmp	r5, r2
 80042d4:	d026      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x140>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80042d6:	051b      	lsls	r3, r3, #20
 80042d8:	d50a      	bpl.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80042da:	4a19      	ldr	r2, [pc, #100]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80042dc:	68e1      	ldr	r1, [r4, #12]
 80042de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80042e0:	4c1d      	ldr	r4, [pc, #116]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80042e2:	4023      	ands	r3, r4
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	01db      	lsls	r3, r3, #7
 80042ec:	4299      	cmp	r1, r3
 80042ee:	d01f      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80042f0:	b003      	add	sp, #12
 80042f2:	bcc0      	pop	{r6, r7}
 80042f4:	46b9      	mov	r9, r7
 80042f6:	46b0      	mov	r8, r6
 80042f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80042fc:	4311      	orrs	r1, r2
 80042fe:	63d9      	str	r1, [r3, #60]	; 0x3c
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	401a      	ands	r2, r3
 8004304:	9201      	str	r2, [sp, #4]
 8004306:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004308:	2301      	movs	r3, #1
 800430a:	4698      	mov	r8, r3
 800430c:	e77c      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 800430e:	4643      	mov	r3, r8
        ret = HAL_TIMEOUT;
 8004310:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 8004312:	2b01      	cmp	r3, #1
 8004314:	d1bf      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004318:	4910      	ldr	r1, [pc, #64]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800431a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800431c:	400b      	ands	r3, r1
 800431e:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	e7b9      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004324:	2280      	movs	r2, #128	; 0x80
 8004326:	68cd      	ldr	r5, [r1, #12]
 8004328:	0252      	lsls	r2, r2, #9
 800432a:	432a      	orrs	r2, r5
 800432c:	60ca      	str	r2, [r1, #12]
 800432e:	e7d2      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	68d1      	ldr	r1, [r2, #12]
 8004334:	025b      	lsls	r3, r3, #9
 8004336:	430b      	orrs	r3, r1
 8004338:	60d3      	str	r3, [r2, #12]
  return status;
 800433a:	e7d9      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800433c:	0001      	movs	r1, r0
 800433e:	e7a0      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004340:	40021000 	.word	0x40021000
 8004344:	40007000 	.word	0x40007000
 8004348:	fffffcff 	.word	0xfffffcff
 800434c:	fffeffff 	.word	0xfffeffff
 8004350:	00001388 	.word	0x00001388
 8004354:	ffffcfff 	.word	0xffffcfff
 8004358:	ffff3fff 	.word	0xffff3fff
 800435c:	efffffff 	.word	0xefffffff

08004360 <HAL_UART_TxCpltCallback>:
 8004360:	4770      	bx	lr
 8004362:	46c0      	nop			; (mov r8, r8)

08004364 <HAL_UART_ErrorCallback>:
 8004364:	4770      	bx	lr
 8004366:	46c0      	nop			; (mov r8, r8)

08004368 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	225e      	movs	r2, #94	; 0x5e
{
 800436c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800436e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004370:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004372:	3a08      	subs	r2, #8
 8004374:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004376:	f7ff fff5 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800437a:	bd10      	pop	{r4, pc}

0800437c <HAL_UARTEx_RxEventCallback>:
}
 800437c:	4770      	bx	lr
 800437e:	46c0      	nop			; (mov r8, r8)

08004380 <HAL_UART_IRQHandler>:
{
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	4645      	mov	r5, r8
 8004384:	46de      	mov	lr, fp
 8004386:	4657      	mov	r7, sl
 8004388:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800438a:	6802      	ldr	r2, [r0, #0]
{
 800438c:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800438e:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004390:	4da8      	ldr	r5, [pc, #672]	; (8004634 <HAL_UART_IRQHandler+0x2b4>)
{
 8004392:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004394:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004396:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8004398:	422b      	tst	r3, r5
 800439a:	d100      	bne.n	800439e <HAL_UART_IRQHandler+0x1e>
 800439c:	e0f7      	b.n	800458e <HAL_UART_IRQHandler+0x20e>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800439e:	4ea6      	ldr	r6, [pc, #664]	; (8004638 <HAL_UART_IRQHandler+0x2b8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80043a0:	4da6      	ldr	r5, [pc, #664]	; (800463c <HAL_UART_IRQHandler+0x2bc>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80043a2:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80043a4:	4005      	ands	r5, r0
 80043a6:	4335      	orrs	r5, r6
 80043a8:	d157      	bne.n	800445a <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043aa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80043ac:	2d01      	cmp	r5, #1
 80043ae:	d026      	beq.n	80043fe <HAL_UART_IRQHandler+0x7e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043b0:	2580      	movs	r5, #128	; 0x80
 80043b2:	036d      	lsls	r5, r5, #13
 80043b4:	422b      	tst	r3, r5
 80043b6:	d002      	beq.n	80043be <HAL_UART_IRQHandler+0x3e>
 80043b8:	024e      	lsls	r6, r1, #9
 80043ba:	d500      	bpl.n	80043be <HAL_UART_IRQHandler+0x3e>
 80043bc:	e110      	b.n	80045e0 <HAL_UART_IRQHandler+0x260>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	421a      	tst	r2, r3
 80043c2:	d006      	beq.n	80043d2 <HAL_UART_IRQHandler+0x52>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80043c4:	2580      	movs	r5, #128	; 0x80
 80043c6:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80043c8:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80043ca:	4029      	ands	r1, r5
 80043cc:	4311      	orrs	r1, r2
 80043ce:	d000      	beq.n	80043d2 <HAL_UART_IRQHandler+0x52>
 80043d0:	e0ff      	b.n	80045d2 <HAL_UART_IRQHandler+0x252>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	421a      	tst	r2, r3
 80043d6:	d002      	beq.n	80043de <HAL_UART_IRQHandler+0x5e>
 80043d8:	4202      	tst	r2, r0
 80043da:	d000      	beq.n	80043de <HAL_UART_IRQHandler+0x5e>
 80043dc:	e109      	b.n	80045f2 <HAL_UART_IRQHandler+0x272>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	d502      	bpl.n	80043e8 <HAL_UART_IRQHandler+0x68>
 80043e2:	0042      	lsls	r2, r0, #1
 80043e4:	d500      	bpl.n	80043e8 <HAL_UART_IRQHandler+0x68>
 80043e6:	e118      	b.n	800461a <HAL_UART_IRQHandler+0x29a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043e8:	01db      	lsls	r3, r3, #7
 80043ea:	d502      	bpl.n	80043f2 <HAL_UART_IRQHandler+0x72>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	da00      	bge.n	80043f2 <HAL_UART_IRQHandler+0x72>
 80043f0:	e16f      	b.n	80046d2 <HAL_UART_IRQHandler+0x352>
}
 80043f2:	bcf0      	pop	{r4, r5, r6, r7}
 80043f4:	46bb      	mov	fp, r7
 80043f6:	46b2      	mov	sl, r6
 80043f8:	46a9      	mov	r9, r5
 80043fa:	46a0      	mov	r8, r4
 80043fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043fe:	2610      	movs	r6, #16
 8004400:	421e      	tst	r6, r3
 8004402:	d0d5      	beq.n	80043b0 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004404:	4206      	tst	r6, r0
 8004406:	d0d3      	beq.n	80043b0 <HAL_UART_IRQHandler+0x30>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	2340      	movs	r3, #64	; 0x40
 800440a:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800440c:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	4010      	ands	r0, r2
 8004412:	4213      	tst	r3, r2
 8004414:	d100      	bne.n	8004418 <HAL_UART_IRQHandler+0x98>
 8004416:	e119      	b.n	800464c <HAL_UART_IRQHandler+0x2cc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004418:	2280      	movs	r2, #128	; 0x80
 800441a:	4693      	mov	fp, r2
 800441c:	58a2      	ldr	r2, [r4, r2]
 800441e:	6810      	ldr	r0, [r2, #0]
 8004420:	6842      	ldr	r2, [r0, #4]
 8004422:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004424:	2a00      	cmp	r2, #0
 8004426:	d0e4      	beq.n	80043f2 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004428:	215c      	movs	r1, #92	; 0x5c
 800442a:	468a      	mov	sl, r1
 800442c:	5a61      	ldrh	r1, [r4, r1]
 800442e:	4291      	cmp	r1, r2
 8004430:	d9df      	bls.n	80043f2 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 8004432:	275e      	movs	r7, #94	; 0x5e
 8004434:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004436:	2220      	movs	r2, #32
 8004438:	0017      	movs	r7, r2
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	4007      	ands	r7, r0
 800443e:	46b8      	mov	r8, r7
 8004440:	4202      	tst	r2, r0
 8004442:	d100      	bne.n	8004446 <HAL_UART_IRQHandler+0xc6>
 8004444:	e14e      	b.n	80046e4 <HAL_UART_IRQHandler+0x364>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004446:	2302      	movs	r3, #2
 8004448:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800444a:	335c      	adds	r3, #92	; 0x5c
 800444c:	5ae3      	ldrh	r3, [r4, r3]
 800444e:	0020      	movs	r0, r4
 8004450:	1ac9      	subs	r1, r1, r3
 8004452:	b289      	uxth	r1, r1
 8004454:	f7ff ff92 	bl	800437c <HAL_UARTEx_RxEventCallback>
 8004458:	e7cb      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800445a:	2501      	movs	r5, #1
 800445c:	421d      	tst	r5, r3
 800445e:	d008      	beq.n	8004472 <HAL_UART_IRQHandler+0xf2>
 8004460:	05c7      	lsls	r7, r0, #23
 8004462:	d506      	bpl.n	8004472 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004464:	2790      	movs	r7, #144	; 0x90
 8004466:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004468:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446a:	59e7      	ldr	r7, [r4, r7]
 800446c:	433d      	orrs	r5, r7
 800446e:	4667      	mov	r7, ip
 8004470:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004472:	2502      	movs	r5, #2
 8004474:	421d      	tst	r5, r3
 8004476:	d100      	bne.n	800447a <HAL_UART_IRQHandler+0xfa>
 8004478:	e098      	b.n	80045ac <HAL_UART_IRQHandler+0x22c>
 800447a:	07cf      	lsls	r7, r1, #31
 800447c:	d50c      	bpl.n	8004498 <HAL_UART_IRQHandler+0x118>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800447e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004480:	358e      	adds	r5, #142	; 0x8e
 8004482:	2704      	movs	r7, #4
 8004484:	46ac      	mov	ip, r5
 8004486:	5965      	ldr	r5, [r4, r5]
 8004488:	46b8      	mov	r8, r7
 800448a:	433d      	orrs	r5, r7
 800448c:	4667      	mov	r7, ip
 800448e:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004490:	4645      	mov	r5, r8
 8004492:	421d      	tst	r5, r3
 8004494:	d000      	beq.n	8004498 <HAL_UART_IRQHandler+0x118>
 8004496:	e08f      	b.n	80045b8 <HAL_UART_IRQHandler+0x238>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004498:	2708      	movs	r7, #8
 800449a:	421f      	tst	r7, r3
 800449c:	d008      	beq.n	80044b0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800449e:	2520      	movs	r5, #32
 80044a0:	4005      	ands	r5, r0
 80044a2:	432e      	orrs	r6, r5
 80044a4:	d004      	beq.n	80044b0 <HAL_UART_IRQHandler+0x130>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044a6:	2690      	movs	r6, #144	; 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044a8:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044aa:	59a5      	ldr	r5, [r4, r6]
 80044ac:	432f      	orrs	r7, r5
 80044ae:	51a7      	str	r7, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044b0:	2580      	movs	r5, #128	; 0x80
 80044b2:	012d      	lsls	r5, r5, #4
 80044b4:	422b      	tst	r3, r5
 80044b6:	d007      	beq.n	80044c8 <HAL_UART_IRQHandler+0x148>
 80044b8:	0146      	lsls	r6, r0, #5
 80044ba:	d505      	bpl.n	80044c8 <HAL_UART_IRQHandler+0x148>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044bc:	2690      	movs	r6, #144	; 0x90
 80044be:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044c2:	59a5      	ldr	r5, [r4, r6]
 80044c4:	433d      	orrs	r5, r7
 80044c6:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044c8:	2590      	movs	r5, #144	; 0x90
 80044ca:	5965      	ldr	r5, [r4, r5]
 80044cc:	2d00      	cmp	r5, #0
 80044ce:	d100      	bne.n	80044d2 <HAL_UART_IRQHandler+0x152>
 80044d0:	e78f      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044d2:	2520      	movs	r5, #32
 80044d4:	421d      	tst	r5, r3
 80044d6:	d006      	beq.n	80044e6 <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044d8:	4005      	ands	r5, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044da:	2080      	movs	r0, #128	; 0x80
 80044dc:	0540      	lsls	r0, r0, #21
 80044de:	4001      	ands	r1, r0
 80044e0:	430d      	orrs	r5, r1
 80044e2:	d000      	beq.n	80044e6 <HAL_UART_IRQHandler+0x166>
 80044e4:	e09d      	b.n	8004622 <HAL_UART_IRQHandler+0x2a2>
      errorcode = huart->ErrorCode;
 80044e6:	2690      	movs	r6, #144	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044e8:	2540      	movs	r5, #64	; 0x40
      errorcode = huart->ErrorCode;
 80044ea:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ec:	6893      	ldr	r3, [r2, #8]
 80044ee:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044f0:	2328      	movs	r3, #40	; 0x28
 80044f2:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044f4:	431d      	orrs	r5, r3
 80044f6:	d100      	bne.n	80044fa <HAL_UART_IRQHandler+0x17a>
 80044f8:	e0ef      	b.n	80046da <HAL_UART_IRQHandler+0x35a>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fa:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fe:	2201      	movs	r2, #1
 8004500:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004504:	6821      	ldr	r1, [r4, #0]
 8004506:	4d4e      	ldr	r5, [pc, #312]	; (8004640 <HAL_UART_IRQHandler+0x2c0>)
 8004508:	680b      	ldr	r3, [r1, #0]
 800450a:	402b      	ands	r3, r5
 800450c:	600b      	str	r3, [r1, #0]
 800450e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004512:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004516:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	4849      	ldr	r0, [pc, #292]	; (8004644 <HAL_UART_IRQHandler+0x2c4>)
 800451e:	6893      	ldr	r3, [r2, #8]
 8004520:	4003      	ands	r3, r0
 8004522:	6093      	str	r3, [r2, #8]
 8004524:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004528:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d10a      	bne.n	8004544 <HAL_UART_IRQHandler+0x1c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004536:	2010      	movs	r0, #16
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	4383      	bics	r3, r0
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	238c      	movs	r3, #140	; 0x8c
 8004546:	2220      	movs	r2, #32
 8004548:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	2300      	movs	r3, #0
 800454c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxISR = NULL;
 800454e:	6763      	str	r3, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	3220      	adds	r2, #32
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	421a      	tst	r2, r3
 8004558:	d047      	beq.n	80045ea <HAL_UART_IRQHandler+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455e:	2301      	movs	r3, #1
 8004560:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004564:	6821      	ldr	r1, [r4, #0]
 8004566:	688b      	ldr	r3, [r1, #8]
 8004568:	4393      	bics	r3, r2
 800456a:	608b      	str	r3, [r1, #8]
 800456c:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8004570:	2580      	movs	r5, #128	; 0x80
 8004572:	5960      	ldr	r0, [r4, r5]
 8004574:	2800      	cmp	r0, #0
 8004576:	d038      	beq.n	80045ea <HAL_UART_IRQHandler+0x26a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004578:	4b33      	ldr	r3, [pc, #204]	; (8004648 <HAL_UART_IRQHandler+0x2c8>)
 800457a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800457c:	f7ff f8ce 	bl	800371c <HAL_DMA_Abort_IT>
 8004580:	2800      	cmp	r0, #0
 8004582:	d100      	bne.n	8004586 <HAL_UART_IRQHandler+0x206>
 8004584:	e735      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004586:	5960      	ldr	r0, [r4, r5]
 8004588:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800458a:	4798      	blx	r3
 800458c:	e731      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800458e:	2520      	movs	r5, #32
 8004590:	421d      	tst	r5, r3
 8004592:	d100      	bne.n	8004596 <HAL_UART_IRQHandler+0x216>
 8004594:	e709      	b.n	80043aa <HAL_UART_IRQHandler+0x2a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004596:	2680      	movs	r6, #128	; 0x80
 8004598:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800459a:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800459c:	400e      	ands	r6, r1
 800459e:	4335      	orrs	r5, r6
 80045a0:	d100      	bne.n	80045a4 <HAL_UART_IRQHandler+0x224>
 80045a2:	e702      	b.n	80043aa <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 80045a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d117      	bne.n	80045da <HAL_UART_IRQHandler+0x25a>
 80045aa:	e722      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045ac:	075d      	lsls	r5, r3, #29
 80045ae:	d400      	bmi.n	80045b2 <HAL_UART_IRQHandler+0x232>
 80045b0:	e772      	b.n	8004498 <HAL_UART_IRQHandler+0x118>
 80045b2:	07cd      	lsls	r5, r1, #31
 80045b4:	d400      	bmi.n	80045b8 <HAL_UART_IRQHandler+0x238>
 80045b6:	e76f      	b.n	8004498 <HAL_UART_IRQHandler+0x118>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045b8:	2504      	movs	r5, #4
 80045ba:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045bc:	358c      	adds	r5, #140	; 0x8c
 80045be:	46a9      	mov	r9, r5
 80045c0:	5965      	ldr	r5, [r4, r5]
 80045c2:	46a8      	mov	r8, r5
 80045c4:	2502      	movs	r5, #2
 80045c6:	4647      	mov	r7, r8
 80045c8:	432f      	orrs	r7, r5
 80045ca:	003d      	movs	r5, r7
 80045cc:	464f      	mov	r7, r9
 80045ce:	51e5      	str	r5, [r4, r7]
 80045d0:	e762      	b.n	8004498 <HAL_UART_IRQHandler+0x118>
    if (huart->TxISR != NULL)
 80045d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d100      	bne.n	80045da <HAL_UART_IRQHandler+0x25a>
 80045d8:	e70b      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 80045da:	0020      	movs	r0, r4
 80045dc:	4798      	blx	r3
 80045de:	e708      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_WakeupCallback(huart);
 80045e0:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045e2:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80045e4:	f000 fab0 	bl	8004b48 <HAL_UARTEx_WakeupCallback>
    return;
 80045e8:	e703      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
            HAL_UART_ErrorCallback(huart);
 80045ea:	0020      	movs	r0, r4
 80045ec:	f7ff feba 	bl	8004364 <HAL_UART_ErrorCallback>
 80045f0:	e6ff      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f6:	2301      	movs	r3, #1
 80045f8:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045fc:	6821      	ldr	r1, [r4, #0]
 80045fe:	680b      	ldr	r3, [r1, #0]
 8004600:	4393      	bics	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
 8004604:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004608:	2388      	movs	r3, #136	; 0x88
 800460a:	3a20      	subs	r2, #32
 800460c:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800460e:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004610:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8004612:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8004614:	f7ff fea4 	bl	8004360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004618:	e6eb      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800461a:	0020      	movs	r0, r4
 800461c:	f000 fa98 	bl	8004b50 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8004620:	e6e7      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
        if (huart->RxISR != NULL)
 8004622:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004624:	2b00      	cmp	r3, #0
 8004626:	d100      	bne.n	800462a <HAL_UART_IRQHandler+0x2aa>
 8004628:	e75d      	b.n	80044e6 <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 800462a:	0020      	movs	r0, r4
 800462c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	e759      	b.n	80044e6 <HAL_UART_IRQHandler+0x166>
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	0000080f 	.word	0x0000080f
 8004638:	10000001 	.word	0x10000001
 800463c:	04000120 	.word	0x04000120
 8004640:	fffffedf 	.word	0xfffffedf
 8004644:	effffffe 	.word	0xeffffffe
 8004648:	08004369 	.word	0x08004369
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800464c:	225e      	movs	r2, #94	; 0x5e
 800464e:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8004650:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004652:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8004654:	2a00      	cmp	r2, #0
 8004656:	d100      	bne.n	800465a <HAL_UART_IRQHandler+0x2da>
 8004658:	e6cb      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800465a:	225c      	movs	r2, #92	; 0x5c
 800465c:	5aa1      	ldrh	r1, [r4, r2]
 800465e:	1ac9      	subs	r1, r1, r3
 8004660:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004662:	2900      	cmp	r1, #0
 8004664:	d100      	bne.n	8004668 <HAL_UART_IRQHandler+0x2e8>
 8004666:	e6c4      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004668:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	4699      	mov	r9, r3
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4698      	mov	r8, r3
 8004678:	4642      	mov	r2, r8
 800467a:	4b34      	ldr	r3, [pc, #208]	; (800474c <HAL_UART_IRQHandler+0x3cc>)
 800467c:	401a      	ands	r2, r3
 800467e:	0013      	movs	r3, r2
 8004680:	464a      	mov	r2, r9
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004688:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468c:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	4699      	mov	r9, r3
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	4698      	mov	r8, r3
 8004698:	4642      	mov	r2, r8
 800469a:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <HAL_UART_IRQHandler+0x3d0>)
 800469c:	401a      	ands	r2, r3
 800469e:	0013      	movs	r3, r2
 80046a0:	464a      	mov	r2, r9
 80046a2:	6093      	str	r3, [r2, #8]
 80046a4:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 80046a8:	238c      	movs	r3, #140	; 0x8c
 80046aa:	2220      	movs	r2, #32
 80046ac:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80046b0:	6760      	str	r0, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ba:	6822      	ldr	r2, [r4, #0]
 80046bc:	6813      	ldr	r3, [r2, #0]
 80046be:	43b3      	bics	r3, r6
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c6:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046c8:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ca:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046cc:	f7ff fe56 	bl	800437c <HAL_UARTEx_RxEventCallback>
 80046d0:	e68f      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80046d2:	0020      	movs	r0, r4
 80046d4:	f000 fa3a 	bl	8004b4c <HAL_UARTEx_RxFifoFullCallback>
    return;
 80046d8:	e68b      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
        HAL_UART_ErrorCallback(huart);
 80046da:	0020      	movs	r0, r4
 80046dc:	f7ff fe42 	bl	8004364 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e0:	51a5      	str	r5, [r4, r6]
 80046e2:	e686      	b.n	80043f2 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e4:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	4f19      	ldr	r7, [pc, #100]	; (8004754 <HAL_UART_IRQHandler+0x3d4>)
 80046f0:	6801      	ldr	r1, [r0, #0]
 80046f2:	4039      	ands	r1, r7
 80046f4:	6001      	str	r1, [r0, #0]
 80046f6:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fa:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fe:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004702:	6820      	ldr	r0, [r4, #0]
 8004704:	6881      	ldr	r1, [r0, #8]
 8004706:	43a9      	bics	r1, r5
 8004708:	6081      	str	r1, [r0, #8]
 800470a:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470e:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004712:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	6881      	ldr	r1, [r0, #8]
 800471a:	4399      	bics	r1, r3
 800471c:	6081      	str	r1, [r0, #8]
 800471e:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 8004722:	334c      	adds	r3, #76	; 0x4c
 8004724:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	4643      	mov	r3, r8
 8004728:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	43b3      	bics	r3, r6
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800473e:	465b      	mov	r3, fp
 8004740:	58e0      	ldr	r0, [r4, r3]
 8004742:	f7fe ffad 	bl	80036a0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004746:	4653      	mov	r3, sl
 8004748:	5ae1      	ldrh	r1, [r4, r3]
 800474a:	e67c      	b.n	8004446 <HAL_UART_IRQHandler+0xc6>
 800474c:	fffffedf 	.word	0xfffffedf
 8004750:	effffffe 	.word	0xeffffffe
 8004754:	fffffeff 	.word	0xfffffeff

08004758 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004758:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800475a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800475c:	07da      	lsls	r2, r3, #31
 800475e:	d506      	bpl.n	800476e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004760:	6801      	ldr	r1, [r0, #0]
 8004762:	4c28      	ldr	r4, [pc, #160]	; (8004804 <UART_AdvFeatureConfig+0xac>)
 8004764:	684a      	ldr	r2, [r1, #4]
 8004766:	4022      	ands	r2, r4
 8004768:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800476a:	4322      	orrs	r2, r4
 800476c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800476e:	079a      	lsls	r2, r3, #30
 8004770:	d506      	bpl.n	8004780 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004772:	6801      	ldr	r1, [r0, #0]
 8004774:	4c24      	ldr	r4, [pc, #144]	; (8004808 <UART_AdvFeatureConfig+0xb0>)
 8004776:	684a      	ldr	r2, [r1, #4]
 8004778:	4022      	ands	r2, r4
 800477a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800477c:	4322      	orrs	r2, r4
 800477e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004780:	075a      	lsls	r2, r3, #29
 8004782:	d506      	bpl.n	8004792 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004784:	6801      	ldr	r1, [r0, #0]
 8004786:	4c21      	ldr	r4, [pc, #132]	; (800480c <UART_AdvFeatureConfig+0xb4>)
 8004788:	684a      	ldr	r2, [r1, #4]
 800478a:	4022      	ands	r2, r4
 800478c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800478e:	4322      	orrs	r2, r4
 8004790:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004792:	071a      	lsls	r2, r3, #28
 8004794:	d506      	bpl.n	80047a4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004796:	6801      	ldr	r1, [r0, #0]
 8004798:	4c1d      	ldr	r4, [pc, #116]	; (8004810 <UART_AdvFeatureConfig+0xb8>)
 800479a:	684a      	ldr	r2, [r1, #4]
 800479c:	4022      	ands	r2, r4
 800479e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80047a0:	4322      	orrs	r2, r4
 80047a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047a4:	06da      	lsls	r2, r3, #27
 80047a6:	d506      	bpl.n	80047b6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a8:	6801      	ldr	r1, [r0, #0]
 80047aa:	4c1a      	ldr	r4, [pc, #104]	; (8004814 <UART_AdvFeatureConfig+0xbc>)
 80047ac:	688a      	ldr	r2, [r1, #8]
 80047ae:	4022      	ands	r2, r4
 80047b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80047b2:	4322      	orrs	r2, r4
 80047b4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047b6:	069a      	lsls	r2, r3, #26
 80047b8:	d506      	bpl.n	80047c8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ba:	6801      	ldr	r1, [r0, #0]
 80047bc:	4c16      	ldr	r4, [pc, #88]	; (8004818 <UART_AdvFeatureConfig+0xc0>)
 80047be:	688a      	ldr	r2, [r1, #8]
 80047c0:	4022      	ands	r2, r4
 80047c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80047c4:	4322      	orrs	r2, r4
 80047c6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047c8:	065a      	lsls	r2, r3, #25
 80047ca:	d50a      	bpl.n	80047e2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047cc:	6801      	ldr	r1, [r0, #0]
 80047ce:	4d13      	ldr	r5, [pc, #76]	; (800481c <UART_AdvFeatureConfig+0xc4>)
 80047d0:	684a      	ldr	r2, [r1, #4]
 80047d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80047d4:	402a      	ands	r2, r5
 80047d6:	4322      	orrs	r2, r4
 80047d8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	0352      	lsls	r2, r2, #13
 80047de:	4294      	cmp	r4, r2
 80047e0:	d009      	beq.n	80047f6 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e2:	061b      	lsls	r3, r3, #24
 80047e4:	d506      	bpl.n	80047f4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047e6:	6802      	ldr	r2, [r0, #0]
 80047e8:	490d      	ldr	r1, [pc, #52]	; (8004820 <UART_AdvFeatureConfig+0xc8>)
 80047ea:	6853      	ldr	r3, [r2, #4]
 80047ec:	400b      	ands	r3, r1
 80047ee:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6053      	str	r3, [r2, #4]
}
 80047f4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f6:	684a      	ldr	r2, [r1, #4]
 80047f8:	4c0a      	ldr	r4, [pc, #40]	; (8004824 <UART_AdvFeatureConfig+0xcc>)
 80047fa:	4022      	ands	r2, r4
 80047fc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80047fe:	4322      	orrs	r2, r4
 8004800:	604a      	str	r2, [r1, #4]
 8004802:	e7ee      	b.n	80047e2 <UART_AdvFeatureConfig+0x8a>
 8004804:	fffdffff 	.word	0xfffdffff
 8004808:	fffeffff 	.word	0xfffeffff
 800480c:	fffbffff 	.word	0xfffbffff
 8004810:	ffff7fff 	.word	0xffff7fff
 8004814:	ffffefff 	.word	0xffffefff
 8004818:	ffffdfff 	.word	0xffffdfff
 800481c:	ffefffff 	.word	0xffefffff
 8004820:	fff7ffff 	.word	0xfff7ffff
 8004824:	ff9fffff 	.word	0xff9fffff

08004828 <UART_WaitOnFlagUntilTimeout>:
{
 8004828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482a:	4646      	mov	r6, r8
 800482c:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800482e:	2304      	movs	r3, #4
{
 8004830:	464f      	mov	r7, r9
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004832:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004834:	2380      	movs	r3, #128	; 0x80
{
 8004836:	46d6      	mov	lr, sl
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004838:	011b      	lsls	r3, r3, #4
{
 800483a:	b5c0      	push	{r6, r7, lr}
 800483c:	0015      	movs	r5, r2
 800483e:	0007      	movs	r7, r0
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004840:	469a      	mov	sl, r3
{
 8004842:	000c      	movs	r4, r1
 8004844:	9e08      	ldr	r6, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004846:	6801      	ldr	r1, [r0, #0]
 8004848:	1c73      	adds	r3, r6, #1
 800484a:	d10c      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0x3e>
 800484c:	69cb      	ldr	r3, [r1, #28]
 800484e:	4023      	ands	r3, r4
 8004850:	1b1b      	subs	r3, r3, r4
 8004852:	425a      	negs	r2, r3
 8004854:	4153      	adcs	r3, r2
 8004856:	42ab      	cmp	r3, r5
 8004858:	d0f8      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800485a:	2000      	movs	r0, #0
}
 800485c:	bce0      	pop	{r5, r6, r7}
 800485e:	46ba      	mov	sl, r7
 8004860:	46b1      	mov	r9, r6
 8004862:	46a8      	mov	r8, r5
 8004864:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004866:	69cb      	ldr	r3, [r1, #28]
 8004868:	4023      	ands	r3, r4
 800486a:	1b1b      	subs	r3, r3, r4
 800486c:	425a      	negs	r2, r3
 800486e:	4153      	adcs	r3, r2
 8004870:	42ab      	cmp	r3, r5
 8004872:	d1f2      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004874:	f7fe fa62 	bl	8002d3c <HAL_GetTick>
 8004878:	4643      	mov	r3, r8
 800487a:	1ac0      	subs	r0, r0, r3
 800487c:	42b0      	cmp	r0, r6
 800487e:	d82d      	bhi.n	80048dc <UART_WaitOnFlagUntilTimeout+0xb4>
 8004880:	2e00      	cmp	r6, #0
 8004882:	d02b      	beq.n	80048dc <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004884:	464a      	mov	r2, r9
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	680b      	ldr	r3, [r1, #0]
 800488a:	421a      	tst	r2, r3
 800488c:	d0dc      	beq.n	8004848 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800488e:	4652      	mov	r2, sl
 8004890:	69cb      	ldr	r3, [r1, #28]
 8004892:	4213      	tst	r3, r2
 8004894:	d0d8      	beq.n	8004848 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004896:	620a      	str	r2, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004898:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489c:	2201      	movs	r2, #1
 800489e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048a2:	6839      	ldr	r1, [r7, #0]
 80048a4:	4c1a      	ldr	r4, [pc, #104]	; (8004910 <UART_WaitOnFlagUntilTimeout+0xe8>)
 80048a6:	680b      	ldr	r3, [r1, #0]
 80048a8:	4023      	ands	r3, r4
 80048aa:	600b      	str	r3, [r1, #0]
 80048ac:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b8:	6839      	ldr	r1, [r7, #0]
 80048ba:	688b      	ldr	r3, [r1, #8]
 80048bc:	4393      	bics	r3, r2
 80048be:	608b      	str	r3, [r1, #8]
 80048c0:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80048c4:	2320      	movs	r3, #32
 80048c6:	3287      	adds	r2, #135	; 0x87
 80048c8:	50bb      	str	r3, [r7, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80048ca:	3204      	adds	r2, #4
 80048cc:	50bb      	str	r3, [r7, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ce:	3204      	adds	r2, #4
 80048d0:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 80048d2:	2200      	movs	r2, #0
 80048d4:	3364      	adds	r3, #100	; 0x64
          return HAL_TIMEOUT;
 80048d6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80048d8:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80048da:	e7bf      	b.n	800485c <UART_WaitOnFlagUntilTimeout+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048dc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e0:	2201      	movs	r2, #1
 80048e2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	4c09      	ldr	r4, [pc, #36]	; (8004910 <UART_WaitOnFlagUntilTimeout+0xe8>)
 80048ea:	680b      	ldr	r3, [r1, #0]
 80048ec:	4023      	ands	r3, r4
 80048ee:	600b      	str	r3, [r1, #0]
 80048f0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	688b      	ldr	r3, [r1, #8]
 8004900:	4393      	bics	r3, r2
 8004902:	608b      	str	r3, [r1, #8]
 8004904:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8004908:	2320      	movs	r3, #32
 800490a:	3287      	adds	r2, #135	; 0x87
 800490c:	e7de      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xa4>
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	fffffe5f 	.word	0xfffffe5f

08004914 <HAL_UART_Init>:
{
 8004914:	b530      	push	{r4, r5, lr}
 8004916:	0004      	movs	r4, r0
 8004918:	b083      	sub	sp, #12
  if (huart == NULL)
 800491a:	2800      	cmp	r0, #0
 800491c:	d100      	bne.n	8004920 <HAL_UART_Init+0xc>
 800491e:	e0e1      	b.n	8004ae4 <HAL_UART_Init+0x1d0>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004920:	2388      	movs	r3, #136	; 0x88
 8004922:	58c3      	ldr	r3, [r0, r3]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d100      	bne.n	800492a <HAL_UART_Init+0x16>
 8004928:	e088      	b.n	8004a3c <HAL_UART_Init+0x128>
  huart->gState = HAL_UART_STATE_BUSY;
 800492a:	2388      	movs	r3, #136	; 0x88
 800492c:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800492e:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8004932:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004934:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004936:	681a      	ldr	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004938:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 800493a:	438a      	bics	r2, r1
 800493c:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800493e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004940:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004942:	432a      	orrs	r2, r5
 8004944:	6965      	ldr	r5, [r4, #20]
 8004946:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004948:	4d71      	ldr	r5, [pc, #452]	; (8004b10 <HAL_UART_Init+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800494c:	4029      	ands	r1, r5
 800494e:	430a      	orrs	r2, r1
 8004950:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	496f      	ldr	r1, [pc, #444]	; (8004b14 <HAL_UART_Init+0x200>)
    tmpreg |= huart->Init.OneBitSampling;
 8004956:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004958:	400a      	ands	r2, r1
 800495a:	68e1      	ldr	r1, [r4, #12]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8004960:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004962:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004964:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004966:	4d6c      	ldr	r5, [pc, #432]	; (8004b18 <HAL_UART_Init+0x204>)
 8004968:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800496a:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800496c:	430a      	orrs	r2, r1
 800496e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004972:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004974:	43aa      	bics	r2, r5
 8004976:	430a      	orrs	r2, r1
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497a:	4a68      	ldr	r2, [pc, #416]	; (8004b1c <HAL_UART_Init+0x208>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00a      	beq.n	8004996 <HAL_UART_Init+0x82>
 8004980:	4a67      	ldr	r2, [pc, #412]	; (8004b20 <HAL_UART_Init+0x20c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00e      	beq.n	80049a4 <HAL_UART_Init+0x90>
  huart->NbRxDataToProcess = 1;
 8004986:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <HAL_UART_Init+0x210>)
    return HAL_ERROR;
 8004988:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800498a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800498c:	2300      	movs	r3, #0
 800498e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8004990:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004992:	b003      	add	sp, #12
 8004994:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004996:	4b64      	ldr	r3, [pc, #400]	; (8004b28 <HAL_UART_Init+0x214>)
 8004998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800499a:	2303      	movs	r3, #3
 800499c:	4013      	ands	r3, r2
 800499e:	3b01      	subs	r3, #1
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d950      	bls.n	8004a46 <HAL_UART_Init+0x132>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	4298      	cmp	r0, r3
 80049aa:	d05c      	beq.n	8004a66 <HAL_UART_Init+0x152>
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ac:	f7ff fc06 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d012      	beq.n	80049da <HAL_UART_Init+0xc6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049b6:	4b5d      	ldr	r3, [pc, #372]	; (8004b2c <HAL_UART_Init+0x218>)
 80049b8:	0049      	lsls	r1, r1, #1
 80049ba:	5ac9      	ldrh	r1, [r1, r3]
 80049bc:	f7fb fba0 	bl	8000100 <__udivsi3>
 80049c0:	6865      	ldr	r5, [r4, #4]
 80049c2:	086b      	lsrs	r3, r5, #1
 80049c4:	18c0      	adds	r0, r0, r3
 80049c6:	0029      	movs	r1, r5
 80049c8:	f7fb fb9a 	bl	8000100 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049cc:	0002      	movs	r2, r0
 80049ce:	4b58      	ldr	r3, [pc, #352]	; (8004b30 <HAL_UART_Init+0x21c>)
 80049d0:	3a10      	subs	r2, #16
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d8d7      	bhi.n	8004986 <HAL_UART_Init+0x72>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80049da:	4b52      	ldr	r3, [pc, #328]	; (8004b24 <HAL_UART_Init+0x210>)
 80049dc:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80049e2:	67a3      	str	r3, [r4, #120]	; 0x78
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_UART_Init+0xdc>
    UART_AdvFeatureConfig(huart);
 80049ea:	0020      	movs	r0, r4
 80049ec:	f7ff feb4 	bl	8004758 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	4950      	ldr	r1, [pc, #320]	; (8004b34 <HAL_UART_Init+0x220>)
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	438a      	bics	r2, r1
 8004a00:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	3929      	subs	r1, #41	; 0x29
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0a:	2390      	movs	r3, #144	; 0x90
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	50e2      	str	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8004a10:	f7fe f994 	bl	8002d3c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a14:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004a16:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	0712      	lsls	r2, r2, #28
 8004a1c:	d446      	bmi.n	8004aac <HAL_UART_Init+0x198>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	075b      	lsls	r3, r3, #29
 8004a22:	d452      	bmi.n	8004aca <HAL_UART_Init+0x1b6>
  huart->gState = HAL_UART_STATE_READY;
 8004a24:	2320      	movs	r3, #32
 8004a26:	2288      	movs	r2, #136	; 0x88
 8004a28:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	3204      	adds	r2, #4
 8004a2c:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2e:	2300      	movs	r3, #0
  __HAL_UNLOCK(huart);
 8004a30:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	66e3      	str	r3, [r4, #108]	; 0x6c
  return HAL_OK;
 8004a34:	2000      	movs	r0, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a36:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8004a38:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004a3a:	e7aa      	b.n	8004992 <HAL_UART_Init+0x7e>
    huart->Lock = HAL_UNLOCKED;
 8004a3c:	2284      	movs	r2, #132	; 0x84
 8004a3e:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8004a40:	f7fe f8a2 	bl	8002b88 <HAL_UART_MspInit>
 8004a44:	e771      	b.n	800492a <HAL_UART_Init+0x16>
 8004a46:	4a3c      	ldr	r2, [pc, #240]	; (8004b38 <HAL_UART_Init+0x224>)
 8004a48:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4a:	2380      	movs	r3, #128	; 0x80
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	d04d      	beq.n	8004aee <HAL_UART_Init+0x1da>
    switch (clocksource)
 8004a52:	2a04      	cmp	r2, #4
 8004a54:	d048      	beq.n	8004ae8 <HAL_UART_Init+0x1d4>
 8004a56:	d825      	bhi.n	8004aa4 <HAL_UART_Init+0x190>
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	d0a7      	beq.n	80049ac <HAL_UART_Init+0x98>
 8004a5c:	2a02      	cmp	r2, #2
 8004a5e:	d000      	beq.n	8004a62 <HAL_UART_Init+0x14e>
 8004a60:	e791      	b.n	8004986 <HAL_UART_Init+0x72>
        pclk = (uint32_t) HSI_VALUE;
 8004a62:	4836      	ldr	r0, [pc, #216]	; (8004b3c <HAL_UART_Init+0x228>)
 8004a64:	e7a7      	b.n	80049b6 <HAL_UART_Init+0xa2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a66:	f7ff fba9 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d0b5      	beq.n	80049da <HAL_UART_Init+0xc6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a70:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_UART_Init+0x218>)
 8004a72:	0049      	lsls	r1, r1, #1
 8004a74:	5ac9      	ldrh	r1, [r1, r3]
 8004a76:	f7fb fb43 	bl	8000100 <__udivsi3>
 8004a7a:	6865      	ldr	r5, [r4, #4]
 8004a7c:	0040      	lsls	r0, r0, #1
 8004a7e:	086b      	lsrs	r3, r5, #1
 8004a80:	18c0      	adds	r0, r0, r3
 8004a82:	0029      	movs	r1, r5
 8004a84:	f7fb fb3c 	bl	8000100 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a88:	0002      	movs	r2, r0
 8004a8a:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <HAL_UART_Init+0x21c>)
 8004a8c:	3a10      	subs	r2, #16
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d900      	bls.n	8004a94 <HAL_UART_Init+0x180>
 8004a92:	e778      	b.n	8004986 <HAL_UART_Init+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a94:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <HAL_UART_Init+0x22c>)
        huart->Instance->BRR = brrtemp;
 8004a96:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a98:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a9a:	0700      	lsls	r0, r0, #28
 8004a9c:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004a9e:	4318      	orrs	r0, r3
 8004aa0:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 8004aa2:	e79a      	b.n	80049da <HAL_UART_Init+0xc6>
    switch (clocksource)
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	2a08      	cmp	r2, #8
 8004aa8:	d085      	beq.n	80049b6 <HAL_UART_Init+0xa2>
 8004aaa:	e76c      	b.n	8004986 <HAL_UART_Init+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aac:	2180      	movs	r1, #128	; 0x80
 8004aae:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <HAL_UART_Init+0x230>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	0389      	lsls	r1, r1, #14
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	0020      	movs	r0, r4
 8004aba:	f7ff feb5 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_UART_Init+0x1cc>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	075b      	lsls	r3, r3, #29
 8004ac8:	d5ac      	bpl.n	8004a24 <HAL_UART_Init+0x110>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aca:	2180      	movs	r1, #128	; 0x80
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_UART_Init+0x230>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	0020      	movs	r0, r4
 8004ad4:	002b      	movs	r3, r5
 8004ad6:	03c9      	lsls	r1, r1, #15
 8004ad8:	f7ff fea6 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d0a1      	beq.n	8004a24 <HAL_UART_Init+0x110>
      return HAL_TIMEOUT;
 8004ae0:	2003      	movs	r0, #3
 8004ae2:	e756      	b.n	8004992 <HAL_UART_Init+0x7e>
    return HAL_ERROR;
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	e754      	b.n	8004992 <HAL_UART_Init+0x7e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae8:	f7ff fa58 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
        break;
 8004aec:	e760      	b.n	80049b0 <HAL_UART_Init+0x9c>
    switch (clocksource)
 8004aee:	2a04      	cmp	r2, #4
 8004af0:	d007      	beq.n	8004b02 <HAL_UART_Init+0x1ee>
 8004af2:	d809      	bhi.n	8004b08 <HAL_UART_Init+0x1f4>
 8004af4:	2a00      	cmp	r2, #0
 8004af6:	d0b6      	beq.n	8004a66 <HAL_UART_Init+0x152>
 8004af8:	2a02      	cmp	r2, #2
 8004afa:	d000      	beq.n	8004afe <HAL_UART_Init+0x1ea>
 8004afc:	e743      	b.n	8004986 <HAL_UART_Init+0x72>
 8004afe:	480f      	ldr	r0, [pc, #60]	; (8004b3c <HAL_UART_Init+0x228>)
 8004b00:	e7b6      	b.n	8004a70 <HAL_UART_Init+0x15c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004b02:	f7ff fa4b 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
        break;
 8004b06:	e7b0      	b.n	8004a6a <HAL_UART_Init+0x156>
    switch (clocksource)
 8004b08:	2a08      	cmp	r2, #8
 8004b0a:	d0b1      	beq.n	8004a70 <HAL_UART_Init+0x15c>
 8004b0c:	e73b      	b.n	8004986 <HAL_UART_Init+0x72>
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	cfff69f3 	.word	0xcfff69f3
 8004b14:	ffffcfff 	.word	0xffffcfff
 8004b18:	11fff4ff 	.word	0x11fff4ff
 8004b1c:	40013800 	.word	0x40013800
 8004b20:	40004400 	.word	0x40004400
 8004b24:	00010001 	.word	0x00010001
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	08004e24 	.word	0x08004e24
 8004b30:	0000ffef 	.word	0x0000ffef
 8004b34:	ffffb7ff 	.word	0xffffb7ff
 8004b38:	08004e20 	.word	0x08004e20
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	0000fff0 	.word	0x0000fff0
 8004b44:	01ffffff 	.word	0x01ffffff

08004b48 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b48:	4770      	bx	lr
 8004b4a:	46c0      	nop			; (mov r8, r8)

08004b4c <HAL_UARTEx_RxFifoFullCallback>:
 8004b4c:	4770      	bx	lr
 8004b4e:	46c0      	nop			; (mov r8, r8)

08004b50 <HAL_UARTEx_TxFifoEmptyCallback>:
 8004b50:	4770      	bx	lr
 8004b52:	46c0      	nop			; (mov r8, r8)

08004b54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b54:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b56:	2484      	movs	r4, #132	; 0x84
 8004b58:	5d03      	ldrb	r3, [r0, r4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d012      	beq.n	8004b84 <HAL_UARTEx_DisableFifoMode+0x30>

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5e:	2588      	movs	r5, #136	; 0x88
 8004b60:	2324      	movs	r3, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b62:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004b64:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b66:	6803      	ldr	r3, [r0, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	43b1      	bics	r1, r6
 8004b6e:	6019      	str	r1, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b70:	4905      	ldr	r1, [pc, #20]	; (8004b88 <HAL_UARTEx_DisableFifoMode+0x34>)
 8004b72:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b74:	2100      	movs	r1, #0
 8004b76:	6641      	str	r1, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	5143      	str	r3, [r0, r5]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b7e:	5501      	strb	r1, [r0, r4]

  return HAL_OK;
 8004b80:	2000      	movs	r0, #0
}
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004b84:	2002      	movs	r0, #2
 8004b86:	e7fc      	b.n	8004b82 <HAL_UARTEx_DisableFifoMode+0x2e>
 8004b88:	dfffffff 	.word	0xdfffffff

08004b8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8e:	46d6      	mov	lr, sl
 8004b90:	464f      	mov	r7, r9
 8004b92:	4646      	mov	r6, r8
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b94:	2384      	movs	r3, #132	; 0x84
{
 8004b96:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 8004b98:	5cc3      	ldrb	r3, [r0, r3]
{
 8004b9a:	0004      	movs	r4, r0
 8004b9c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d03d      	beq.n	8004c1e <HAL_UARTEx_SetTxFifoThreshold+0x92>

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba2:	2388      	movs	r3, #136	; 0x88
 8004ba4:	2124      	movs	r1, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ba6:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004ba8:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004baa:	682e      	ldr	r6, [r5, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	3923      	subs	r1, #35	; 0x23
 8004bb0:	438b      	bics	r3, r1
 8004bb2:	602b      	str	r3, [r5, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bb4:	68ab      	ldr	r3, [r5, #8]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	08d9      	lsrs	r1, r3, #3
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bba:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bbc:	4311      	orrs	r1, r2
 8004bbe:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d029      	beq.n	8004c18 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bc4:	68ab      	ldr	r3, [r5, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bc6:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <HAL_UARTEx_SetTxFifoThreshold+0x98>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bc8:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bca:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bcc:	68ab      	ldr	r3, [r5, #8]
 8004bce:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bd0:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bd2:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bd4:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bd6:	5cd1      	ldrb	r1, [r2, r3]
 8004bd8:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bda:	f7fb fb1b 	bl	8000214 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bde:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004be0:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004be2:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004be4:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004be6:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004be8:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bea:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bec:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bee:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bf0:	f7fb fb10 	bl	8000214 <__divsi3>
 8004bf4:	b280      	uxth	r0, r0
 8004bf6:	2368      	movs	r3, #104	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	52e0      	strh	r0, [r4, r3]
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	52e7      	strh	r7, [r4, r3]
 8004c00:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c02:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c04:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8004c06:	2200      	movs	r2, #0
  return HAL_OK;
 8004c08:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	54e2      	strb	r2, [r4, r3]
}
 8004c0e:	bce0      	pop	{r5, r6, r7}
 8004c10:	46ba      	mov	sl, r7
 8004c12:	46b1      	mov	r9, r6
 8004c14:	46a8      	mov	r8, r5
 8004c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 8004c18:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 8004c1a:	2701      	movs	r7, #1
 8004c1c:	e7eb      	b.n	8004bf6 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8004c1e:	2002      	movs	r0, #2
 8004c20:	e7f5      	b.n	8004c0e <HAL_UARTEx_SetTxFifoThreshold+0x82>
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	08004e44 	.word	0x08004e44
 8004c28:	08004e3c 	.word	0x08004e3c

08004c2c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c2e:	46d6      	mov	lr, sl
 8004c30:	464f      	mov	r7, r9
 8004c32:	4646      	mov	r6, r8
  __HAL_LOCK(huart);
 8004c34:	2384      	movs	r3, #132	; 0x84
{
 8004c36:	b5c0      	push	{r6, r7, lr}
  __HAL_LOCK(huart);
 8004c38:	5cc3      	ldrb	r3, [r0, r3]
{
 8004c3a:	0004      	movs	r4, r0
 8004c3c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d03d      	beq.n	8004cbe <HAL_UARTEx_SetRxFifoThreshold+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c42:	2388      	movs	r3, #136	; 0x88
 8004c44:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c46:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c48:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c4a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	3923      	subs	r1, #35	; 0x23
 8004c50:	438b      	bics	r3, r1
 8004c52:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c54:	68a9      	ldr	r1, [r5, #8]
 8004c56:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <HAL_UARTEx_SetRxFifoThreshold+0x98>)
 8004c58:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c5a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c5c:	4311      	orrs	r1, r2
 8004c5e:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d029      	beq.n	8004cb8 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c64:	68ab      	ldr	r3, [r5, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c68:	4698      	mov	r8, r3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c6a:	4692      	mov	sl, r2
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c6c:	68ab      	ldr	r3, [r5, #8]
 8004c6e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c70:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c74:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c76:	5cd1      	ldrb	r1, [r2, r3]
 8004c78:	4691      	mov	r9, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c7a:	f7fb facb 	bl	8000214 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c7e:	4643      	mov	r3, r8
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c80:	4652      	mov	r2, sl
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c82:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c84:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c86:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c88:	5cd0      	ldrb	r0, [r2, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c8a:	464a      	mov	r2, r9
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c8c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c8e:	5cd1      	ldrb	r1, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c90:	f7fb fac0 	bl	8000214 <__divsi3>
 8004c94:	b280      	uxth	r0, r0
 8004c96:	2368      	movs	r3, #104	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8004c98:	2220      	movs	r2, #32
 8004c9a:	52e0      	strh	r0, [r4, r3]
 8004c9c:	3302      	adds	r3, #2
 8004c9e:	52e7      	strh	r7, [r4, r3]
 8004ca0:	331e      	adds	r3, #30
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ca2:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004ca4:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8004ca6:	2200      	movs	r2, #0
  return HAL_OK;
 8004ca8:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8004caa:	3b04      	subs	r3, #4
 8004cac:	54e2      	strb	r2, [r4, r3]
}
 8004cae:	bce0      	pop	{r5, r6, r7}
 8004cb0:	46ba      	mov	sl, r7
 8004cb2:	46b1      	mov	r9, r6
 8004cb4:	46a8      	mov	r8, r5
 8004cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 8004cb8:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 8004cba:	2701      	movs	r7, #1
 8004cbc:	e7eb      	b.n	8004c96 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
  __HAL_LOCK(huart);
 8004cbe:	2002      	movs	r0, #2
 8004cc0:	e7f5      	b.n	8004cae <HAL_UARTEx_SetRxFifoThreshold+0x82>
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	f1ffffff 	.word	0xf1ffffff
 8004cc8:	08004e44 	.word	0x08004e44
 8004ccc:	08004e3c 	.word	0x08004e3c

08004cd0 <__libc_init_array>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	4d0c      	ldr	r5, [pc, #48]	; (8004d08 <__libc_init_array+0x38>)
 8004cd6:	4c0d      	ldr	r4, [pc, #52]	; (8004d0c <__libc_init_array+0x3c>)
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	42a6      	cmp	r6, r4
 8004cde:	d109      	bne.n	8004cf4 <__libc_init_array+0x24>
 8004ce0:	2600      	movs	r6, #0
 8004ce2:	f000 f821 	bl	8004d28 <_init>
 8004ce6:	4d0a      	ldr	r5, [pc, #40]	; (8004d10 <__libc_init_array+0x40>)
 8004ce8:	4c0a      	ldr	r4, [pc, #40]	; (8004d14 <__libc_init_array+0x44>)
 8004cea:	1b64      	subs	r4, r4, r5
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	42a6      	cmp	r6, r4
 8004cf0:	d105      	bne.n	8004cfe <__libc_init_array+0x2e>
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	00b3      	lsls	r3, r6, #2
 8004cf6:	58eb      	ldr	r3, [r5, r3]
 8004cf8:	4798      	blx	r3
 8004cfa:	3601      	adds	r6, #1
 8004cfc:	e7ee      	b.n	8004cdc <__libc_init_array+0xc>
 8004cfe:	00b3      	lsls	r3, r6, #2
 8004d00:	58eb      	ldr	r3, [r5, r3]
 8004d02:	4798      	blx	r3
 8004d04:	3601      	adds	r6, #1
 8004d06:	e7f2      	b.n	8004cee <__libc_init_array+0x1e>
 8004d08:	08004e4c 	.word	0x08004e4c
 8004d0c:	08004e4c 	.word	0x08004e4c
 8004d10:	08004e4c 	.word	0x08004e4c
 8004d14:	08004e50 	.word	0x08004e50

08004d18 <memset>:
 8004d18:	0003      	movs	r3, r0
 8004d1a:	1882      	adds	r2, r0, r2
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <memset+0xa>
 8004d20:	4770      	bx	lr
 8004d22:	7019      	strb	r1, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	e7f9      	b.n	8004d1c <memset+0x4>

08004d28 <_init>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr

08004d34 <_fini>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr
